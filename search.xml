<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>中小型园区网络构建（二）—— SDN网络应用的设计与实现</title>
      <link href="/b11f40b7/"/>
      <url>/b11f40b7/</url>
      
        <content type="html"><![CDATA[<h1 id="网络应用介绍及原理">网络应用介绍及原理</h1><h2 id="NAPT介绍">NAPT介绍</h2><p>NAT是将IP数据包头中的IP地址转换为另一个IP地址的过程。在实际应用中，NAT主要用于实现私有网络访问公共网络的功能。这种通过使用少量的公有IP地址代表较多的私有IP地址的方式，将有助于减缓可用IP地址空间的枯竭。</p><p>NAT的基本工作原理是当私有网主机和公共网主机通信的IP包经过NAT网关时，将IP包中的源IP或目的IP在私有IP和NAT的公共IP之间进行转换。</p><p>由于NAT实现是私有IP和NAT的公共IP之间的转换，那么，私有网中同时与公共网进行通信的主机数量就受到NAT的公共IP地址数量的限制。为了克服这种限制，NAT被进一步扩展到在进行IP地址转换的同时进行Port的转换，这就是网络地址端口转换NAPT（Network Address Port Translation）技术。NAPT也被称为“多对一”的NAT，或者叫PAT（Port Address Translations，端口地址转换）、地址超载（address overloading）。</p><p>NAPT与NAT的区别在于，NAPT不仅转换IP包中的IP地址，还对IP包中TCP和UDP的Port进行转换。这使得多台私有网主机利用1个NAT公共IP就可以同时和公共网进行通信。</p><h2 id="防火墙介绍">防火墙介绍</h2><p>防火墙是一种通过基于一组用户定义的规则过滤传入和传出网络流量来提供网络安全性的系统。通常，防火墙的目的是减少或消除不需要的网络通信的发生，同时允许所有合法通信自由流动。在大多数服务器基础架构中，防火墙提供了一个重要的安全层，与其他措施相结合，可以防止攻击者以恶意方式访问服务器。</p><p>有三种基本类型的网络防火墙：包过滤（无状态），有状态和应用层。</p><p>数据包过滤或无状态防火墙通过隔离检查单个数据包来工作。因此，他们不知道连接状态，并且只能根据各个数据包标头允许或拒绝数据包。</p><p>状态防火墙能够确定数据包的连接状态，这使得它们比无状态防火墙更灵活。它们通过收集相关数据包来工作，直到可以在将任何防火墙规则应用于流量之前确定连接状态。</p><p>应用程序防火墙通过分析传输的数据更进一步，这使得网络流量可以与特定于各个服务或应用程序的防火墙规则相匹配。这些也称为基于代理的防火墙。</p><p>除了在所有现代操作系统上都可用的防火墙软件之外，防火墙功能还可以由硬件设备提供，例如路由器或防火墙设备。</p><h2 id="DHCP中继介绍">DHCP中继介绍</h2><p>DHCP使用了租约的概念，或称为计算机IP地址的有效期。租用时间是不定的，主要取决于用户在某地连接Internet需要多久，这对于教育行业和其它用户频繁改变的环境是很实用的。透过较短的租期，DHCP能够在一个计算机比可用IP地址多的环境中动态地重新配置网络。DHCP支持为计算机分配静态地址，如需要永久性IP地址的Web服务器。</p><p>在大型的网络中，可能会存在多个网段。DHCP客户机通过网络广播消息获得DHCP服务器的响应后得到IP地址。但广播消息是不能跨越网段的。因此，DHCP客户机和服务器在不同的网段内时，客户机向服务器申请IP地址就要用到DHCP中继代理。DHCP中继代理实际上是一种软件技术，安装在DHCP中继代理的设备（路由器，交换机，服务器）称为DHCP中继代理服务器，它承担不同网段间的DHCP客户机和服务器的通信任务。</p><p>DHCP客户端启动并进行DHCP初始化时，它在本地网络广播配置请求报文。如果本地络存在DHCP服务器，则可以直接进行DHCP配置，不需要DHCP中继；如果本地网络没有DHCP服务器，则与本网络相连的且带DHCP中继功能的网络设备收到该广播报文后，进行适当的处理并转发给指定的在其它网络上的DHCP服务器。DHCP服务器根据客户端提供的信息进行相应的配置，并通过DHCP中继将配置信息发送给客户端，完成对客户端的动态配置。</p><h2 id="VRRP介绍">VRRP介绍</h2><p>现网中的主机使用缺省网关与外部网络联系时，如果Gateway出现故障，与其相连的主机将与外界失去联系，导致业务中断。VRRP的出现很好地解决了这个问题。VRRP将多台设备组成一个虚拟设备，通过配置虚拟设备的IP地址为缺省网关，实现缺省网关的备份。当网关设备发生故障时，VRRP机制能够选举新的网关设备承担数据流量，从而保障网络的可靠通信。如下图所示，当Master设备故障时，发往缺省网关的流量将由Backup设备进行转发。</p><p><img src="https://image.asa-world.cn/pic/image-20230717202114248.png" alt="VRRP备份组示意图"></p><h2 id="应用服务器介绍">应用服务器介绍</h2><p><strong>Web服务器</strong>，是指驻留于因特网上某种类型计算机的程序。当Web浏览器（客户端）连到服务器上并请求文件时，服务器将处理该请求并将文件发送到该浏览器上，附带的信息会告诉浏览器如何查看该文件（即文WEB服务器件类型）。服务器使用HTTP（超文本传输协议）进行信息交流，这就是人们常把它们称为HTTPD服务器的原因。</p><p>Web服务器不仅能够存储信息，还能在用户通过Web浏览器提供的信息的基础上运行脚本和程序。</p><p><strong>FTP服务器</strong>，全称File Transfer Protocol Server，是在互联网上提供文件存储和访问服务的计算机，它们依照FTP协议提供服务。FTP，文件传输协议（File Transfer Protocol）是用于在网络上进行文件传输的一套标准协议，使用客户/服务器模式。FTP是专门用来传输文件的协议。</p><p>FTP是一个客户机/服务器系统，用户通过使用一个支持FTP协议的客户端，连接到远程主机上的服务器程序上。用户在客户端发出命令，远程主机服务器接收到命令后执行用户所发出的命令，同时将执行结果返回到客户端。简单来说，就是用户对服务器发出一条命令，要求服务器向用户发送一份文件，服务器响应并发送文件到客户端，用户收到文件将其放置于用户工作目录中，这一过程就是FTP服务器进行的文件交流。</p><h2 id="GRE隧道介绍">GRE隧道介绍</h2><p>GRE 是在网络上建立直接点对点连接的一种方法，目的是简化单独网络之间的连接。它适用于各种网络层协议。将数据包封装在其他数据包中称为“隧道”。</p><p>GRE 隧道通常配置在两个路由器之间，每个路由器的作用好比隧道的一端。路由器设置为彼此直接发送和接收 GRE 数据包。两个路由器之间的任何路由器都不会打开封装的数据包；它们仅引用封装数据包外层的标头进行转发。</p><h1 id="方案设计">方案设计</h1><h2 id="NAPT设计">NAPT设计</h2><p>（一）需求分析</p><p>我们设计的网络中，为了节约公有地址的使用，因此我们选择利用NAPT技术对于我们的私网地址做一层转换，将我们的所有私有地址访问外网的时候，映射成同一个公有地址，实现地址的共享。并且利用NAPT技术也可以实现我们私有地址安全的进一步提升。而NAPT技术为了实现共用同一个公有地址，需要记录并改变报文的IP和TCP/UDP的端口号。因此我们需要利用流表项对于我们报文的IP和端口号进行改变。</p><p>并且我们发现在一些公司当中，会将服务器的IP暴露出来供他人进行ICMP访问，而我们这里并没有公网地址给我们的服务器使用，因此，我们需要也对我们的ICMP报文进行类似的NAPT技术应用，实现我们的ICMP报文的NAPT映射，而其中我们发现ICMP报文中标识这个参数可以进行修改，从而办到ICMP的地址映射技术。</p><p>（二）设计思路</p><p>在我们设计的网络中，将S7作为我们的NAPT地址映射的节点，在该节点下发流表实现我们的地址映射操作。并且由于NAPT需要一个公网地址，因此我们将我们的虚拟机网卡绑定在S7的一个端口上，并将该网卡的IP地址作为我们最终映射成的地址。由于我们采用的SDN网络架构，因此我们选择利用控制器编程实现地址映射，以及对应的流表下发功能。</p><p>其中我们所设计的NAPT流程可以划分为2种情况，一种是从外网接收发向内网的报文，一种是内网访问外网。</p><p>其中由内网发向外网流程如下所述：</p><ol><li>在网关接收到一个报文后，判断其是否有对应的流表进行匹配，如有匹配项，按照匹配进行转发。如果没有则发往控制器。</li><li>控制器判断目的地址是否为外网，如果不是则按照内网寻路和转发的方式进行报文转发。如果是则查看arp表是否记录虚拟机的网关，如果没有记录，则缓存报文，并向虚拟机发起arp请求。</li><li>当控制器有虚拟机网关mac信息后，根据NAPT映射方法，计算当前报文的源信息的映射情况，并寻路，随后下发NAPT映射流表，mac地址更改流表和路报文发流表。</li><li>根据映射结果，将报文的IP和端口号进行修改（如果为ICMP报文则为标识），并修改mac地址，最终将其发送到虚拟机网关。</li></ol><p><img src="https://image.asa-world.cn/pic/image-20230717203328417.png" alt="内网发向外网NAPT流程图"></p><p>其中由内网发向外网流程如下所述：</p><ol><li>在网关接收到一个报文后，判断其是否有对应的流表进行匹配，如有匹配项，按照匹配进行转发。如果没有则发往控制器。</li><li>控制器接收报文之后判断是否为目的地址和源地址都是外网，如果不是，则按照内网转发或者是发往外网的流程进行处理。如果是则判断目的地址和端口号是否有地址映射对应（如果是ICMP报文则为标识），如果没有记录则丢弃报文，如果有记录则对报文进行地址映射，将报文地址映射成内网地址。</li><li>判断是否为arp报文，如果是则记录其信息。如果不是则判断该报文映射后目的地址是否有arp记录，如果没有记录则缓存并进行arp请求。如果有则修改报文目的mac地址，随后下发NAPT映射流表，mac地址修改流表，最终按照内网转发报文的流程进行处理。</li></ol><p><img src="https://image.asa-world.cn/pic/image-20230717203341583.png" alt="外网发向内网NAPT流程图"></p><p>在该过程当中我们的NAPT的IP和端口映射算法如下所述：</p><ol><li>在控制器种我们首先利用一个映射表记录我们的NAPT映射情况。</li><li>随后将IP映射成虚拟机网卡的IP地址，端口首先映射成自己本身，检查是否这个映射的端口号是有记录的，如果有记录则将自己的映射端口号加一，直到没有记录过为止，随后记录该映射。</li></ol><p>并且在过程中涉及到流表项的下发，其中由内网发向外网流表如下所述：</p><ol><li>路径中的第一个openflow交换机：匹配为报文的目的IP地址，且目的mac为网关mac地址；作用为修改报文的mac地址为其虚拟机网关的mac地址以及转发该报文。</li><li>路径中的中间openflow交换机：匹配为报文的mac地址为虚拟机网关的mac地址（避免重复下发）；作用为转发报文。</li><li>路径中的最后一个openflow交换机（S7）：匹配为报文的IP地址为外网记录的的地址；作用为修改源IP地址和端口号做NAPT映射（如果是ICMP报文则为ICMP报文标识）和转发报文。</li></ol><p>另外，由外网发向内网流表如下所述：</p><ol><li>路径中的第一个openflow交换机：匹配为报文的目的IP地址为内网主机，且端口为指定端口；作用为修改报文的目的IP地址和端口号做NAPT映射（如果是ICMP报文则为ICMP报文标识）并修改mac地址为主机对应的mac地址，和实现报文转发。</li><li>路径中的后续openflow交换机：匹配为报文的目的IP地址；作用为转发报文。</li></ol><p>对于上述需求分析中，我们提及的ICMP报文的情况。因此我们设计的NAPT是包含了对于ICMP报文的处理，但ICMP报文并没有传输层的端口号，因此我们选择利用其ICMP报文中的标识进行我们的映射如下图所示，由于一次ping操作中连续的ICMP的ICMP报文标识是相同的，因此我们选择将短时间内记录ICMP标识和IP地址的映射情况，从而类比TCP报文的端口实现其NAPT功能。</p><p><img src="https://image.asa-world.cn/pic/image-20230717203252208.png" alt="ICMP报文中的标识"></p><p>并且对于我们的服务器需要供外网进行访问，因此，我们需要提前将我们的服务器IP地址和我们的对应的端口号进行NAPT地址映射的记录。</p><h2 id="防火墙设计">防火墙设计</h2><p>（一）需求分析</p><p>在本组设计的SDN网络中，存在一个服务器网段与一个访客网段。因此我们选择配置防火墙对数据的传输进行过滤，以达成内外网的隔离及对服务器集群的保护。其中主要考虑在禁止访客网络和部分内部网络访问ftp服务器，以及允许服务器级群向外发送信息。同时还可以通过防火墙的设置对服务器的安全性进行一定提升。</p><p>（二）设计思路</p><p>由于本组的SDN网络是基于mininet和ryu控制器实现，所以选择使用ryu控制器自带的rest_firewall进行防火墙的实现。本方法对数据包的过滤是基于路由器的流表项，因此我们选择将控制器放在服务器集群的s11上便于专门对服务器的防火墙配置。</p><p>ryu的rest_firewall在开启后默认为禁止所有包的传输，因此我们要为这个交换机制订相应的规则打通数据传输的隧道。此处我们组制订的思路如下：</p><ol><li>允许所有源地址为192.168.4.0网段的报文通过，使服务器集群的数据能正常流出。</li><li>允许所有目的地址为web服务器，端口为80的报文通过，这样设置在访问web服务器时只能通过80端口，避免端口扫描等。</li><li>禁止icmp报文的通过，以此避免ddos攻击使服务器负载过大。</li><li>为部分内部网络开通访问ftp服务器，避免外网以及无权限内网访问ftp服务器。</li></ol><p><img src="https://image.asa-world.cn/pic/image-20230717203607801.png" alt="防火墙流程图"></p><h2 id="DHCP中继设计">DHCP中继设计</h2><p>（一）需求分析</p><p>在我们设计的网络中，分布着多个需要DHCP服务器分配IP地址的子网，而为了节省网络中搭建多个DHCP服务器造成的开支，我们选择在网络的汇聚层上搭建一个DHCP服务器复制分配多个子网的IP地址分配。这种网络搭建方案导致DHCP服务器和DHCP客户机位于不同网段；因此需要引入DHCP中继技术，将接入层的SDN交换机配置为DHCP中继代理，由其负责与DHCP服务器进行交互完成所属子网DHCP客户机的IP地址分配，最终实现网络中一个DHCP服务器完成不同子网IP地址的分配。</p><p>（二）设计思路</p><p><img src="https://image.asa-world.cn/pic/image-20230717203843309.png" alt="主干网拓扑图"></p><p>如主干网拓扑图所示，在我们设计的网络中，DHCP服务器与汇聚层交换机s4、s5相连;需要DHCP服务的三个主机网络为与s1、s2、s3相连，所属网段分别为192.168.1.0/24、192.168.2.0/24、192.168.3.0/24。为了实现DHCP中继，我们将s1、s2、s3指定为DHCP中继代理交换机，并分别将其与二层交换机s8、s9、s10相连的接口IP设置为相应子网网关192.168.1.254、192.168.2.254、192.168.3.254。</p><p>由于我们采用的网络架构为SDN，该架构下的转发设备在路由转发过程中不是基于传统的路由表匹配而是基于流表项匹配，而传统的开源DHCP中继技术方案都是基于路由表的转发方式，因此此处无法采用传统开源方案配置。由此我们选择自主设计相应的SDN控制器，由控制器对报文进行修改来实现我们预期的DHCP中继功能。</p><p>以S1所属的子网主机实现DHCP服务为例分析，在SDN网络中实现DHCP中继的IP地址分配/租赁过程思路如下：</p><ol><li>当h1发送DHCP Discover/Request报文时，会将DHCP Discover/Request报文广播发送到s1。</li><li>当s1收到DHCP Discover/Request报文后会将报文上发到SDN控制器处理。</li><li>当控制器收到s1上发的DHCP Discover/Request报文后，会查询所记录的s1对应的IP地址并替换报文中DHCP协议的giaddr字段；并修改以太网协议的源MAC为s1与二层交换机相连端口的MAC及目的MAC为所记录的DHCP服务器MAC地址（此处使用随机算法，随机选择DHCP服务器与s4、s5连接的其中一条链路发送，实现DHCP服务器的负载均衡）、IP协议的源IP为s1对应的IP地址及目的IP为DHCP中继服务器对应的IP地址；最终将修改完成的报文送往随机选定的DHCP服务器端口。</li><li>当DHCP服务器收到请求报文后，会在其预先配置的多个DHCP地址池中选择与报文中DHCP协议的giaddr字段对应的地址的地址池，并返回相应信息（IP信息、网关、租期等等）。</li><li>当s4或s5收到DHCP服务器发送的DHCP Offer/Reply报文时，会将该报文上发给控制器。</li><li>当控制器收到s4或s5上发的DHCP Offer/Reply报文后，会根据报文中DHCP协议的giaddr字段查询对应的DHCP中继代理交换机及该交换机与二层交换机连接的端口；并修改报文中以太网协议的源MAC为对应的DHCP中继代理交换机与二层交换机相连端口的MAC地址及目的MAC为所记录的DHCP服务器MAC地址、IP协议的源IP为对应的DHCP中继代理交换机与二层交换机相连端口的的IP地址及HCP协议的yiaddr字段；最终将修改完的报文从对应的DHCP中继代理交换机与二层交换机连接的端口送出，即送回原来的子网，完成DHCP服务的交互。</li></ol><p>对于IP地址更新流程和IP地址释放流程的思路与IP地址分配/租赁过程几乎一致，同样是将报文上发到控制器并修改报文，最终将报文发送到指定的位置实现DHCP服务。</p><p><img src="https://image.asa-world.cn/pic/image-20230717204312586.png" alt="DHCP中继流程图"></p><h2 id="应用服务器设计">应用服务器设计</h2><p>（一）需求分析</p><p>在我们设计的网络中，为了更好为内部网络和外界提供服务，我们设置了一个服务器集群提供各种服务。其中设置了Web服务器用于提供门户网站、外界宣传等服务，设置FTP服务器用于为内部员工提供重要文件共享和传输服务。在Web服务器的搭建中，为了保障Web服务器的安全及实现负载均衡，我们使用了反向代理的机制，使用两台反向代理服务器用于代理Web服务器集群。</p><p>（二）设计思路</p><p>在我们设计的网络中，所有的主机和SDN交换机都是基于Mininet平台的虚拟设备，而对我们的服务器而言，为了更好的实现预期的服务功能，我们需要使用真实的虚拟机来配置。其中如何连接基于Mininet平台的拓扑和作为服务器的虚拟机是一个关键的问题。</p><p>针对这个问题，我们使用与课程实验平台类似的搭建方式，即在VMware中创建多个虚拟网络VMnet，并在Mininet拓扑所在的虚拟机中新建连接对应VMnet网络的网卡，将该网卡与拓扑中连接服务器的二层交换机连接，最终实现Mininet拓扑与真实虚拟机的联通。</p><p>其次是Web服务器的反向代理机制，我们在网络中配置了两个反向代理服务器及两个Web服务器用来模拟服务器集群。为了保障Web服务器的安全，我们设计由反向代理服务器与拓扑中的二层交换机连接，Web服务器只能反向代理服务器范围。对此我们需要在每个反向代理服务器配置两张网卡，一张用于连接拓扑中的二层交换机，另一张用于连接Web服务器；并在反向代理服务器中安装nginx，使用nginx的代理机制将特定IP地址（反向代理服务器的IP地址）的访问映射到我们指定的IP地址（Web服务器的IP地址）去，实现基于nginx的反向代理。同时可以配置代理映射地址池，将特定IP地址映射到指定的地址池中，按权重选择某一IP地址访问实现Web服务器的负载均衡。</p><p><img src="https://image.asa-world.cn/pic/image-20230717204118106.png" alt="服务器搭建流程"></p><p><img src="https://image.asa-world.cn/pic/image-20230717204134412.png" alt="服务器访问流程"></p><h2 id="基于VRRP协议的高可用设计">基于VRRP协议的高可用设计</h2><p>（一）需求分析</p><p>在我们设计的网络中，Web服务器的配置采用反向代理的机制，但当反向代理服务器出现异常时，就会出现Web服务器无法访问的情况。为了应对这种情况，我们使用了两台反向代理服务器做主备服务器。两台主机通过VRRP协议组成一个服务器组，虚拟化为一台反向代理服务器，拥有对应的虚拟IP地址，当一台服务器出现异常时，另一台服务器可以通过VRRP协议检测到异常，并接替另一台服务器的虚拟IP地址继续完成服务，保障服务器组高可用。</p><p>常见基于VRRP协议的高可用配置有主从配置和双主配置， 主从配置中两台反向代理服务器共用一个虚拟IP地址，同一时刻只有一台主服务器工作，另一台备份服务器在主服务器不出现故障的时候，永远处于浪费状态；双主配置中两台反向代理服务器互为主备服务器，同一时刻两台服务器都在工作，当其中一台服务器出现故障时，两台服务器的请求都转移到一台服务器负担。出于充分利用服务器性能及增加访问负载能力等角度考虑，最终决定在我们的网络中采用主从配置实现高可用。</p><p>（二）设计思路</p><p>对于VRRP协议高可用配置的使用，我们决定使用现成比较成熟的技术方案配置，即keepalived软件。我们使用keepalived软件将两台位于同一子网并连通的反向代理服务器组成一个反向代理服务器组，并配置两台服务器互为主备服务器，分别设置相应的优先级、检测时延等基础参数，最终实现两台反向代理服务器之间的高可用服务。</p><h2 id="GRE隧道设计">GRE隧道设计</h2><p>（一）需求分析</p><p>在我们设计的网络中，我们搭建了主干网和分支网，其中主干网和分支网分别位于不同的物理网络。为了保障主干网中内部资源与分支网的共享还有通信的安全性，我们计划在主干网和分支网之间搭建一条GRE隧道用于两个网络的内部连通，即通过隧道连接分支网的主机设备与主干网的服务器集群。分支网的主机既可以通过公网IP访问Web服务器也可以通过GRE隧道访问Web服务器；但主机只能通过GRE隧道访问FTP服务器，以保障内部资料的安全。</p><p>（二）设计思路</p><p>在我们设计的网络中，主干网和分支网位于不同的虚拟机中，对于GRE隧道的实现，我们需要搭建一条连通两个虚拟机中Miniet拓扑的GRE隧道。因为Linux系统支持系统级的GRE隧道配置，因此我们只需要在两个虚拟机间搭建一条系统级的GRE隧道连通相应网段，将拓扑中NAT交换机配置为隧道站点，当收到相应隧道报文时，将报文从NAT交换机与隧道相连的端口送出即可完成Mininet拓扑之间隧道的通信。</p><p><img src="https://image.asa-world.cn/pic/image-20230717204503922.png" alt="GRE隧道两端主机通信流程图"></p><h1 id="方案实现与结果分析">方案实现与结果分析</h1><h2 id="NAPT实现与分析">NAPT实现与分析</h2><p>（一）实现</p><details class="folding-tag" blue><summary> 文本配置的读取并初始化控制器 </summary>              <div class='content'>              <p><img src="https://image.asa-world.cn/pic/image-20230717210346850.png" alt="文本配置中NAPT相关信息"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 读取NAT信息</span></span><br><span class="line">self.nat_ip = content[<span class="number">0</span>].replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;=&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------NAt_ip:  &#123;&#125;---------------------&quot;</span>.<span class="built_in">format</span>(self.nat_ip))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取NAT mask信息</span></span><br><span class="line">self.nat_mask = content[<span class="number">0</span>].replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;=&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------NAt_mask:  &#123;&#125;---------------------&quot;</span>.<span class="built_in">format</span>(self.nat_mask))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取NAT交换机编号信息</span></span><br><span class="line">self.nat_switch_id = <span class="built_in">int</span>(content[<span class="number">1</span>].replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;=&#x27;</span>)[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------NAt_ip:  &#123;&#125;---------------------&quot;</span>.<span class="built_in">format</span>(self.nat_switch_id))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取NAT交换机端口信息</span></span><br><span class="line">self.nat_switch_port = <span class="built_in">int</span>(content[<span class="number">2</span>].replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;=&#x27;</span>)[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------NAt_ip:  &#123;&#125;---------------------&quot;</span>.<span class="built_in">format</span>(self.nat_switch_port))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取网络网关信息</span></span><br><span class="line">self.net_getaway_ip = content[<span class="number">3</span>].replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;=&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------NAt_ip:  &#123;&#125;---------------------&quot;</span>.<span class="built_in">format</span>(self.net_getaway_ip))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取网络信息</span></span><br><span class="line">self.net_ip = content[<span class="number">4</span>].replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;=&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------Net_ip:  &#123;&#125;---------------------&quot;</span>.<span class="built_in">format</span>(self.net_ip))</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 服务器初始映射 </summary>              <div class='content'>              <p><img src="https://image.asa-world.cn/pic/image-20230717210641557.png" alt="服务器初始映射"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取web 相关信息</span></span><br><span class="line">self.serve_host = content[<span class="number">9</span>].replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;=&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> host <span class="keyword">in</span> self.serve_host:</span><br><span class="line">  self.tcp_out[(host.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>], <span class="built_in">int</span>(host.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]))] = <span class="built_in">int</span>(host.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">  self.tcp_in[<span class="built_in">int</span>(host.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>])] = (host.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>], <span class="built_in">int</span>(host.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------server_host:  &#123;&#125;---------------------&quot;</span>.<span class="built_in">format</span>(self.serve_host))</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 向外网发送报文做NAPT </summary>              <div class='content'>              <p>当我们判断一个报文其目的地址为外网，源地址为内网的时候，他就是一个发往外网的报文，此时需要利用NAT_out函数进行处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">NAT_out</span>(<span class="params">self, msg</span>):</span><br><span class="line">        datapath = msg.datapath</span><br><span class="line">        in_port = msg.<span class="keyword">match</span>[<span class="string">&#x27;in_port&#x27;</span>]</span><br><span class="line">        pkt = packet.Packet(msg.data)</span><br><span class="line">        eth = pkt.get_protocols(ethernet.ethernet)[<span class="number">0</span>]</span><br><span class="line">        parser = self.nat_switch.dp.ofproto_parser</span><br><span class="line">        pkt_ipv4 = pkt.get_protocol(ipv4.ipv4)</span><br><span class="line">        pkt_udp = pkt.get_protocol(udp.udp)</span><br><span class="line">        pkt_tcp = pkt.get_protocol(tcp.tcp)</span><br><span class="line">        pkt_icmp = pkt.get_protocol(icmp.icmp)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pkt_icmp <span class="keyword">and</span> pkt_icmp.<span class="built_in">type</span> == icmp.ICMP_ECHO_REQUEST:</span><br><span class="line">            <span class="comment"># 找到icmp未有记录</span></span><br><span class="line">            <span class="keyword">if</span> (pkt_ipv4.src, pkt_icmp.data.<span class="built_in">id</span>) <span class="keyword">not</span> <span class="keyword">in</span> self.icmp_out:</span><br><span class="line">                icmp_id = copy.copy(pkt_icmp.data.<span class="built_in">id</span>)</span><br><span class="line">                <span class="comment"># 使得变换后icmp不冲突</span></span><br><span class="line">                <span class="keyword">while</span> icmp_id <span class="keyword">in</span> self.icmp_in:</span><br><span class="line">                    icmp_id += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                self.icmp_out[(pkt_ipv4.src, pkt_icmp.data.<span class="built_in">id</span>)] = icmp_id</span><br><span class="line">                self.icmp_in[icmp_id] = (pkt_ipv4.src, pkt_icmp.data.<span class="built_in">id</span>)</span><br><span class="line">                self.ICMPTTLinit(icmp_id)</span><br><span class="line"></span><br><span class="line">            src_ip = copy.copy(pkt_ipv4.src)</span><br><span class="line">            actions = [parser.OFPActionOutput(self.nat_switch_port)]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 修改mac</span></span><br><span class="line">            <span class="keyword">if</span> self.net_getaway_ip <span class="keyword">in</span> self.arp_table <span class="keyword">and</span> <span class="keyword">not</span> (</span><br><span class="line">                    self.ipInSubnet(pkt_ipv4.dst, <span class="string">&quot;/&quot;</span>.join((self.nat_ip, self.nat_mask)))):</span><br><span class="line">                eth.dst = self.arp_table[self.net_getaway_ip][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">elif</span> pkt_ipv4.dst <span class="keyword">in</span> self.arp_table:</span><br><span class="line">                eth.dst = self.arp_table[pkt_ipv4.dst][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.stor(msg)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            src_id = pkt_icmp.data.<span class="built_in">id</span></span><br><span class="line">            <span class="comment"># 修改id</span></span><br><span class="line">            pkt_icmp.data.<span class="built_in">id</span> = self.icmp_out[(src_ip, pkt_icmp.data.<span class="built_in">id</span>)]</span><br><span class="line">            self.ICMPTTLinit(pkt_icmp.data.<span class="built_in">id</span>)</span><br><span class="line">            <span class="comment"># 修改原ip</span></span><br><span class="line">            pkt_ipv4.src = self.nat_ip</span><br><span class="line">            self.logger.info(</span><br><span class="line">                <span class="string">&quot;send a ICMP Packet to internet changed_ip is from &#123;&#125; id:&#123;&#125; to &#123;&#125; SNAT to &#123;&#125; id:&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(src_ip,src_id, pkt_ipv4.src,self.nat_ip,pkt_icmp.data.<span class="built_in">id</span>))</span><br><span class="line">            pkt_icmp.csum = <span class="number">0</span></span><br><span class="line">            pkt.serialize()</span><br><span class="line">            self.send_out(self.nat_switch, actions, pkt.data)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> pkt_tcp:</span><br><span class="line">            <span class="comment"># 找到icmp未有记录</span></span><br><span class="line">            src_port = copy.copy(pkt_tcp.src_port)</span><br><span class="line">            <span class="keyword">if</span> (pkt_ipv4.src, pkt_tcp.src_port) <span class="keyword">not</span> <span class="keyword">in</span> self.tcp_out:</span><br><span class="line">                <span class="comment"># 使得变换后icmp不冲突</span></span><br><span class="line">                <span class="keyword">while</span> src_port <span class="keyword">in</span> self.tcp_in:</span><br><span class="line">                    src_port += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                self.tcp_out[(pkt_ipv4.src, pkt_tcp.src_port)] = src_port</span><br><span class="line">                self.tcp_in[src_port] = (pkt_ipv4.src, pkt_tcp.src_port)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># sleep(1)</span></span><br><span class="line">            src_ip = copy.copy(pkt_ipv4.src)</span><br><span class="line">            actions = [parser.OFPActionOutput(self.nat_switch_port)]</span><br><span class="line">            origin_mac = eth.dst</span><br><span class="line">            <span class="comment"># 修改mac</span></span><br><span class="line">            <span class="keyword">if</span> self.net_getaway_ip <span class="keyword">in</span> self.arp_table <span class="keyword">and</span> <span class="keyword">not</span> (</span><br><span class="line">                    self.ipInSubnet(pkt_ipv4.dst, <span class="string">&quot;/&quot;</span>.join((self.nat_ip, self.nat_mask)))):</span><br><span class="line">                eth.dst = self.arp_table[self.net_getaway_ip][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">elif</span> pkt_ipv4.dst <span class="keyword">in</span> self.arp_table:</span><br><span class="line">                eth.dst = self.arp_table[pkt_ipv4.dst][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.stor(msg)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 修改port</span></span><br><span class="line">            pkt_tcp.src_port = self.tcp_out[(src_ip, pkt_tcp.src_port)]</span><br><span class="line">            <span class="comment"># 修改原ip</span></span><br><span class="line">            pkt_ipv4.src = self.nat_ip</span><br><span class="line">            self.logger.info(</span><br><span class="line">                <span class="string">&quot;send a TCP Packet to internet changed_ip is from &#123;&#125;:&#123;&#125; to &#123;&#125;:&#123;&#125; SNAT to &#123;&#125;:&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(src_ip, src_port, pkt_ipv4.dst,</span><br><span class="line">                                                                            pkt_tcp.dst_port, pkt_ipv4.src,pkt_tcp.src_port))</span><br><span class="line">            pkt_tcp.csum = <span class="number">0</span></span><br><span class="line">            pkt.serialize()</span><br><span class="line">            self.send_out(self.nat_switch, actions, pkt.data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> pkt_udp:</span><br><span class="line">            <span class="comment"># 找到icmp未有记录</span></span><br><span class="line">            src_port = copy.copy(pkt_udp.src_port)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pkt_ipv4.src, pkt_udp.src_port) <span class="keyword">not</span> <span class="keyword">in</span> self.udp_out:</span><br><span class="line">                <span class="comment"># 使得变换后icmp不冲突</span></span><br><span class="line">                <span class="keyword">while</span> src_port <span class="keyword">in</span> self.udp_in:</span><br><span class="line">                    src_port += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                self.udp_out[(pkt_ipv4.src, pkt_udp.src_port)] = src_port</span><br><span class="line">                self.udp_in[src_port] = (pkt_ipv4.src, pkt_udp.src_port)</span><br><span class="line"></span><br><span class="line">            src_ip = copy.copy(pkt_ipv4.src)</span><br><span class="line">            actions = [parser.OFPActionOutput(self.nat_switch_port)]</span><br><span class="line">            origin_mac = eth.dst</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 修改mac</span></span><br><span class="line">            <span class="keyword">if</span> self.net_getaway_ip <span class="keyword">in</span> self.arp_table <span class="keyword">and</span> <span class="keyword">not</span> (</span><br><span class="line">                    self.ipInSubnet(pkt_ipv4.dst, <span class="string">&quot;/&quot;</span>.join((self.nat_ip, self.nat_mask)))):</span><br><span class="line">                eth.dst = self.arp_table[self.net_getaway_ip][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">elif</span> pkt_ipv4.dst <span class="keyword">in</span> self.arp_table:</span><br><span class="line">                eth.dst = self.arp_table[pkt_ipv4.dst][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.stor(msg)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 修改id</span></span><br><span class="line">            pkt_udp.src_port = self.udp_out[(src_ip, pkt_udp.src_port)]</span><br><span class="line">            <span class="comment"># 修改原ip</span></span><br><span class="line">            pkt_ipv4.src = self.nat_ip</span><br><span class="line">            self.logger.info(</span><br><span class="line">                <span class="string">&quot;send to internet changed_ip is from &#123;&#125;:&#123;&#125; to &#123;&#125;:&#123;&#125; SNAT to &#123;&#125;:&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(src_ip, src_port, pkt_ipv4.dst,</span><br><span class="line">                                                                            pkt_udp.dst_port,self.nat_ip,pkt_udp.src_port))</span><br><span class="line">            pkt_udp.csum = <span class="number">0</span></span><br><span class="line">            pkt.serialize()</span><br><span class="line">            self.send_out(self.nat_switch, actions, pkt.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 找路</span></span><br><span class="line">        shortest_path = self.topo.Dijkstra(</span><br><span class="line">            datapath.<span class="built_in">id</span>, self.nat_switch_id, in_port, self.nat_switch_port</span><br><span class="line">        )                                                               <span class="built_in">len</span>(shortest_path)))</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(shortest_path) &gt; <span class="number">0</span></span><br><span class="line">        path_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> s, ip, op <span class="keyword">in</span> shortest_path:</span><br><span class="line">            path_str = path_str + <span class="string">&quot;--&#123;&#125;-&#123;&#125;-&#123;&#125;--&quot;</span>.<span class="built_in">format</span>(ip, s, op)</span><br><span class="line">        self.logger.info(<span class="string">&quot;Configure the shortset path from &#123;&#125; to &#123;&#125; —— &#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(src_ip, pkt_ipv4.dst, path_str))</span><br><span class="line">        self.configure_path(shortest_path, msg, origin_mac, eth.dst, pkt_ipv4.dst)</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 内网接收外网发送的报文做NAPT </summary>              <div class='content'>              <p>当我们判断一个报文其目的地址为外网，源地址也是外网的时候，他就可能是一个外网发往内网的报文，此时需要利用NAT_in函数进行处理，当他在映射表中有记录的时候，那么就进行处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">NAT_in</span>(<span class="params">self, msg</span>):</span><br><span class="line">       datapath = msg.datapath</span><br><span class="line">       in_port = msg.<span class="keyword">match</span>[<span class="string">&#x27;in_port&#x27;</span>]</span><br><span class="line">       pkt = packet.Packet(msg.data)</span><br><span class="line">       eth = pkt.get_protocols(ethernet.ethernet)[<span class="number">0</span>]</span><br><span class="line">       parser = self.nat_switch.dp.ofproto_parser</span><br><span class="line">       pkt_ipv4 = pkt.get_protocol(ipv4.ipv4)</span><br><span class="line">       pkt_udp = pkt.get_protocol(udp.udp)</span><br><span class="line">       pkt_tcp = pkt.get_protocol(tcp.tcp)</span><br><span class="line">       pkt_icmp = pkt.get_protocol(icmp.icmp)</span><br><span class="line">       <span class="keyword">if</span> pkt_icmp <span class="keyword">and</span> pkt_icmp.<span class="built_in">type</span> == icmp.ICMP_ECHO_REQUEST <span class="keyword">and</span> pkt_ipv4.dst==self.nat_ip:</span><br><span class="line">           icmp_reply = packet.Packet()</span><br><span class="line">           echo = pkt_icmp.data</span><br><span class="line">           echo.data = <span class="built_in">bytearray</span>(echo.data)</span><br><span class="line">           icmp_reply.add_protocol(ethernet.ethernet(</span><br><span class="line">               ethertype=ether.ETH_TYPE_IP,</span><br><span class="line">               dst=eth.src,</span><br><span class="line">               src=self.switch_adds[(self.nat_switch_id, self.nat_switch_port)]))</span><br><span class="line">           icmp_reply.add_protocol(ipv4.ipv4(version=<span class="number">4</span>, header_length=<span class="number">5</span>, tos=<span class="number">0</span>, total_length=<span class="number">84</span>,</span><br><span class="line">                      identification=<span class="number">0</span>, flags=<span class="number">0</span>, offset=<span class="number">0</span>, ttl=<span class="number">64</span>,</span><br><span class="line">                      proto=inet.IPPROTO_ICMP, csum=<span class="number">0</span>,</span><br><span class="line">                      src=self.nat_ip, dst=pkt_ipv4.src))</span><br><span class="line">           icmp_reply.add_protocol(icmp.icmp(icmp.ICMP_ECHO_REPLY, code=<span class="number">0</span>, csum=<span class="number">0</span>, data=echo))</span><br><span class="line">           icmp_reply.serialize()</span><br><span class="line">           actions = [parser.OFPActionOutput(in_port)]</span><br><span class="line">           out = parser.OFPPacketOut(</span><br><span class="line">               datapath=self.nat_switch.dp,</span><br><span class="line">               buffer_id=self.nat_switch.dp.ofproto.OFP_NO_BUFFER,</span><br><span class="line">               in_port=self.nat_switch.dp.ofproto.OFPP_CONTROLLER,</span><br><span class="line">               actions=actions, data=icmp_reply.data)</span><br><span class="line">           self.nat_switch.dp.send_msg(out)</span><br><span class="line">           <span class="keyword">return</span></span><br><span class="line">       <span class="comment"># icmp</span></span><br><span class="line">       <span class="keyword">elif</span> pkt_icmp <span class="keyword">and</span> pkt_icmp.<span class="built_in">type</span> == icmp.ICMP_ECHO_REPLY:</span><br><span class="line">           <span class="comment"># 找到icmp未有记录</span></span><br><span class="line">           <span class="keyword">if</span> pkt_icmp.data.<span class="built_in">id</span> <span class="keyword">in</span> self.icmp_in:</span><br><span class="line"></span><br><span class="line">               <span class="comment"># 来个icmp报文就便利寿命减一</span></span><br><span class="line">               self.ICMPTTLdes()</span><br><span class="line"></span><br><span class="line">               dst_ip = pkt_ipv4.dst</span><br><span class="line">               dst_id = pkt_icmp.data.<span class="built_in">id</span></span><br><span class="line">               pkt_ipv4.dst = self.icmp_in[pkt_icmp.data.<span class="built_in">id</span>][<span class="number">0</span>]</span><br><span class="line">               pkt_icmp.data.<span class="built_in">id</span> = self.icmp_in[pkt_icmp.data.<span class="built_in">id</span>][<span class="number">1</span>]</span><br><span class="line">               pkt_icmp.csum = <span class="number">0</span></span><br><span class="line">               <span class="comment"># print(&quot;Change origin dst IP to &#123;&#125;&quot;.format(pkt_ipv4.dst))</span></span><br><span class="line">               pkt.serialize()</span><br><span class="line">               msg.data = pkt.data</span><br><span class="line">               <span class="comment"># 找出在一个子网的有主机边缘交换机及mac</span></span><br><span class="line">               self.logger.info(</span><br><span class="line">                   <span class="string">&quot;Received a ICMP Packet to our network from internet &#123;&#125; to &#123;&#125; id:&#123;&#125; DNAT to &#123;&#125; id:&#123;&#125; \n&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                       pkt_ipv4.src,dst_ip,dst_id,pkt_ipv4.dst,pkt_icmp.data.<span class="built_in">id</span>))</span><br><span class="line">               <span class="keyword">if</span> self.find(pkt_ipv4.dst):</span><br><span class="line">                   dst_mac, dst_switch_id, final_port = self.arp_table[pkt_ipv4.dst]</span><br><span class="line">                   <span class="comment"># print(&quot;find switch &#123;&#125; port &#123;&#125; &quot;.format(dst_switch_id, final_port))</span></span><br><span class="line">                   eth.dst = dst_mac</span><br><span class="line">                   actions = [parser.OFPActionOutput(final_port)]</span><br><span class="line">                   dst_switch = copy.copy(get_switch(self, dst_switch_id))[<span class="number">0</span>]</span><br><span class="line">                   pkt.serialize()</span><br><span class="line">                   out = parser.OFPPacketOut(</span><br><span class="line">                       datapath=dst_switch.dp,</span><br><span class="line">                       buffer_id=dst_switch.dp.ofproto.OFP_NO_BUFFER,</span><br><span class="line">                       in_port=dst_switch.dp.ofproto.OFPP_CONTROLLER,</span><br><span class="line">                       actions=actions, data=pkt.data)</span><br><span class="line">                   dst_switch.dp.send_msg(out)</span><br><span class="line">               <span class="keyword">else</span>:</span><br><span class="line">                   self.stor(msg)</span><br><span class="line">           <span class="keyword">return</span></span><br><span class="line">       <span class="comment"># tcp</span></span><br><span class="line">       <span class="keyword">elif</span> pkt_tcp:</span><br><span class="line">           <span class="comment"># 找到tcpp未有记录</span></span><br><span class="line">           <span class="keyword">if</span> pkt_tcp.dst_port <span class="keyword">in</span> self.tcp_in:</span><br><span class="line">               <span class="comment"># self.logger.info(</span></span><br><span class="line">               <span class="comment">#     &quot;----------------Received a packet to our network from internet2 , src_ip: &#123;&#125;   -----------------------------&quot;.format(</span></span><br><span class="line">               <span class="comment">#         pkt_ipv4.src))</span></span><br><span class="line">               dst_ip = pkt_ipv4.dst</span><br><span class="line">               dst_port = pkt_tcp.dst_port</span><br><span class="line">               pkt_ipv4.dst = self.tcp_in[pkt_tcp.dst_port][<span class="number">0</span>]</span><br><span class="line">               pkt_tcp.dst_port = self.tcp_in[pkt_tcp.dst_port][<span class="number">1</span>]</span><br><span class="line">               pkt_tcp.csum = <span class="number">0</span></span><br><span class="line">               <span class="comment"># print(&quot;Change origin dst IP to &#123;&#125;&quot;.format(pkt_ipv4.dst))</span></span><br><span class="line">               pkt.serialize()</span><br><span class="line">               msg.data = pkt.data</span><br><span class="line">               self.logger.info(</span><br><span class="line">                   <span class="string">&quot;Received a TCP Packet to our network from internet &#123;&#125;:&#123;&#125; to &#123;&#125;:&#123;&#125; DNAT to &#123;&#125;:&#123;&#125; \n&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                       pkt_ipv4.src,pkt_tcp.src_port,dst_ip,dst_port,pkt_ipv4.dst,pkt_tcp.dst_port))</span><br><span class="line">               <span class="comment"># 找出在一个子网的有主机边缘交换机及mac</span></span><br><span class="line">               <span class="keyword">if</span> self.find(pkt_ipv4.dst):</span><br><span class="line">                   <span class="comment"># print(self.arp_table)</span></span><br><span class="line">                   dst_mac, dst_switch_id, final_port = self.arp_table[pkt_ipv4.dst]</span><br><span class="line">                   <span class="comment"># print(&quot;find switch &#123;&#125; port &#123;&#125; &quot;.format(dst_switch_id, final_port))</span></span><br><span class="line">                   eth.dst = dst_mac</span><br><span class="line">                   <span class="comment"># print(eth.dst)</span></span><br><span class="line">                   actions = [parser.OFPActionOutput(final_port)]</span><br><span class="line">                   pkt.serialize()</span><br><span class="line"></span><br><span class="line">                   dst_switch = copy.copy(get_switch(self, dst_switch_id))[<span class="number">0</span>]</span><br><span class="line">                   out = parser.OFPPacketOut(</span><br><span class="line">                       datapath=dst_switch.dp,</span><br><span class="line">                       buffer_id=dst_switch.dp.ofproto.OFP_NO_BUFFER,</span><br><span class="line">                       in_port=dst_switch.dp.ofproto.OFPP_CONTROLLER,</span><br><span class="line">                       actions=actions, data=pkt.data)</span><br><span class="line">                   dst_switch.dp.send_msg(out)</span><br><span class="line">               <span class="keyword">else</span>:</span><br><span class="line">                   self.stor(msg)</span><br><span class="line">                   <span class="keyword">return</span></span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               <span class="keyword">return</span></span><br><span class="line">       <span class="comment"># udp</span></span><br><span class="line">       <span class="keyword">elif</span> pkt_udp:</span><br><span class="line">           <span class="comment"># 找到udp未有记录</span></span><br><span class="line">           <span class="keyword">if</span> pkt_udp.dst_port <span class="keyword">in</span> self.udp_in:</span><br><span class="line">               dst_ip = pkt_ipv4.dst</span><br><span class="line">               dst_port = pkt_udp.dst_port</span><br><span class="line">               pkt_ipv4.dst = self.udp_in[pkt_udp.dst_port][<span class="number">0</span>]</span><br><span class="line">               pkt_udp.dst_port = self.udp_in[pkt_udp.dst_port][<span class="number">1</span>]</span><br><span class="line">               pkt_udp.csum = <span class="number">0</span></span><br><span class="line">               pkt.serialize()</span><br><span class="line">               msg.data = pkt.data</span><br><span class="line">               <span class="comment"># 找出在一个子网的有主机边缘交换机及mac</span></span><br><span class="line">               self.logger.info(</span><br><span class="line">                   <span class="string">&quot;Received a UDP Packet to our network from internet &#123;&#125;:&#123;&#125; to &#123;&#125;:&#123;&#125;  DNAT to &#123;&#125;:&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                       pkt_ipv4.src,pkt_udp.src_port,dst_ip,dst_port,pkt_ipv4.dst,pkt_udp.dst_port))</span><br><span class="line">               <span class="keyword">if</span> self.find(pkt_ipv4.dst):</span><br><span class="line">                   dst_mac, dst_switch_id, final_port = self.arp_table[pkt_ipv4.dst]</span><br><span class="line">                   eth.dst = dst_mac</span><br><span class="line">                   actions = [parser.OFPActionOutput(final_port)]</span><br><span class="line">                   dst_switch = copy.copy(get_switch(self, dst_switch_id))[<span class="number">0</span>]</span><br><span class="line">                   pkt.serialize()</span><br><span class="line">                   out = parser.OFPPacketOut(</span><br><span class="line">                       datapath=dst_switch.dp,</span><br><span class="line">                       buffer_id=dst_switch.dp.ofproto.OFP_NO_BUFFER,</span><br><span class="line">                       in_port=dst_switch.dp.ofproto.OFPP_CONTROLLER,</span><br><span class="line">                       actions=actions, data=pkt.data)</span><br><span class="line">                   dst_switch.dp.send_msg(out)</span><br><span class="line">               <span class="keyword">else</span>:</span><br><span class="line">                   self.stor(msg)</span><br><span class="line">                   <span class="keyword">return</span></span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               <span class="keyword">return</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           <span class="keyword">return</span></span><br><span class="line">           <span class="comment"># 找路</span></span><br><span class="line">       shortest_path = self.topo.Dijkstra(</span><br><span class="line">           datapath.<span class="built_in">id</span>, dst_switch.dp.<span class="built_in">id</span>, in_port, final_port</span><br><span class="line">       )</span><br><span class="line">       <span class="keyword">assert</span> <span class="built_in">len</span>(shortest_path) &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">       path_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment"># (s1,inport,outport)-&gt;(s2,inport,outport)-&gt;...-&gt;(dest_switch,inport,outport)</span></span><br><span class="line">       <span class="keyword">for</span> s, ip, op <span class="keyword">in</span> shortest_path:</span><br><span class="line">           path_str = path_str + <span class="string">&quot;--&#123;&#125;-&#123;&#125;-&#123;&#125;--&quot;</span>.<span class="built_in">format</span>(ip, s, op)</span><br><span class="line">       self.logger.info(<span class="string">&quot;Configure the shortset path from &#123;&#125; to &#123;&#125; —— &#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(pkt_ipv4.src, pkt_ipv4.dst, path_str))</span><br><span class="line"></span><br><span class="line">       self.configure_path(shortest_path, msg, <span class="literal">None</span>, eth.dst, self.nat_ip)</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>（二）结果分析</p><ul><li><p>ICMP</p><p>我们分别用h1与h2去ping www.baidu.com可以发现都能够成功ping通。此时查看抓包结果发现两次ping源IP是相同的，均是192.168.31.89。</p><p><img src="https://image.asa-world.cn/pic/image-20230718115335870.png" alt="抓包"></p><p>不同的地方在于两者的identifier。</p><p><img src="https://image.asa-world.cn/pic/image-20230718115413536.png" alt="二者具体报文"></p><p>说明可以用不同的标识进行区分而用同一个ip实现对外网（baidu）的访问。</p></li><li><p>TCP与UDP</p><p>这里我们使用h1打开Google，通过Google访问4399小游戏网站，可以发现我们能对该网站进行正常的访问与操作。</p><p><img src="https://image.asa-world.cn/pic/image-20230718115701784.png" alt="网站访问"></p><p>查看流表可以发现s7作为NAPT访问的一个节点，将源ip与端口转化为对应的NAPT的ip与端口的报文来通过下发流表的方式实现NAPT。</p><p><img src="https://image.asa-world.cn/pic/image-20230718120403787.png" alt="流表"></p><p>同时从抓包分析中也可以看到，从192.168.31.89返回的不同包中端口是不同的，也可以证明我们tcp和udp的NAPT操作正确。</p><p><img src="https://image.asa-world.cn/pic/image-20230718120431947.png" alt="抓包分析"></p></li></ul><h2 id="防火墙实现与分析">防火墙实现与分析</h2><p>（一）实现</p><details class="folding-tag" blue><summary> 防火墙指令 </summary>              <div class='content'>              <p>在mininet的拓扑环境搭建完毕后，建立一个新的xterm来操作专用于防火墙的controller。</p><p><code>xterm c0</code></p><p>然后在switch的xterm上将OpenFlow版本设定为1.3。</p><p><code>ovs-vsctl set Bridge s1 protocols=OpenFlow13</code></p><p>最后在controller的xterm上启动rest_firewall。</p><p><code>ryu-manager ryu.app.rest_firewall</code></p><p>防火墙启动后默认为全部网络无法连接的状态，我们首先使防火墙生效。</p><p><code>curl -X PUT http://localhost:8080/firewall/module/enable/0000000000000009</code></p><p>启动完毕后对防火墙的规则进行设定：</p><p><code>curl -X POST -d'{&quot;nw_src&quot;:&quot;192.168.4.0/24&quot;}' http://0.0.0.0:8080/firewall/rules/0000000000000009</code></p><p>//允许所有源IP为<code>192.168.4.0</code>的报文通过</p><p><code>curl -X POST -d '{&quot;nw_dst&quot;: &quot;192.168.4.200/32&quot;, &quot;tcp_dst&quot;:&quot;8O&quot;}' http://0.0.0.0:8080/firewall/rules/0000000000000009</code></p><p><code>curl -X POST -d '{&quot;nw_dst&quot;: &quot;192.168.4.210/32&quot;, &quot;tcp_dst&quot;:&quot;8O&quot;}' http://0.0.0.0:8080/firewall/rules/0000000000000009</code></p><p>//允许所有目的IP为Web服务器，目的端口为80的报文通过</p><p><code>curl -X POST -d '{&quot;nw_proto&quot;: &quot;ICMP&quot;, &quot;actions&quot;: &quot;DENY&quot;, &quot;priority&quot;: &quot;2&quot;}' http://0.0.0.0:8080/firewall/rules/0000000000000009</code></p><p>//禁止ICMP报文通过对服务器造成负担</p><p><code>curl -X POST -d '{&quot;nw_src&quot;: &quot;192.168,1.0/24&quot;,&quot;nw_dst&quot;:&quot;192.168.4.5/32&quot;}’ http://0.0.0.0:8080/firewall/rules/0000000000000009</code></p><p><code>curl -X POST -d '{&quot;nw_src&quot;: &quot;192.168,2.0/24&quot;,&quot;nw_dst&quot;:&quot;192.168.4.5/32&quot;}’ http://0.0.0.0:8080/firewall/rules/0000000000000009</code></p><p><code>curl -X POST -d '{&quot;nw_src&quot;: &quot;192.168,6.0/24&quot;,&quot;nw_dst&quot;:&quot;192.168.4.5/32&quot;}’ http://0.0,0.0:8080/firewall/rules/0000000000000009</code></p><p>//只允许部分内部网络访问FTP服务器 访客网络禁止访问FTP服务器</p>              </div>            </details><p>（二）结果分析</p><ul><li><p>启动前</p><p>在防火墙启动之前h1可以正常ping通web服务器和ftp服务器。</p><p><img src="https://image.asa-world.cn/pic/image-20230718120616963.png" alt="ping通展示"></p></li><li><p>启动后</p><p>由于我们的防火墙是基于流表项的防火墙，因此通过查看流表项可以发现s11（防火墙）已经存在我们添加的规则流表项。</p><p><img src="https://image.asa-world.cn/pic/image-20230718120737067.png" alt="流表项"></p></li><li><p>内网测试</p><p>此时h1再次ping web服务器与ftp服务器，发现无法ping通。这是因为我们设置了禁止转发icmp报文所致。</p><p><img src="https://image.asa-world.cn/pic/image-20230718120829951.png" alt="ping不通展示"></p><p>再通过h1去访问web服务器与ftp服务器发现可以正常访问。</p><p><img src="https://image.asa-world.cn/pic/image-20230718120924574.png" alt="正常访问服务器应用"></p></li><li><p>外网测试</p><p>然后打开h9（访客网络）的终端对ftp服务器进行访问，发现访问正常。</p><p><img src="https://image.asa-world.cn/pic/image-20230718121016966.png" alt="正常访问FTP服务器"></p><p>再用h9访问ftp服务器发现无法访问，因此可以证明我们的防火墙功能正常。</p><p><img src="https://image.asa-world.cn/pic/image-20230718121105021.png" alt="已无法访问FTP服务器"></p></li></ul><h2 id="DHCP中继实现与分析">DHCP中继实现与分析</h2><p>（一）实现</p><details class="folding-tag" blue><summary> DHCP相关配置 </summary>              <div class='content'>              <p>在DHCP服务器的搭建中，我们先在Ubuntu中安装DHCP Server，即执行指令pip install dhcp。在安装完成并检测安装成功后，紧接着我们在etc/dhcp/dhcpd.conf文件中进行DHCP服务的相关配置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">subnet <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span> netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> &#123;</span><br><span class="line">   <span class="built_in">range</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span>  <span class="number">192.168</span><span class="number">.1</span><span class="number">.253</span>;</span><br><span class="line">   option routers <span class="number">192.168</span><span class="number">.1</span><span class="number">.254</span>;</span><br><span class="line">   default-lease-time <span class="number">6000</span>;</span><br><span class="line">   <span class="built_in">max</span>-lease-time <span class="number">72000</span>;</span><br><span class="line">   INTERFACES = <span class="string">&quot;dhcp-eth1 dhcp-eth2&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">// <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span>网络的地址池，范围为<span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span>-<span class="number">192.168</span><span class="number">.1</span><span class="number">.253</span>，网关为<span class="number">192.168</span><span class="number">.1</span><span class="number">.254</span>，默认地址释放时间为6000s，最大释放时间为720000s，绑定接口为dhcp-eth1和dhcp-eth2。</span><br><span class="line"></span><br><span class="line">subnet <span class="number">192.168</span><span class="number">.2</span><span class="number">.0</span> netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> &#123;</span><br><span class="line">   <span class="built_in">range</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.2</span>  <span class="number">192.168</span><span class="number">.2</span><span class="number">.253</span>;</span><br><span class="line">   option routers <span class="number">192.168</span><span class="number">.2</span><span class="number">.254</span>;</span><br><span class="line">   default-lease-time <span class="number">6000</span>;</span><br><span class="line">   <span class="built_in">max</span>-lease-time <span class="number">72000</span>;</span><br><span class="line">   INTERFACES = <span class="string">&quot;dhcp-eth1 dhcp-eth2&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">// <span class="number">192.168</span><span class="number">.2</span><span class="number">.0</span>/<span class="number">24</span>网络的地址池，范围为<span class="number">192.168</span><span class="number">.2</span><span class="number">.2</span>-<span class="number">192.168</span><span class="number">.2</span><span class="number">.253</span>，网关为<span class="number">192.168</span><span class="number">.2</span><span class="number">.254</span>，默认地址释放时间为6000s，最大释放时间为720000s，绑定接口为dhcp-eth1和dhcp-eth2。</span><br><span class="line"></span><br><span class="line">subnet <span class="number">192.168</span><span class="number">.3</span><span class="number">.0</span> netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> &#123;</span><br><span class="line">   <span class="built_in">range</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.2</span>  <span class="number">192.168</span><span class="number">.3</span><span class="number">.253</span>;</span><br><span class="line">   option routers <span class="number">192.168</span><span class="number">.3</span><span class="number">.254</span>;</span><br><span class="line">   default-lease-time <span class="number">6000</span>;</span><br><span class="line">   <span class="built_in">max</span>-lease-time <span class="number">72000</span>;</span><br><span class="line">   INTERFACES = <span class="string">&quot;dhcp-eth1 dhcp-eth2&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">// <span class="number">192.168</span><span class="number">.3</span><span class="number">.0</span>/<span class="number">24</span>网络的地址池，范围为<span class="number">192.168</span><span class="number">.3</span><span class="number">.2</span>-<span class="number">192.168</span><span class="number">.3</span><span class="number">.253</span>，网关为<span class="number">192.168</span><span class="number">.3</span><span class="number">.254</span>，默认地址释放时间为6000s，最大释放时间为720000s，绑定接口为dhcp-eth1和dhcp-eth2。</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> Mininet拓扑连接 </summary>              <div class='content'>              <p><img src="https://image.asa-world.cn/pic/image-20230717224437206.png" alt="主干网拓扑图"></p><p>如主干网拓扑图所示，我们将s8 dhcp作为网络中DHCP服务器，并将该交换机的dhcp-eth1端口与s4交换机相连，设置该端口IP为192.168.0.1；dhcp-eth2端口与s5交换机相连，设置该端口IP为192.168.0.2，以此作为冗余链路，负载均衡的同时保障网络的健壮性。其次我们将拓扑中的s1、s2、s3交换机指定为DHCP中继代理交换机，将s1-eth1端口与二层交换机s8相连，设置该端口IP为192.168.1.254；将s1-eth1端口与二层交换机s9相连，设置该端口IP为192.168.2.254；将s3-eth1端口与二层交换机s10相连，设置该端口IP为192.168.3.254。</p>              </div>            </details><details class="folding-tag" blue><summary> 相关信息的导入RYU </summary>              <div class='content'>              <p>通过文件配置读取的形式向控制器导入DHCP的相关信息。</p><p><img src="https://image.asa-world.cn/pic/image-20230717224516873.png" alt="文本配置中DHCP相关信息"></p><p>编写代码实现文本配置的读取并初始化控制器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取DHCP IP地址</span></span><br><span class="line">self.dhcp_ip = content[<span class="number">6</span>].replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;=&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------DHCP_IP:  &#123;&#125;---------------------&quot;</span>.<span class="built_in">format</span>(self.dhcp_ip))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取DHCP switch 相关信息</span></span><br><span class="line">self.dhcp_switch = <span class="built_in">int</span>(content[<span class="number">7</span>].replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;=&#x27;</span>)[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------DHCP_Switch:  &#123;&#125;---------------------&quot;</span>.<span class="built_in">format</span>(self.dhcp_switch))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取DHCP 中继相关信息</span></span><br><span class="line">dhcp_relay_str = content[<span class="number">8</span>].replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;=&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dhcp_relay_str.split(<span class="string">&#x27;;&#x27;</span>):</span><br><span class="line">    self.dhcp_relay.append((<span class="built_in">int</span>(item.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>]), <span class="built_in">int</span>(item.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>]), item.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------DHCP_Relay:  &#123;&#125;---------------------&quot;</span>.<span class="built_in">format</span>(self.dhcp_relay))</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> RYU报文的获取及初步处理 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取报文DHCP协议信息</span></span><br><span class="line">pkt_dhcp = pkt.get_protocol(dhcp.dhcp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否为DHCP报文</span></span><br><span class="line"><span class="keyword">if</span> pkt_dhcp:</span><br><span class="line">    <span class="comment"># 判断上发该报文交换机ID是否为DHCP服务器 若是则丢弃 不是则进行DHCP中继处理</span></span><br><span class="line">    <span class="keyword">if</span> dpid != self.dhcp_switch:</span><br><span class="line">        self.dhcp_relay_handler(msg)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> RYU对DHCP报文解析 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取上发该报文的交换机ID和端口号</span></span><br><span class="line">dpid = msg.datapath.<span class="built_in">id</span></span><br><span class="line">in_port = msg.<span class="keyword">match</span>[<span class="string">&#x27;in_port&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 报文解析</span></span><br><span class="line">pkt = packet.Packet(msg.data)</span><br><span class="line">pkt_dhcp = pkt.get_protocol(dhcp.dhcp)</span><br><span class="line">eth = pkt.get_protocols(ethernet.ethernet)[<span class="number">0</span>]</span><br><span class="line">pkt_ipv4 = pkt.get_protocol(ipv4.ipv4)</span><br><span class="line">pkt_udp = pkt.get_protocol(udp.udp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出上发该报文交换机对应的DHCP中继服务信息 若找到 记录网关IP地址及端口</span></span><br><span class="line"><span class="keyword">for</span> s, p, g <span class="keyword">in</span> self.dhcp_relay:</span><br><span class="line">    <span class="keyword">if</span> dpid == s:</span><br><span class="line">        gateway = g</span><br><span class="line">        link_port = p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历报文DHCP协议中options字段 找出并记录该报文对应的DHCP类型</span></span><br><span class="line"><span class="keyword">for</span> option <span class="keyword">in</span> pkt_dhcp.options:</span><br><span class="line">    <span class="keyword">if</span> option.tag == dhcp.DHCP_MESSAGE_TYPE_OPT:</span><br><span class="line">        dhcp_type = <span class="built_in">int</span>(<span class="built_in">str</span>(binascii.hexlify(option.value))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出相关信息</span></span><br><span class="line">self.logger.info(</span><br><span class="line">    <span class="string">&quot;Received a DHCP packet in dhcp-relay switch:&#123;&#125; port:&#123;&#125;  type:&#123;&#125;&quot;</span></span><br><span class="line">    <span class="string">&quot;\n&quot;</span>.<span class="built_in">format</span>(dpid, in_port, dhcp_type))</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> DHCP Discover 报文和DHCP Request报文的处理 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断DHCP报文类型是否为DISCOVER和REQUEST及保证报文接收端口正确</span></span><br><span class="line"><span class="keyword">if</span> (dhcp_type == dhcp.DHCP_DISCOVER <span class="keyword">or</span> dhcp_type == dhcp.DHCP_REQUEST) <span class="keyword">and</span> in_port == link_port:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(self.dhcp_link_stats) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 随机选择一条与DHCP服务器连接的链路 并记录对应信息</span></span><br><span class="line">        index = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(self.dhcp_link_stats) - <span class="number">1</span>)</span><br><span class="line">        send_switch = self.dhcp_link_stats[index][<span class="number">1</span>]</span><br><span class="line">        send_port = self.dhcp_link_stats[index][<span class="number">3</span>]</span><br><span class="line">        eth.dst = self.switch_adds[(self.dhcp_switch, self.dhcp_link_stats[index][<span class="number">2</span>])]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断源IP地址和目的IP地址 用于区分IP地址分配过程、更新过程、释放过程</span></span><br><span class="line">        <span class="keyword">if</span> pkt_ipv4.src == <span class="string">&quot;0.0.0.0&quot;</span> <span class="keyword">and</span> pkt_ipv4.dst == <span class="string">&quot;255.255.255.255&quot;</span>:</span><br><span class="line">            <span class="comment"># 修改相应信息</span></span><br><span class="line">            pkt_dhcp.hops += <span class="number">1</span></span><br><span class="line">            pkt_dhcp.giaddr = gateway</span><br><span class="line">            pkt_ipv4.src = gateway</span><br><span class="line">            pkt_ipv4.dst = self.dhcp_ip[<span class="built_in">int</span>(self.dhcp_link_stats[index][<span class="number">2</span>]) - <span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 序列化修改后的报文并重新添加Padding</span></span><br><span class="line">        pkt_udp.csum = <span class="number">0</span></span><br><span class="line">        pkt.serialize()</span><br><span class="line">        msg.data = pkt.data + self.addPadding(<span class="built_in">len</span>(msg.data) - <span class="built_in">len</span>(pkt.data))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断hops字段是否小于等于16</span></span><br><span class="line">        <span class="keyword">if</span> pkt_dhcp.hops &lt;= <span class="number">16</span>:</span><br><span class="line">            <span class="comment"># 将报文从特定交换机的指定端口发送并输出信息</span></span><br><span class="line">            actions = [get_switch(self, send_switch)[<span class="number">0</span>].dp.ofproto_parser.OFPActionOutput(send_port)]</span><br><span class="line">            self.send_out(get_switch(self, send_switch)[<span class="number">0</span>], actions, msg.data)</span><br><span class="line">            self.logger.info(<span class="string">&quot;Send out a DHCP packet in dhcp-relay switch:&#123;&#125;  port:&#123;&#125;  type:&#123;&#125; \n&quot;</span>.<span class="built_in">format</span>(send_switch, send_port, dhcp_type))</span><br><span class="line"><span class="number">5.</span> DHCP Offer 报文和DHCP Ack报文的处理</span><br><span class="line"><span class="comment"># 判断DHCP报文类型是否为OFFER和ACK</span></span><br><span class="line"><span class="keyword">elif</span> dhcp_type == dhcp.DHCP_OFFER <span class="keyword">or</span> dhcp_type == dhcp.DHCP_ACK:</span><br><span class="line"><span class="comment"># 找出对应的中继交换机相关信息</span></span><br><span class="line"><span class="keyword">for</span> s, p, g <span class="keyword">in</span> self.dhcp_relay:</span><br><span class="line">    <span class="keyword">if</span> pkt_dhcp.giaddr == g:</span><br><span class="line">        send_switch = s</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断DHCP协议的flags字段是否为广播报文</span></span><br><span class="line">        <span class="keyword">if</span> pkt_dhcp.flags == <span class="number">0</span>:</span><br><span class="line">            eth.dst = pkt_dhcp.chaddr</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            eth.dst = <span class="string">&quot;ff:ff:ff:ff:ff:ff&quot;</span></span><br><span class="line">        <span class="comment"># 判断DHCP协议的yiaddr字段与目的IP地址是否相等 用于区分IP地址分配过程、更新过程、释放过程</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pkt_dhcp.yiaddr != pkt_ipv4.dst:</span><br><span class="line">            pkt_ipv4.src = pkt_dhcp.giaddr</span><br><span class="line">            pkt_ipv4.dst = pkt_dhcp.yiaddr</span><br><span class="line">        <span class="comment"># 修改目的端口正确 </span></span><br><span class="line">        pkt_udp.dst_port = <span class="number">68</span></span><br><span class="line">        <span class="comment"># 序列化修改后的报文并重新添加Padding</span></span><br><span class="line">        pkt_udp.csum = <span class="number">0</span></span><br><span class="line">        pkt.serialize()</span><br><span class="line">        msg.data = pkt.data + self.addPadding(<span class="built_in">len</span>(msg.data) - <span class="built_in">len</span>(pkt.data))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将报文从特定交换机的指定端口发送并输出信息</span></span><br><span class="line">        actions = [get_switch(self, send_switch)[<span class="number">0</span>].dp.ofproto_parser.OFPActionOutput(p)]</span><br><span class="line">        self.send_out(get_switch(self, send_switch)[<span class="number">0</span>], actions, msg.data)</span><br><span class="line">        self.logger.info(<span class="string">&quot;Send out a DHCP packet in dhcp-relay switch:&#123;&#125;  port:&#123;&#125;  type:&#123;&#125; \n&quot;</span>.<span class="built_in">format</span>(send_switch, p, dhcp_type))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><p>（二）结果分析</p><ul><li><p>DHCP服务请求</p><p>对h1进行DHCP服务的请求，并查看h1的IP地址。如下图，h1成功分配到IP地址192.168.1.3。</p><p><img src="https://image.asa-world.cn/pic/image-20230718121350045.png" alt="查看h1的IP地址"></p></li><li><p>抓包分析</p><p>在h1进行DHCP服务请求的过程中，分别对h1-eth1、dhcp-eth1和dhcp-eth2三个端口进行抓包。</p><p>首先，如下图，在dhcp-eth2端口接收到了DHCP Discover报文，在dhcp-eth1端口接收到了DHCP Offer、DHCP Request和DHCP ACK报文，说明实现了DHCP服务器的负载均担。</p><p><img src="https://image.asa-world.cn/pic/image-20230718121514452.png" alt="报文分析"></p><p>如下图，在h1的Discover报文中，可以看到中继服务器的IP地址被标识为0.0.0.0，而经过控制器的修改，发送到DHCP服务器的中继服务器的IP地址被修改为192.168.1.254。</p><p><img src="https://image.asa-world.cn/pic/image-20230718121547743.png" alt="报文分析"></p><p>如下图，在DHCP服务器发送的Offer报文中，源IP地址是192.168.0.1，目的IP地址是192.168.1.254。经过控制器的修改后，h1收到的Offer报文中源IP地址被成功修改为中继交换机的IP，即192.168.1.254，目的IP地址被修改为分配给h1的IP地址，即192.168.1.3。</p><p><img src="https://image.asa-world.cn/pic/image-20230718121618956.png" alt="报文分析"></p><p>后续的Request报文和ACK报文也由控制器进行相应的修改，与上述两个报文类似。</p></li><li><p>连通性验证</p><p>对h1进行DHCP请求后，再次对不同子网下的h5进行同样的DHCP请求操作，成功获取IP地址后，测试h1和h5的连通性，如下图，可以发现能够成功ping通。</p><p><img src="https://image.asa-world.cn/pic/image-20230718121702956.png" alt="ping通展示"></p></li></ul><h2 id="服务器实现与分析">服务器实现与分析</h2><p>（一）实现</p><p>在主干网的服务器集群中，我们需要对三种服务器进行配置，即反向代理服务器、Web服务器、FTP服务器。其中反向代理服务器拥有两张网卡分别与Mininet拓扑和Web服务器集群连接，我们将两台反向代理服务器与Mininet拓扑连接的网卡IP地址配置为192.168.4.1、192.168.4.2，将其与Web服务器集群连接的网卡IP配置为172.168.1.3、172.168.1.4；Web服务器和FTP服务器都只拥有一张网卡，将两台Web服务器IP配置为172.168.1.1、172.168.1.2，FTP服务器IP配置为192.168.4.5。下面对各种服务器进行单独的配置说明。</p><details class="folding-tag" blue><summary> 反向代理服务器配置 </summary>              <div class='content'>              <p>在反向代理服务器中，我们基于nginx的代理机制实现对Web服务器集群的反向代理，成功安装nginx后，修改/etc/nginx/conf.d/default.conf文件配置如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 配置Web服务器地址池</span><br><span class="line">upstream phpserver1 &#123;</span><br><span class="line">    server <span class="number">172.168</span><span class="number">.1</span><span class="number">.1</span>:<span class="number">80</span>;</span><br><span class="line">    server <span class="number">172.168</span><span class="number">.1</span><span class="number">.2</span>:<span class="number">80</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 配置反向代理服务器映射方法（其中<span class="number">200</span>和<span class="number">210</span>为虚拟IP在VRRP部分会进一步介绍）</span><br><span class="line">server &#123;</span><br><span class="line">        listen       <span class="number">80</span>;</span><br><span class="line">        server_name  <span class="number">192.168</span><span class="number">.4</span><span class="number">.200</span>;</span><br><span class="line">        server_name  <span class="number">192.168</span><span class="number">.4</span><span class="number">.210</span>;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass   http://phpserver1;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> Web服务器配置 </summary>              <div class='content'>              <p>在Web服务器中，我们同样是基于nginx的代理机制实现对Web服务，成功安装nginx后，修改/etc/nginx/conf.d/default.conf文件配置如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 配置Web服务器端口和文件位置</span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> FTP服务器配置 </summary>              <div class='content'>              <p>在FTP服务器中，我们基于开源软件vsftpd实现FTP服务，成功安装vsftpd后，修改/etc/vsftpd/vsftpd.conf文件配置如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否开启匿名用户，匿名都不安全，默认NO</span></span><br><span class="line">anonymous_enable=NO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许本机账号登录FTP</span></span><br><span class="line">local_enable=YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许账号都有写操作</span></span><br><span class="line">write_enable=YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地用户创建文件或目录的掩码</span></span><br><span class="line">local_umask=022</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入某个目录的时候，是否在客户端提示一下</span></span><br><span class="line">dirmessage_enable=YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当设定为YES时，使用者上传与下载日志都会被记录起来</span></span><br><span class="line">xferlog_enable=YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志成为std格式</span></span><br><span class="line">xferlog_std_format=YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传与下载日志存放路径</span></span><br><span class="line">xferlog_file=/var/log/xferlog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开放port模式的20端口的连接</span></span><br><span class="line">connect_from_port_20=YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与上一个设定类似的，只是这个设定针对上传而言，预设是NO</span></span><br><span class="line">ascii_upload_enable=NO</span><br><span class="line">ascii_download_enable=NO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制用户只能在自己的目录活动</span></span><br><span class="line">chroot_local_user=YES</span><br><span class="line">chroot_list_enable=NO</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听ipv4端口，开了这个就说明vsftpd可以独立运行，不用依赖其他服务</span></span><br><span class="line">listen=NO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听ipv6端口</span></span><br><span class="line">listen_ipv6=YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开主动模式</span></span><br><span class="line">port_enable=YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动被动式联机(passivemode)</span></span><br><span class="line">pasv_enable=YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被动模式起始端口，0为随机分配</span></span><br><span class="line">pasv_min_port=<span class="number">64000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 被动模式结束端口，0为随机分配</span></span><br><span class="line">pasv_max_port=<span class="number">65000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个是pam模块的名称，我们放置在/etc/pam.d/vsftpd，认证用</span></span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用允许登录的名单，在/etc/vsftpd/user_list文件中添加新建的用户ftpuser</span></span><br><span class="line">userlist_enable=YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制允许登录的名单，前提是userlist_enable=YES，其实这里有点怪,禁止访问名单在/etc/vsftpd/ftpusers</span></span><br><span class="line">userlist_deny=NO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许限制在自己的目录活动的用户拥有写权限</span></span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># FTP访问目录</span></span><br><span class="line">local_root=/data/ftp/ftpuser</span><br><span class="line">pasv_promiscuous=YES</span><br></pre></td></tr></table></figure>              </div>            </details><p>（二）结果分析</p><ul><li><p>Web服务器与负载分担</p><p>此处我们采用了负载均担技术，即可以将外部的Web请求映射到两台相同的Web服务器上。</p><p>两台Web服务器的IP地址分别为172.168.1.1和172.168.1.2，如下图。</p><p><img src="https://image.asa-world.cn/pic/image-20230718122419748.png" alt="IP展示"></p><p>在h1的浏览器中访问192.168.4.200，可以看到负载会被分担到两台Web服务器上，如下图。在正常情况下，访问时会出现相同的页面，这里为了区分设置了两种不同的页面来代表访问不同的Web服务器。</p><p><img src="https://image.asa-world.cn/pic/image-20230718122446011.png" alt="web页面"></p></li><li><p>FTP服务器</p><p>我们FTP服务器的IP地址为192.168.4.5。首先登录FTP服务器，查看目录，找到相应需要接收的文件1.txt。</p><p><img src="https://image.asa-world.cn/pic/image-20230718122803636.png" alt="进入目录"></p><p>在命令行中接收该文件，并在文件夹中查看，可以看到文件被准确无误地从FTP服务器上接收。</p><p><img src="https://image.asa-world.cn/pic/image-20230718122859276.png" alt="FTP文件接收"></p><p><img src="https://image.asa-world.cn/pic/image-20230718122926796.png" alt="打开文件"></p></li></ul><h2 id="VRRP高可用实现与分析">VRRP高可用实现与分析</h2><p>（一）实现</p><details class="folding-tag" blue><summary> 反向代理服务器之间的高可用配置 </summary>              <div class='content'>              <p>在反向代理服务器中，我们基于开源软件Keepalived实现了反向代理服务器之间基于VRRP协议的高可用配置，在成功安装Keepalived软件后，修改/etc/keepalived/keepalived.conf文件进行配置。</p><p>前面提到我们有两台反向代理服务器，且与Mininet拓扑连接的网卡IP配置分别为192.168.4.1和192.168.4.2，我们指定前一台反向代理服务器为router_id Nginx_01、后一台为router_id Nginx_02。在此时的高可用配置中，我们使用双主配置的方式，创建两个虚拟IP 192.168.4.200和192.168.4.210，且配置router_id Nginx_01为192.168.4.200的主服务器（即优先级更高），router_id Nginx_02为192.168.4.210的主服务器，各自配置文件如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;               </span><br><span class="line">   router_id Nginx_01</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">script <span class="string">&quot;/etc/keepalived/check_nginx.sh&quot;</span></span><br><span class="line">interval <span class="number">2</span></span><br><span class="line">    weight -<span class="number">5</span></span><br><span class="line">    fall <span class="number">3</span></span><br><span class="line">    rise <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens32</span><br><span class="line">    virtual_router_id <span class="number">51</span></span><br><span class="line">    priority <span class="number">150</span></span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">     <span class="number">192.168</span><span class="number">.4</span><span class="number">.200</span></span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">    check_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens32</span><br><span class="line">    virtual_router_id <span class="number">52</span></span><br><span class="line">    priority <span class="number">100</span></span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">     <span class="number">192.168</span><span class="number">.4</span><span class="number">.210</span></span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">    check_nginx</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;               </span><br><span class="line">   router_id Nginx_02</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">script <span class="string">&quot;/etc/keepalived/check_nginx.sh&quot;</span></span><br><span class="line">interval <span class="number">2</span></span><br><span class="line">    weight -<span class="number">5</span></span><br><span class="line">    fall <span class="number">3</span></span><br><span class="line">    rise <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens32</span><br><span class="line">    virtual_router_id <span class="number">51</span></span><br><span class="line">    priority <span class="number">100</span></span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">     <span class="number">192.168</span><span class="number">.4</span><span class="number">.200</span></span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">    check_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line">vrrp_instance VI_2 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens32</span><br><span class="line">    virtual_router_id <span class="number">52</span></span><br><span class="line">    priority <span class="number">150</span></span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">     <span class="number">192.168</span><span class="number">.4</span><span class="number">.210</span></span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">    check_nginx</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 反向代理服务器对服务器的代理 </summary>              <div class='content'>              <p>这一配置在服务器部分有提及，此处进行进一步解释。在我们的反向代理服务器中，由于实现了高可用的配置，对反向代理服务器的访问需要通过虚拟IP访问才能保障高可靠服务的有效性。因此我们在配置反向代理时也需要将nginx代理的IP地址修改为我们定义的虚拟IP地址，即192.168.4.200和192.168.4.210。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 配置Web服务器地址池</span><br><span class="line">upstream phpserver1 &#123;</span><br><span class="line">    server <span class="number">172.168</span><span class="number">.1</span><span class="number">.1</span>:<span class="number">80</span>;</span><br><span class="line">    server <span class="number">172.168</span><span class="number">.1</span><span class="number">.2</span>:<span class="number">80</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 配置反向代理服务器映射方法（其中<span class="number">200</span>和<span class="number">210</span>为虚拟IP）</span><br><span class="line">server &#123;</span><br><span class="line">        listen       <span class="number">80</span>;</span><br><span class="line">        server_name  <span class="number">192.168</span><span class="number">.4</span><span class="number">.200</span>;</span><br><span class="line">        server_name  <span class="number">192.168</span><span class="number">.4</span><span class="number">.210</span>;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass   http://phpserver1;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>（二）结果分析</p><ul><li><p>VRRP验证</p><p>对于两台反向代理服务器nginx1和nginx2，他们映射有VRRP机制下的虚拟IP地址。如下图，nginx1有真实IP地址192.168.4.1，也有虚拟IP地址192.168.4.200；nginx2有真实IP地址192.168.4.2，也有虚拟IP地址192.168.4.210。</p><p><img src="https://image.asa-world.cn/pic/image-20230718121939887.png" alt="IP展示"></p><p>在h1的xterm下打开浏览器，依次访问192.168.4.200和192.168.4.210，如下图，均可以访问到Web服务器。</p><p><img src="https://image.asa-world.cn/pic/image-20230718122023094.png" alt="访问web服务器"></p><p>暂停nginx1的反向代理服务器来检测VRRP的有效性，即关闭nginx代理服务和keepalived服务。</p><p><img src="https://image.asa-world.cn/pic/image-20230718122056813.png" alt="关闭代理服务"></p><p>查看nginx1的IP地址，可以看到虚拟IP地址已经消失，只剩下真实IP地址192.168.4.1。这相当于nginx1这台反向代理服务器出现差错，无法继续工作，正常情况下，另一台代理服务器会接替这台出现差错的代理服务器。</p><p><img src="https://image.asa-world.cn/pic/image-20230718122132806.png" alt="IP展示"></p><p>我们再查看nginx2的IP地址，可以看到，在原来两个IP地址的基础上，多出了192.168.4.200这一虚拟IP地址，说明其接替了nginx1的工作。</p><p><img src="https://image.asa-world.cn/pic/image-20230718122158719.png" alt="IP展示"></p><p>再次在h1的浏览器中测试两个虚拟IP地址，均成功访问，VRRP技术验证成功。</p><p><img src="https://image.asa-world.cn/pic/image-20230718122233770.png" alt="web服务器访问"></p></li></ul><h2 id="GRE隧道实现与分析">GRE隧道实现与分析</h2><p>（一）实现</p><details class="folding-tag" blue><summary> 反向代理服务器对服务器的代理 </summary>              <div class='content'>              <p><img src="https://image.asa-world.cn/pic/image-20230717234325368.png" alt="image-20230717234325368"></p><p>在我们设计的网络中，主干网和分支网是位于两台虚拟机上的Mininet拓扑，想要实现两者通过隧道的通信，首先我们需要在两台虚拟机之间搭建隧道连接。对我们的拓扑分析，外面需要连通的是主干网的服务器集群网络192.168.4.0/24和分支网的主机网络192.168.6.0/24，我们需要搭建用于传输这两个网段的隧道。由于Linux内核已经系统级的支持GRE隧道，因此我们只需要在系统中编写并执行脚本便可以实现隧道的搭建。两台虚拟机的脚本文件如下。</p><p>主干网脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 在主干网和分支网虚拟机IP之间搭建GRE隧道并启动</span><br><span class="line">ip tunnel add Tunnel-<span class="number">1</span> mode gre remote <span class="number">192.168</span><span class="number">.106</span><span class="number">.242</span> local <span class="number">192.168</span><span class="number">.106</span><span class="number">.171</span></span><br><span class="line">ifconfig Tunnel-<span class="number">1</span> up</span><br><span class="line">// 配置隧道的网段</span><br><span class="line">ip addr add <span class="number">192.168</span><span class="number">.6</span><span class="number">.1</span>/<span class="number">24</span> dev Tunnel-<span class="number">1</span></span><br><span class="line">// 配置隧道的路由表项</span><br><span class="line">ip route add <span class="number">192.168</span><span class="number">.4</span><span class="number">.0</span>/<span class="number">24</span> dev Tunnel-<span class="number">1</span></span><br></pre></td></tr></table></figure><p>分支网脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 在主干网和分支网虚拟机IP之间搭建GRE隧道并启动</span><br><span class="line">ip tunnel add Tunnel-<span class="number">1</span> mode gre remote <span class="number">192.168</span><span class="number">.106</span><span class="number">.171</span> local <span class="number">192.168</span><span class="number">.106</span><span class="number">.242</span></span><br><span class="line">ifconfig Tunnel-<span class="number">1</span> up</span><br><span class="line">// 配置隧道的网段</span><br><span class="line">ip addr add <span class="number">192.168</span><span class="number">.4</span><span class="number">.1</span>/<span class="number">24</span> dev Tunnel-<span class="number">1</span></span><br><span class="line">// 配置隧道的路由表项</span><br><span class="line">ip route add <span class="number">192.168</span><span class="number">.6</span><span class="number">.0</span>/<span class="number">24</span> dev Tunnel-<span class="number">1</span></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 主干网和分支网通过隧道的连通 </summary>              <div class='content'>              <p>通过文件配置读取的形式向控制器导入隧道的相关信息。</p><p><img src="https://image.asa-world.cn/pic/image-20230717234821457.png" alt="隧道相关信息的配置"></p><p>编写代码实现文本配置隧道信息的读取并初始化控制器:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取隧道连接的内部网络信息</span></span><br><span class="line">self.vpn_innet = content[<span class="number">10</span>].replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;=&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------vpn_innet:  &#123;&#125;---------------------&quot;</span>.<span class="built_in">format</span>(self.vpn_innet))</span><br><span class="line"><span class="comment"># 读取隧道连接的外部网络信息</span></span><br><span class="line">self.vpn_outnet = content[<span class="number">11</span>].replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;=&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------vpn_innet:  &#123;&#125;---------------------&quot;</span>.<span class="built_in">format</span>(self.vpn_outnet))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>报文的获取及初步处理:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 源和目的IP都为隧道网段 进行处理</span></span><br><span class="line"><span class="keyword">if</span> self.ipINvpn(pkt_ipv4.src) <span class="keyword">and</span> self.ipINvpn(pkt_ipv4.dst):</span><br><span class="line">    self.vpn_handler(msg)</span><br></pre></td></tr></table></figure><p>隧道报文的处理:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">vpn_handler</span>(<span class="params">self, msg</span>):</span><br><span class="line">    <span class="comment"># 读取报文相关信息</span></span><br><span class="line">    datapath = msg.datapath</span><br><span class="line">    parser = datapath.ofproto_parser</span><br><span class="line">    in_port = msg.<span class="keyword">match</span>[<span class="string">&#x27;in_port&#x27;</span>]</span><br><span class="line">    pkt = packet.Packet(msg.data)</span><br><span class="line">    eth = pkt.get_protocols(ethernet.ethernet)[<span class="number">0</span>]</span><br><span class="line">    pkt_ipv4 = pkt.get_protocol(ipv4.ipv4)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 寻找最短路并输出</span></span><br><span class="line">    shortest_path = self.topo.Dijkstra(</span><br><span class="line">        datapath.<span class="built_in">id</span>, self.nat_switch_id, in_port, self.nat_switch_port</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(shortest_path) &gt; <span class="number">0</span></span><br><span class="line">    path_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> s, ip, op <span class="keyword">in</span> shortest_path:</span><br><span class="line">        path_str = path_str + <span class="string">&quot;--&#123;&#125;-&#123;&#125;-&#123;&#125;--&quot;</span>.<span class="built_in">format</span>(ip, s, op)</span><br><span class="line">    self.logger.info(<span class="string">&quot;Configure the shortset path from &#123;&#125; to &#123;&#125; —— &#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(pkt_ipv4.src, pkt_ipv4.dst, path_str))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下发流表项</span></span><br><span class="line">    self.configure_path(shortest_path, msg, eth.src, eth.dst, pkt_ipv4.dst)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将报文从NAT交换机发送</span></span><br><span class="line">    actions = [parser.OFPActionOutput(self.nat_switch_port)]</span><br><span class="line">    self.send_out(self.nat_switch, actions, pkt.data)</span><br></pre></td></tr></table></figure>              </div>            </details><p>（二）结果分析</p><ul><li><p>隧道连通性验证</p><p>启动GRE隧道，在隧道两端，我们连接主干网的服务器部分（网段为192.168.4.0）和分支网的主机部分（网段为192.168.6.0）。</p><p><img src="https://image.asa-world.cn/pic/image-20230718123212382.png" alt="启动GRE隧道"></p><p>用IP为192.168.6.1的主机ping IP为192.168.4.1的服务器，可以看到能够成功ping通。</p><p><img src="https://image.asa-world.cn/pic/image-20230718123256546.png" alt="ping通展示"></p></li><li><p>抓包分析</p><p>可以看到，抓取到的报文具有两层IP结构，即还有一层IP结构为Generic Routing Encapsulation(GRE)，证明GRE隧道有效。</p><p><img src="https://image.asa-world.cn/pic/image-20230718123335758.png" alt="抓包分析"></p></li><li><p>主干、分支网连通性验证</p><p>启动拓扑，接下来验证分支网可以通过两种方式来访问主干网的服务器。</p><p>首先进行ICMP测试，可以看到，分支网可以成功ping通主干网的Web服务器（192.168.4.1）和FTP服务器（192.168.4.5）。</p><p><img src="https://image.asa-world.cn/pic/image-20230718123432051.png" alt="连通性验证"></p><p>再验证TCP服务和UDP服务。在分支网打开浏览器，先使用公网IP 192.168.106.242进行访问，可以看到访问成功，且负载分担正常。</p><p><img src="https://image.asa-world.cn/pic/image-20230718123501506.png" alt="访问web服务器"></p><p>采用私网IP（192.168.4.200和192.168.4.210），即隧道的方式进行访问，可以看到两个虚拟IP均可以正常访问。</p><p><img src="https://image.asa-world.cn/pic/image-20230718123527014.png" alt="访问web服务器"></p><p>用隧道的方式连接FTP服务器，可以成功登录，使用get指令后文件成功获取，GRE隧道验证成功。</p><p><img src="https://image.asa-world.cn/pic/image-20230718123611477.png" alt="登录服务器"></p><p><img src="https://image.asa-world.cn/pic/image-20230718123655499.png" alt="获取文件成功"></p></li></ul><h1 id="总结">总结</h1><p>本次项目设计中，首先通过我们自己设计并实现的协议，完成了SDN网络的配置，验证了拓扑中各个主机的联通性，同时实现了流量的监控与管理；</p><p>其次实现了通过NAPT对外网的访问，在这一点上，我们优化了本身实现的NAT，完成了NAPT的搭建；</p><p>接着实现了DHCP中继，使各个主机可以通过向DHCP服务器申请的方式获得自身的IP地址，减少了网络管理员手动配置的工作量；</p><p>然后实现了包含负载均担的服务器的搭建，并且通过防火墙的设置，完成了不同子网访问服务器的限制；</p><p>再然后实现了基于VRRP协议的高可用配置，为我们设计实现的中小型网络增加了出故障之后的处理能力，提高了鲁棒性；</p><p>最后，通过实现GRE隧道，实现了不同网络之间的相互访问。</p><p>到此为止，我们完成了整个项目设计目标——中小型网络的搭建，完成了在有限的计算机和网络设备的条件下，通过选择合适的硬件和软件，构建一个适合中小规模组织使用的网络系统。</p>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDN </tag>
            
            <tag> Python </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARP欺骗原理分析以及实际运用</title>
      <link href="/f7eff65d/"/>
      <url>/f7eff65d/</url>
      
        <content type="html"><![CDATA[<h1 id="实验目的-4">实验目的</h1><ol><li><p>掌握 ARP 协议的内容，ARP 攻击的原理，检测方法；</p></li><li><p>会用基本的 ARP 欺骗软件，以及简单的抓包分析。</p></li></ol><h1 id="实验原理-4">实验原理</h1><h2 id="ARP-协议介绍">ARP 协议介绍</h2><p>以太网卡一般都有固定的 MAC 地址（以太网硬件地址），但一块网卡使用的 IP 地址却可能发生变化，这就引发了一个问题：基于 IP 网络如何获取发送数据包的一端的MAC 地址。ARP 应运而生，在 IP 地址与对应的 MAC 地址之间提供动态映射，其功能是提供 32 位的 IP 地址到 48 位的硬件地址的转换。</p><p>当网络中一台主机要向另一台主机或者路由器发送数据时，发送方必须要知道接收方的 MAC 地址。发送方便要在自己的 ARP 缓冲中搜索接收方 IP 地址所对应的 MAC 地址，如果发送方没有在本地的 ARP 缓冲中找到接收方的 MAC 地址，就需要广播 ARP 请求。ARP 请求中包含了接收方的 IP 地址，当接收方接收到了这个请求，就会做出 ARP应答，应答中就包含了应答一方的 IP 地址和 MAC 地址。为了避免每次数据发送之前都要进行 ARP 请求的广播，发送方会将查询得到的结果保存到本地的 ARP 缓存中，并以超时则删除的策略加以维护。</p><h2 id="欺骗的原理">欺骗的原理</h2><p>ARP 欺骗的核心思想就是向目标主机发送伪造的 ARP 应答，并使目标主机接收应答中伪造的 IP 地址与 MAC 地址之间的映射对，以此更新目标主机 ARP 缓存。下面就在理论上说明实施 ARP 欺骗的过程(见下图)：S 代表源主机，也就是将要被欺骗的目标主机；D 代表目的主机，源主机本来是向它发送数据；A 代表攻击者，进行 ARP 欺骗。</p><p><img src="https://image.asa-world.cn/pic/image-20230703134305789.png" alt="实施ARP欺骗的过程"></p><p>进一步假设 A 已知 D 的 IP 地址，于是他暂时将自己的 IP 地址改为 D 的 IP 地址。</p><p>当 S 想要向 D 发送数据时，假设目前他的 ARP 缓存中没有关于 D 的记录，那么他首先在局域网中广播包含 D 的 IP 地址的 ARP 请求。但此时 A 具有与 D 相同的 IP 地址，于是分别来自 A 与 D 的 ARP 响应报文将相继到达 S。此时，A 是否能够欺骗成功就取决于 S的操作系统处理重复 ARP 响应报文的机制。不妨假设该机制总是用后到达的 ARP 响应中的地址对刷新缓存中的内容。那么如果 A 控制自己的 ARP 响应晚于 D 的 ARP 响应到达 S，S 就会将如下伪造映射：D 的 lP 地址→A 的 MAC 地址，保存在自己的 ARP 缓存中。在这个记录过期之前，凡是 S 发送给 D 的数据实际上都将发送给 A。而 S 却毫不察觉。</p><p>或者 A 在上述过程中，利用其它方法直接抑制来自 D 的 ARP 应答将是一个更有效的方法而不用依赖于不同操作系统的处理机制。进一步，A 可不依赖于上述过程，直接在底层伪造 ARP 响应报文来达到同样的目的。</p><h2 id="IP与MAC地址静态绑定">IP与MAC地址静态绑定</h2><ol><li>做好整个局域网终端用户计算机的命名，指定 IP 地址。根据用户的类别统一命名计算机，并给定 IP 地址。这样通过机器名，就知道是哪个部门哪台计算机，便于管理。</li><li>统计每个终端机器网卡的 MAC 地址，建立 IP 地址与 MAC 地址对应表。</li><li>将 IP 地址与 MAC 地址绑定。要根据局域网接入互联网的方式不同而采用不同的方法。</li></ol><p>如果采用代理服务器接入互联网，那就是用如下的命令：<code>ARP -s IP 地址 MAC 地址</code> 例：ARP -s 192.168.1.4 00-EO-4C-6C-08-75这样，就将静态 IP 地址 192.168.1.4 与网卡地址为 00-EO-4C-6C-08-75 的计算机绑定在一起了，即使别人盗用你的 IP 地址 192.168.1.4，也无法通过代理服务器上网。</p><p>如果要查看是否绑定，可以用 <code>arp -a 192.168.1.4</code> 回车，会得到如下提示：<code>Internet Address Physical Address Type 192.168.1.4 00-EO-4C-6C-08-75 static</code></p><h2 id="IP与MAC地址动态绑定">IP与MAC地址动态绑定</h2><p>采用的命令如下：<code>Internet Address Physical Address Type 192.168.1.4 00-EO-4C-6C-08-75 dynamic</code></p><p>当网络中有很多台主机时，如果这样每一台都去做动态绑定，工作量是非常大的。这种绑定，在电脑每次重起后，都必须重新再绑定，虽然也可以做一个批处理文件，但是还是比较麻烦的。</p><h2 id="IP与MAC地址硬件绑定">IP与MAC地址硬件绑定</h2><p>如果是通过路由器直接接入互联网，最好通过硬件防火墙来实现 IP 与 MAC 的绑定。一般的硬件防火墙都具有这个功能，具体的操作也非常简单。</p><h2 id="ARP欺骗行为检测">ARP欺骗行为检测</h2><p>目前存在着几种检测 ARP 欺骗的机制。在主机级，普通主机可以采用两种方法检测自己的IP 地址是否正在被其它机器挪用：一种是被动检查网络广播报文；另一种是主动探查有嫌疑的主机。在服务器级，文件服务器或者路由器试图检测出它的服务对象所做的 ARP 欺骗。</p><p>在网络级，处于网络管理员控制下的机器将检查所有的 ARP 请求与响应以查明异常并判断是否出现 ARP 欺骗行为。</p><ol><li>主机缓被动检测</li></ol><p>当系统接收到来自局域网上的 ARP 请求时，系统检查该请求发送端的 IP 地址是否与自己的IP 地址相同。如果相同，则说明该网络上另有一台机器与自己具有相同的 IP 地址。</p><ol start="2"><li>主机级主动检测</li></ol><p>主机定期向所在局域网发送查询自己 IP 地址的 ARP 请求报文。如果能够收到另一 ARP 响应报文，则说明该网络上另有一台机器与自己具有相同的 IP 地址。</p><p>以上两种检测方式检测出的异常情况很多时候是由于非恶意的操作失误，如其他用户错配IP地址。而下面这种检测方式检测到的异常情况则更可能是真正的 ARP 欺骗。因为它说明目标主机收到的 ARP 应答包是伪造的。</p><ol start="3"><li>服务器缓检测</li></ol><p>当服务器收到 ARP 响应时，为了证实它的真实性，根据反向地址解析协议(RARP)就用从响应报文中给出的 MAC 地址再生成一个 RARP 请求，它询问这样一个问题： “如果你是这个MAC 地址的拥有者，请回答你的 IP 地址”。这样就会查询到这个 MAc 地址对应的 IP 地址，比较这两个 IP 地址，如果不同，则说明对方伪造了 ARP 响应报文。</p><ol start="4"><li>网络级检测</li></ol><p>配置主机定期向中心管理主机撤告其 ARP 缓存的内容。这样中心管理主机上的程序就会查找出两台主机报告信息的不一致，以及同一台主机前后报告内容的变化。这些情况反映了潜</p><p>在的安全问题。或者利用网络嗅探工具连续监测网络内主机硬件地址与 IP 地址对应关系的变化。</p><p>需要注意的是，上述方法在检测到异常情况时，它有可能是正当的，意外的，或者就是破坏安全的攻击行为。因而在实际的处理过程中，针对不同的情况需要使用不同的策略。</p><h1 id="实验内容及步骤-2">实验内容及步骤</h1><p>（1）正确安装 netfuke 软件和 wireshark 软件。</p><p>（2）搭建实验环境，将三台主机用网线和路由器连接起来，并令三者的IP处在同一子网内，如下面几张图所示。<img src="https://image.asa-world.cn/pic/Snipaste_2023-08-13_10-51-16.jpg" alt="实验环境"></p><p><img src="https://image.asa-world.cn/pic/Snipaste_2023-08-13_10-40-20.jpg" alt="主机1"></p><p><img src="https://image.asa-world.cn/pic/image-20230703134851557.png" alt="主机2"></p><p><img src="https://image.asa-world.cn/pic/image-20230703134904893.png" alt="主机3"></p><p>（3）打开 netfuke 主界面，如下图所示。</p><p><img src="https://image.asa-world.cn/pic/image-20230703134944841.png" alt="netfuke界面"></p><p>（4）ARP 欺骗设置</p><p>单击设置，选择 ARP 欺骗，弹出如下图所示的对话框，对相关参数进行正确的配置。其中，欺骗方式选择单向欺骗和双向欺骗，根据需要进行配置。来源 IP 为网关的 IP 地址，中间人 IP 为自己主机的 IP 地址，目标 IP 为想要欺骗的主机的 IP 地址。来源 MAC和目标 MAC 由软件根据所填的 IP 地址自动填写，中间人 MAC 是由操作者自己填写自己主机的 MAC 地址。</p><p><img src="https://image.asa-world.cn/pic/image-20230703135104732.png" alt="双向欺骗设置"></p><p>（5）嗅探配置</p><p>单击设置，选择嗅探欺骗，弹出如下图所示的对话框，对相关参数进行正确的配置。按如图进行 ARP 欺骗所需要的配置进行勾选即可。</p><p><img src="https://image.asa-world.cn/pic/image-20230703135138859.png" alt="嗅探设置"></p><p>（6）打开wireshark抓包，选择以太网3，开始抓包。</p><p>（7）使用netfuke开始攻击，如下图所示。</p><p><img src="https://image.asa-world.cn/pic/image-20230703135206618.png" alt="开始攻击"></p><h1 id="实验结果及分析-2">实验结果及分析</h1><h2 id="单向欺骗结果">单向欺骗结果</h2><center>表1-1 相关主机信息</center><table><thead><tr><th>主机</th><th>IP地址</th><th>MAC地址</th></tr></thead><tbody><tr><td>攻击者</td><td>192.168.1.102</td><td>00E09408D6EC</td></tr><tr><td>被攻击者</td><td>192.168.1.100</td><td>448A5BFDBBD3</td></tr><tr><td>通信主机</td><td>192.168.1.101</td><td>448A5BFDBC3D</td></tr></tbody></table><p>从下图可以看出，被攻击者的ARP表中的192.168.1.101表项本应是通信主机的MAC，而现在是攻击者的MAC，即00E09408D6EC，说明攻击者欺骗成功。</p><p><img src="https://image.asa-world.cn/pic/Snipaste_2023-08-13_10-50-47.jpg" alt="被攻击者ARP表"></p><p>由下图可知，ARP进行攻击时，单向欺骗中随着被攻击者的网络流量的变化，ARP攻击的流量也在变化。</p><p><img src="https://image.asa-world.cn/pic/image-20230703135359278.png" alt="ARP攻击流量"></p><h2 id="单向欺骗报文分析">单向欺骗报文分析</h2><p>如下图所示，当主机向另一台主机发起连接请求时，由于ARP表为空，所以会发送ARP请求，目标IP为想要建立连接的主机，即192.168.1.101，目标MAC为全0，即为广播。</p><p><img src="https://image.asa-world.cn/pic/image-20230703135513587.png" alt="ARP请求报文"></p><p>从下图可以看出，攻击者接收到被攻击者主机的ARP广播请求后，会伪装ARP请求目标主机发送ARP应答，此时应答的发送方的MAC为攻击者MAC（00E09408D6EC），发送方IP为ARP请求目标主机IP（192.168.1.101）。被攻击者接收到该ARP应答报文后会把目标主机的IP与攻击者的MAC进行绑定，后续与目标主机的交互都会经过攻击者，攻击者欺骗成功。</p><p><img src="https://image.asa-world.cn/pic/image-20230703135541713.png" alt="ARP应答报文"></p><h2 id="双向欺骗结果">双向欺骗结果</h2><center>表1-2 相关主机信息</center><table><thead><tr><th>主机</th><th>IP地址</th><th>MAC地址</th></tr></thead><tbody><tr><td>攻击者</td><td>192.168.1.102</td><td>00E09408D6EC</td></tr><tr><td>被攻击者1</td><td>192.168.1.100</td><td>448A5BFDBBD3</td></tr><tr><td>被攻击者2</td><td>192.168.1.101</td><td>448A5BFDBC3D</td></tr></tbody></table><p>从下图可以看出，两个被攻击者的通信ARP表项均变成了攻击者的MAC地址00E09408D6EC，攻击者欺骗成功。</p><p><img src="https://image.asa-world.cn/pic/Snipaste_2023-08-13_10-48-11.jpg" alt="被攻击者1 ARP表"></p><p><img src="https://image.asa-world.cn/pic/image-20230703135753412.png" alt="被攻击者2 ARP表"></p><p>由下图可知，ARP 进行攻击时，双向欺骗中随着被攻击者的网络流量的变化，ARP攻击的流量也在变化。</p><p><img src="https://image.asa-world.cn/pic/image-20230703135821752.png" alt="ARP攻击流量"></p><h2 id="双向欺骗报文分析">双向欺骗报文分析</h2><p>从下图可以看出，当被攻击者1想与被攻击者2通信时，由于ARP为空，会发送ARP请求报文广播，因此目标IP为192.168.1.101，目的MAC地址为广播。</p><p><img src="https://image.asa-world.cn/pic/image-20230703135851830.png" alt="被攻击者1的ARP请求报文"></p><p>从下图可以看出攻击者嗅探到被攻击者1的ARP请求报文后，会伪装成其目标IP进行应答，发送方MAC为自己的MAC地址，当被攻击者1收到该应答后便会将192.168.1.101的表项设置成攻击者MAC地址。</p><p><img src="https://image.asa-world.cn/pic/image-20230703135914520.png" alt="攻击者的ARP应答报文"></p><p>被攻击者2收到经攻击者转发的攻击者1的消息报文后，由于其ARP也是空的，因此被攻击者2会发送192.168.1.100的ARP请求报文。攻击者收到后，伪装为被攻击者1进行应答，发送方MAC为自己的MAC地址，如下图所示。当被攻击者2收到该应答后便会将192.168.1.100的表项设置成攻击者MAC地址。从而实现了双向欺骗。</p><p><img src="https://image.asa-world.cn/pic/image-20230703135942488.png" alt="攻击者的ARP应答报文"></p><h1 id="总结与反思-2">总结与反思</h1><p>这个实验最令人头痛的是搭建实验环境。起初我使用的是以手机为AP的无线局域网，实验架构如图4-1所示，这种方案攻击AP是有问题的。</p><ul><li><p>当攻击AP时，由于手机无法查看ARP表项，导致很难展示攻击的结果；</p></li><li><p>当攻击主机时，始终攻击无效，我以为由于WLAN数据包始终由AP转发的特点，导致攻击者很难进行攻击。真正原因后面会说。</p></li></ul><p>无线局域网方案不行，导致实验一度陷入僵局。如果用有线的话需要用三根网线、转换口和一个转发设备，这都是我没有的。经过苦苦寻找，在图书馆发现了插着网线的电脑，实验又有了希望。最后我把寝室的路由器“偷”了出来才得以完成实验。</p><p><img src="https://image.asa-world.cn/pic/image-20230703140029432.png" alt="无线局域网实验架构"></p><p>还有一个坑是netfuke嗅探设置中的网卡选择。一开始我以为用默认的就行，结果攻击始终没有效果，我一度以为是软件的问题。而且下拉的菜单的这些网卡很难和各种网卡名字对应，我只能一个一个试，很麻烦。</p><p><img src="https://image.asa-world.cn/pic/image-20230703140049852.png" alt="嗅探设置网卡选择"></p><p>也正是这个坑，导致我以为用无线局域网不行，做完有线局域网实验后我又尝试了下用手机热点搭建无线局域网来攻击主机。事实证明，选择了正确网卡后可以实现攻击，如图4-3至图4-5所示。</p><p><img src="https://image.asa-world.cn/pic/Snipaste_2023-08-13_10-52-15.jpg" alt="欺骗前主机ARP表"></p><p><img src="https://image.asa-world.cn/pic/image-20230703140130993.png" alt="欺骗后主机ARP表"></p><p><img src="https://image.asa-world.cn/pic/image-20230703140146055.png" alt="ARP攻击流量"></p>]]></content>
      
      
      <categories>
          
          <category> 实验实操 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器的访问以及服务端口的扫描</title>
      <link href="/cc6fd8f4/"/>
      <url>/cc6fd8f4/</url>
      
        <content type="html"><![CDATA[<h1 id="实验目的-3">实验目的</h1><ul><li><p>通过ping等命令了解目标主机的可访问性；</p></li><li><p>通过使用网络扫描软件，了解目标主机端口和服务的开放情况，从而进一步获取系统信息，找出系统安全漏洞；</p></li><li><p>通过本次实验，读者可以了解到端口与服务开放的风险，增强在网络安全防护方面的意识。</p></li></ul><h1 id="实验原理-3">实验原理</h1><p>常用扫描探测命令：ping、tracert ；扫描工具：Superscan和Nmap。</p><h2 id="Ping以及tracert">Ping以及tracert</h2><p>ping命令首先会构建一个固定格式的ICMP请求数据包echo request,发给远端计算机；远端计算机收到后，构造一个ICMP应答包echo reply，发送回本机；本机收到应答包后，即可判断出目的主机是否开机，并根据发送包和应答包携带的时间信息计算出网络延迟。</p><p>源主机将构造并向目标主机发送不同TTL值的ICMP请求数据包，tracert诊断程序根据ICMP的回应数据包来确定到目标所采取的路由；</p><p>Tracert程序首先发送 TTL 为1的请求数据包，该包经过第一个路由设备后TTL减1为0，第一个路由设备就将给源主机发回“ICMP已超时”的消息；</p><p>源主机的tracert命令通过该消息中的IP信息就获得了第一个路由设备的IP；</p><p>在随后的每次发送过程将TTL依次递增1，直到目标响应或TTL达到最大值，从而确定从源主机到目的主机中间的路由。</p><h2 id="端口扫描的原理">端口扫描的原理</h2><p>扫描的过程就是向目标主机的端口发送请求数据包，希望建立“连接”，根据目标主机的回应判断其端口是否开放；</p><p>通过扫描判断目标主机端口是否打开的一个最简单的方法，是利用TCP协议的三次握手机制；只要和目标主机的端口能建立TCP的三次握手，说明目标主机的端口是开的，反之则没有打开。</p><h2 id="三次握手">三次握手</h2><p><img src="https://image.asa-world.cn/pic/image-20230702213905843.png" alt="三次握手"></p><ul><li><p>第一次握手：主机A的某个端口向主机B的某个端口发出TCP连接请求数据包，其TCP包头的标志位设置为SYN=1，ACK=0，同时选择一个序号x，表明在后面传送数据时的第一个数据字节的序号是x，这个过程称为第一次握手。</p></li><li><p>第二次握手：主机B的相应端口收到连接请求数据包后，如端口是开放的，则发回确认数据包。在确认数据包中，TCP包头的标志位设置为SYN=1，ACK=1，确认序号为x+1，同时B主机也会生成一个自己的序号y，这个过程称为第二次握手。</p></li><li><p>第三次握手：主机A收到此数据包后，还要向B给出确认数据包，其TCP包头的标志位设置为ACK=1，其确认序号为y+1，这个过程称为第三次握手。</p></li></ul><h2 id="扫描分类">扫描分类</h2><ol><li>全TCP连接</li></ol><p>这种扫描方法使用三次握手，与目标计算机建立标准的TCP连接；</p><p>攻击者首先向目的端口发送一个SYN数据包，如果收到来自该端口的SYN/ACK数据包，就可以判定该端口是开放的；然后攻击者再发送一个ACK数据包；</p><p>如果目标端口是关闭的，攻击者就会收到一个直接返回的RST/ACK数据包；</p><ol start="2"><li>半打开式扫描（SYN扫描）</li></ol><p>在这种扫描技术中，扫描主机同样向目标计算机的指定端口发送SYN数据包，表示希望建立连接。</p><ul><li><p>当端口开放时，目标计算机回应SYN/ACK数据包，这和全TCP连接扫描类似。但是扫描主机接着发送一个RST=1的数据包给目标主机，RST数据包将对TCP连接进行重置，目标计算机因为没有接到相应ACK数据包，从而不会建立三次握手。</p></li><li><p>如果端口是关闭的，则按照TCP协议中端口未开规则处理，由目标主机发送RST/ACK数据包给扫描主机，此时TCP连接依然没有建立。</p></li></ul><p>扫描主机根据目标计算机的回应数据包是SYN/ACK数据包，还是RST/ACK数据包即可判断端口是否打开。</p><ol start="3"><li>秘密扫描</li></ol><p>这种方法的优点在于没有涉及TCP连接的部分，所以比前2种都要安全，所以也被称做秘密扫描；缺点就是不够准确，不能完全识别开放的端口。</p><ol start="4"><li>FIN标记扫描：</li></ol><p>攻击者发送一个FIN=1的TCP报文到目标主机：</p><ul><li><p>端口关闭时，该报文会被丢掉，并返回一个RST报文。</p></li><li><p>端口开放时，该报文只是简单的丢掉，不会返回任何回应。</p></li></ul><h1 id="实验内容及步骤">实验内容及步骤</h1><h2 id="使用Ping、Tracert命令">使用Ping、Tracert命令</h2><h2 id="安装Superscan">安装Superscan</h2><p>首先安装Superscan3.0，安装完毕后，双击程序，进入其主界面。</p><p><img src="https://image.asa-world.cn/pic/image-20230702214249208.png" alt="Superscan3.0界面"></p><h2 id="主机名和IP相互转换">主机名和IP相互转换</h2><p>在SuperScan里面，有两种方法来实现域名（主机名）和IP相互转换：</p><ol><li>通过Hostname Lookup来实现</li></ol><p>在Hostname Lookup的输入框输入需要转换的域名或者IP，按【LookUp】就可以取得结果。如果需要取得自己计算机的IP，可以点击【Me】按钮来取得。</p><p>同时，也可以取得自己计算机的IP设置情况，点击【InterFaces】取得本地IP设置情况。</p><p><img src="https://image.asa-world.cn/pic/image-20230702214354133.png" alt="查找本机"></p><p><img src="https://image.asa-world.cn/pic/image-20230702214402562.png" alt="查看本机ip"></p><ol start="2"><li><p>通过Extract From File实现</p><p>这个功能通过一个域名列表来转换为相应IP地址。选择【Extract from file】，点击【-&gt;】按钮，选择域名列表，进行转换。</p></li></ol><p><img src="https://image.asa-world.cn/pic/image-20230702214441108.png" alt="从文件导入"></p><h2 id="Ping功能的使用">Ping功能的使用</h2><p>如下图，在【IP】的【Start】填入起始IP，在【Stop】填入结束IP，然后，在【Scan Type】选择【Ping only】，按【Start】就可以检测了。</p><p><img src="https://image.asa-world.cn/pic/image-20230702214825062.png" alt="ping扫描"></p><h2 id="端口检测">端口检测</h2><p>端口检测可以取得目标计算机提供的服务，同时，也可以检测目标计算机是否有木马。现在，我们来看看端口检测的具体使用。</p><ol><li>检测目标计算机的所有端口</li></ol><p>如果检测的时候没有特定的目的，只是为了了解目标计算机的一些情况，可以对目标计算机的所有端口进行检测。一般不提倡这种检测，因为：</p><ul><li><p>它会对目标计算机的正常运行造成一定影响，同时，也会引起目标计算机的警觉；</p></li><li><p>扫描时间很长；</p></li><li><p>浪费带宽资源，对网络正常运行造成影响。</p><p>在【IP】输入起始IP和结束IP，在【Scan Type】选择最后一项【All Ports From 1 to 65535】，如果需要返回计算机的主机名，可以选择【Resolve Hostnem】，按【Start】开始检测。</p></li></ul><p><img src="https://image.asa-world.cn/pic/image-20230702214943263.png" alt="所有端口扫描"></p><ol start="2"><li>扫描目标计算机的特定端口（自定义端口）<br>其实，大多数时候我们不需要检测所有端口，我们只要检测有限的几个端口就可以了，因为我们的目的只是为了得到目标计算机提供的服务和使用的软件。所以，我们可以根据个人目的的不同来检测不同的端口，大部分时候，我们只要检测80（web服务）、21（FTP服务）、23（Telnet服务）就可以了，即使是攻击，也不会有太多的端口检测。 点击【Port list setup】，出现端口设置界面（如下图）：</li></ol><p><img src="https://image.asa-world.cn/pic/image-20230702215016978.png" alt="端口选择"></p><p>我们选择21、23、80、三个端口，然后，点击【save】按钮保存选择的端口为端口列表。【ok】回到主界面。在【Scan Type】选择【All selected port in list】，按【Start】开始检测。</p><p><img src="https://image.asa-world.cn/pic/image-20230702215040716.png" alt="扫描80端口"></p><h2 id="使用Nmap6-35扫描">使用Nmap6.35扫描</h2><ul><li>隐蔽扫描(Stealth Scanning) TCP SYN scan命令：<code>nmap -sS IP_address</code></li><li>UDP 扫描(UDP Scanning)命令：<code>nmap -sU IP_address</code></li><li>扫描目标主机的操作系统类型命令：<code>nmap -sS -O IP_address</code></li><li>IPprotocol scan命令：<code>nmap -sO -v IP_address</code></li></ul><h1 id="实验结果及分析">实验结果及分析</h1><h2 id="使用ping和tracert命令">使用ping和tracert命令</h2><p>下图可以看到回环地址可以ping通，发送4个ping报文均收到了回应。应答报文长度均为32字节，应答时间均小于1ms，TTL都还有128。</p><p>TTL是IP数据包在计算机网络中可以转发的最大跳数。TTL字段由IP数据包的发送者设置，每经过一个路由器，路由器都会把该TTL的值减1，然后再将IP包转发出去。路由器将会丢弃收到的TTL=0的IP包。</p><p><img src="https://image.asa-world.cn/pic/image-20230702214113327.png" alt="使用ping命令"></p><p>下图分析：-n参数表示ping报文的个数，windows中缺省值为4。图中改为2，即只发送两个ping报文，因此收到两个应答。</p><p><img src="https://image.asa-world.cn/pic/image-20230702214125628.png" alt="使用ping -n命令"></p><p>下图分析：-t表示持续地ping直到人为中断，Ctrl+Break暂时中止ping命令并查看当前的统计结果，而Ctr+C则中断命令的执行。</p><p><img src="https://image.asa-world.cn/pic/image-20230702214134782.png" alt="使用ping -t命令"></p><p>下图分析：-l表示设置ping报文所携带的数据部分的字节数，设置范围从0至65500。图中设置携带的数据有500字节，因为ping应答不会解析数据部分而是原样发送，因此接受到的应答报文中的数据部分也是500字节。</p><p><img src="https://image.asa-world.cn/pic/image-20230702214146201.png" alt="使用ping -l命令"></p><p>下图分析：-a表示反向解析IP地址为主机名。图中可以看到将ping的目标主机解析成了主机名LAPTOP-5GC34HSA</p><p><img src="https://image.asa-world.cn/pic/image-20230702214156787.png" alt="使用ping -a命令"></p><p>下图分析：Tracert首先发送一个TTL为1的UDP报文；到达第一跳时TTL超时，第一跳设备发回一个ICMP错误消息，指明此数据包不能被发送；发送主机将TTL加1，重新发送此数据包；第二跳设备返回TTL超时报文。可以看到最终经过15个跃点到达了baidu.com的服务器（ip为39.156.66.10）。</p><p>显示信息每行包含编号、3次报文的响应时间和到达的设备IP地址。中间部分显示为“* * *”，说明该节点设备配置不允许tracert。</p><p><img src="https://image.asa-world.cn/pic/image-20230702214206218.png" alt="使用Tracert命令"></p><p>下图分析：-h指定最大TTL，即搜索目标的最大跃点数。图中可以看出最多有5个跃点，最终未到达baidu.com的服务器。</p><p><img src="https://image.asa-world.cn/pic/image-20230702214214676.png" alt="使用Tracert -h命令"></p><h2 id="使用Superscan进行扫描">使用Superscan进行扫描</h2><p>下图分析：通过输入本机电脑的IP，成功解析出了本机的名称LAPTOP-5GC34HSA。</p><p><img src="https://image.asa-world.cn/pic/image-20230702215738559.png" alt="查找本机"></p><p>下图分析：通过ip扫描，找到了同一子网下的另一台主机，并解析出了该主机名称为LAPTOP-1VGKT20I。</p><p><img src="https://image.asa-world.cn/pic/image-20230702215804365.png" alt="查找另一台主机"></p><p>下图分析：通过扫描所有在列表中选择的21、23、80号端口，扫描到该主机80号端口正在运行。80是http协议的默认端口。</p><p><img src="https://image.asa-world.cn/pic/image-20230702215844235.png" alt="端口扫描"></p><h2 id="使用Nmap6-35扫描-2">使用Nmap6.35扫描</h2><p>下图分析：使用多种命令都连不上主机，改了很久后，我在官网https://nmap.org/download#windows重新下载了最新版本nmap，就可以连接了。</p><p><img src="https://image.asa-world.cn/pic/image-20230702215922594.png" alt="tcp扫描BUG"></p><p>下图分析：共扫描了101.43.74.203的1000个tcp端口，发现有995个被过滤的端口(没有响应)，2个关闭的端口，3个打开的端口，分别进行ssh、http、sun-answerbook服务。</p><p><img src="https://image.asa-world.cn/pic/image-20230702215951138.png" alt="tcp扫描"></p><p>下图分析：46分钟扫描了1000个端口均为忽略状态，无使用UDP的端口。</p><p><img src="https://image.asa-world.cn/pic/image-20230702220018108.png" alt="tcp扫描"></p><p>下图分析：可以看出推测设备类型为linux系统（版本不太确定），运行时间推测为21.9天，预测TCP序列号难度为260。</p><p><img src="https://image.asa-world.cn/pic/image-20230702220044437.png" alt="扫描主机操作系统"></p><p>下图分析：IP 协议扫描允许判断目标主机支持哪些 IP 协议，从结果可以看到共扫描了 256 个端口，发现被扫描主机支持1 种 IP 协议，即ICMP协议，其中只有端口1处于开启状态。</p><p><img src="https://image.asa-world.cn/pic/image-20230702220110414.png" alt="扫描主机操作系统"></p><h1 id="总结与反思">总结与反思</h1><ol><li>ping和tracert命令很早接触过了，但通常只是简单的加个IP地址，这次试了很多没用过的参数，有用又有趣。</li><li>对于Superscan软件，主要是对主机解析和端口扫描，感觉软件实现的原理不难，有时间我也可以写一个。</li><li>对于Nmap6.35，想吐槽的一点是慕课给的软件不能用，命令总是连接不上主机，网上的办法没用，问了助教好几次也未果，真的非常感谢助教耐心解答。最终实在没办法，就打算在官网上重下了一个最新版本，结果就真的可以了，当时差点哭出来呜呜呜，官网奉上，<a href="https://nmap.org/download#windows">https://nmap.org/download#windows</a></li><li>Nmap6.35的端口扫描不是很快，好像扫了40多分钟，也有可能扫的端口1000个太多了。Nmap6.35还可以推测操作系统、运行时间等，还蛮厉害的，虽然有点误差，但无可厚非。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 实验实操 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于802.1X控制的LAN接入实验</title>
      <link href="/d25741a1/"/>
      <url>/d25741a1/</url>
      
        <content type="html"><![CDATA[<h1 id="实验目的-2">实验目的</h1><ul><li>掌握 802.1X 接入控制模式结构、原理及特点；</li><li>掌握 802.1X 服务器和客户端的配置方法；</li><li>掌握不同 802.1X 客户划分不同 VLAN 的应用及配置方法；</li><li>理解并掌握 VLAN 通信的测试方法；</li><li>掌握 802.1X 的认证过程及测试方法。</li></ul><h1 id="实验内容-2">实验内容</h1><ul><li>VLAN 的配置与测试；</li><li>DHCP 服务器的配置；</li><li>LAN 802.1X 接入控制方式配置与测试；</li><li>用户独享帐户，通过认证和授权，接入外网。</li></ul><h1 id="实验器材-2">实验器材</h1><ul><li>以太交换机 2 台；</li><li>PC 级 6-8 台（用途： 1 台 Radius 服务器，1 台 DHCP+NAT 服务器，1 台外网主机，1 台配置机，3-4 台 802.1X 客户机）；</li><li>USB 接口的以太网卡：科 B119 房间 2 个，科 B121 房间 7-9 个；</li><li>USB 转串口配置线 1 根（仅科 B121 实验室需要）；</li><li>网线：科 B119 房间 1 根，科 B121 房间 7-9 根。</li></ul><h1 id="实验原理-2">实验原理</h1><h2 id="系统结构">系统结构</h2><p>802.1X+RADIUS 接入认证与控制方式基于 802.1X 协议,在交换机接入端口上对用户进行接入控制，系统结构如下图所示。图中连接用户的以太交换机必须支持 802.1X 协议，基于端口实现对用户的接入控制。用户 PC 上必须运行 TCP/IP 协议和 802.1X 协议。802.1X 接入交换机与 RADIUS 服务器之间运行 RADIUS 协议，由 RADIUS 服务器实现对用户身份合法性进行认证，并对认证通过的用户进行授权。</p><p><img src="https://image.asa-world.cn/pic/image-20230702204731456.png" alt="802.1X+RADIUS 接入认证与控制系统结构"></p><h2 id="基本原理-3">基本原理</h2><p>802.1X协议是一个基于端口的接入控制协议。其接入控制基本原理如下图所示。</p><p><img src="https://image.asa-world.cn/pic/image-20230702204806704.png" alt="802.1X的接入控制基本原理"></p><p>802.1X 协议的接入端口在逻辑上分为两个逻辑端口：受控端口和非受控端口。非受控端口始终处于连通状态，用来传送认证信息。受控端口默认情况下处于断开状态，只有在认证通过后才接通，用来传送用户的业务数据。</p><p>因此，在认证没有通过前，用户只能通过 802.1X 接入交换机传送认证信息，接入交换机再通过 RADIUS 协议把认证信息送到 RADIUS 服务器上，由 RADIUS 服务器进行认证，并把认证的结果返回给接入交换机。接入交换机根据认证结果控制用户的接入，若认证成功，则接通受控端口，允许用户接入，否则，受控端口继续保持为断开状态，拒绝用户接入，从而 802.1X 协议基于端口实现了对用户的接入控制。</p><h1 id="实验拓扑-3">实验拓扑</h1><p>本实验是基于 VLAN 应用的 802.1X 接入控制的接入实验，需要对 802.1X 交换机上开启802.1X 协议、配置 RADIUS 客户端、配置 VLAN，在 PC 机上配置 802.1X 客户端，用户通过RASIUD 服务器认证授权后，802.1X 服务器控制接入（802.1X 交换机接通受控端口），由 DHCP服务器为 802.1X 客户分配 IP 地址，然后 802.1X 客户通过 PCI 以太网连接到 Internet。实验拓扑如图下图所示。</p><p><img src="https://image.asa-world.cn/pic/image-20230702204948590.png" alt="基于VLAN的802.1X接入控制实验拓扑图"></p><center>表 2-1 实验设备描述</center><table><thead><tr><th>图中标注设备功能</th><th>数量（台）</th><th>实际使用设备</th><th>说明</th></tr></thead><tbody><tr><td>接入用户区PC(802.1X客户)</td><td>3-4</td><td>实验室PC或笔记本电脑</td><td>运行windows系统(可以选择“wireshark”镜像)</td></tr><tr><td>配置机</td><td>1</td><td>实验室PC</td><td>科B119运行widows系统(选择wireshark镜像)</td></tr><tr><td>L2/SW</td><td>2</td><td>实验室以太网交换机</td><td>科B119为SRG-3760-24</td></tr><tr><td>RADIUS服务器</td><td>1</td><td>实验室PC</td><td>运行Iinux系统(选择“接入网实验全家桶”镜像)</td></tr><tr><td>网关（DHCP、NAT服务器）</td><td>1</td><td>实验室PC</td><td>运行Iinux系统(选择“接入网实验全家桶”镜像)<br />上图中，网关有三个外联接口：<br/>ens3:电脑以太网口（去校园网）<br/>enx000 XXXXxXXXX:外联USB网卡（119已有）<br/>enx000 KXXxxxXXx:外联USB网卡（自行插入）<br/>（以实际网卡名称为准）</td></tr><tr><td>外网主机</td><td>1</td><td>实验室PC</td><td>运行windows系统(选择“wireshark”镜像)</td></tr></tbody></table><h1 id="实验步骤与记录">实验步骤与记录</h1><h2 id="设备连接与实验准备">设备连接与实验准备</h2><p>根据实际设备与L2/SW1连接端口，VLAN规划并确定相关设备端的IP地址，记录如表3-1。</p><center>表3-1 拓扑规划</center><table><thead><tr><th>端口号</th><th>连接功能设备</th><th>VLAN ID</th><th>实验USB网卡的IP地址</th></tr></thead><tbody><tr><td>1  @交换机1</td><td>802.1X客户1（PC1）</td><td>2</td><td>172.16.22.10-100/24</td></tr><tr><td>2  @交换机1</td><td>802.1X客户2（PC2）</td><td>2</td><td>172.16.22.10-100/24</td></tr><tr><td>3  @交换机1</td><td>802.1X客户3（PC3）</td><td>3</td><td>172.16.33. 10-100/24</td></tr><tr><td>4  @交换机1</td><td>802.1X客户4（PC4）</td><td>3</td><td>172.16.33. 10-100/24</td></tr><tr><td>5  @交换机1</td><td>网关设备内网子接口1 （PC1和PC2的网关）</td><td>2</td><td>172.16.22.2/24</td></tr><tr><td>5  @交换机1</td><td>网关设备内网子接口2 （PC3和PC4的网关）</td><td>3</td><td>172.16.33.2/24</td></tr><tr><td>×</td><td>802.1X服务器</td><td>1</td><td>172.16.3.210/24</td></tr><tr><td>5  @交换机1</td><td>802.1X服务器的网关</td><td>1</td><td>172.16.3.254/24</td></tr><tr><td>1  @交换机2</td><td>网关设备外网接口</td><td>×</td><td>192.168.0.200/24</td></tr><tr><td>2  @交换机2</td><td>RADIUS服务器</td><td>×</td><td>192.168.0.201/24</td></tr><tr><td>3  @交换机2</td><td>外网主机</td><td>×</td><td>192.168.0.203/24</td></tr></tbody></table><h2 id="网关配置">网关配置</h2><p>网关设备在实验中需要使用两块 USB 实验网卡，在实验准备中已经将 USB 网卡接入网关 PC，且已连接到相关交换机端口。作为网关的 PC 选择“接入网实验全家桶”镜像，操作系统为 Ubuntu22.04，密码为 123456。</p><p>（1）配置 VLAN trunk 端口与子接口IP地址</p><ol><li>识别连接内网的USB网卡（连接交换机1的USB网卡），加载8021q 模块；</li><li>添加vlan2和vlan3，注：重启后配置会消失，如不慎重启请重新配置；</li><li>配置IP 地址，再次使用 ifconfig 命令查看，确认上述配置的正确性。</li></ol><p>（2）配置 DHCP 服务器</p><ol><li>在支持vlan2和vlan3的USB网卡(连接内网的USB网卡)上开启DHCP监听功能。并修改配置文件；</li><li>修改 DHCP 配置文件，重启 DHCP 服务；</li></ol><p>（3）连接外网的USB网卡的识别与配置</p><ol><li>可以通过拔插 USB 网卡，并结合采用 ifconfig 命令查看，确认连接外网的 USB 网卡的名称为 enx000xxxxxxxxx ；</li><li>对连接外网的 USB 网卡按照表3-1规划配置 IP 地址；</li><li>通信测试：在连接外网 USB 网卡的网络上 ping Radius 服务器或外网主机应能 ping通。</li></ol><p>（4）配置NAT规则</p><h2 id="VLAN配置与测试">VLAN配置与测试</h2><p>（1）进入配置界面</p><p>科 B119 实验室的联网设备都放置在机柜里，对联网设备的配置是通过 web进入配置界面的，进入特权模式并进入全局配置模式。</p><p><img src="https://image.asa-world.cn/pic/image-20230702210517499.png" alt="配置界面"></p><p>（2）创建VLAN2和3</p><p>（3）access端口配置</p><p>按照拓扑中连接的 access 端口以及规划的 VLAN-ID，逐一进入端口进行配置，其他端口类同。</p><p>（4）Trunk 端口配置</p><p>L2/SW1 连接网关（DHCP/S 和NAT）的端口为Trunk 端口。</p><p>（5）VLAN 通信测试</p><ol><li><p>查看PC机获得的IP地址</p><center>表3-2各PC机的IP地址</center><table><thead><tr><th>实验主机</th><th>连L2/SW1端口号</th><th>VLAN-  ID</th><th>获取的IP地址</th></tr></thead><tbody><tr><td>PC1-2</td><td>f0/1</td><td>2</td><td>172.16.22.11</td></tr><tr><td>PC2-4</td><td>f0/2</td><td>2</td><td>172.16.22.10</td></tr><tr><td>PC3-8</td><td>f0/3</td><td>3</td><td>172.16.33.10</td></tr><tr><td>PC4-10</td><td>f0/4</td><td>3</td><td>172.16.33.11</td></tr></tbody></table></li><li><p>VLAN通信测试</p><center>表3-3  VLAN 通信测试</center><table><thead><tr><th>实验主机操作</th><th>测试结果</th></tr></thead><tbody><tr><td>PC1-PC2相互ping</td><td>通</td></tr><tr><td>PC3-PC4相互ping</td><td>通</td></tr><tr><td>PC1 ping网关（子接口1）</td><td>通</td></tr><tr><td>PC4 ping网关（子接口2）</td><td>通</td></tr><tr><td>PC1  ping 外网主机</td><td>通</td></tr><tr><td>PC4  ping RADIUS服务器</td><td>通</td></tr></tbody></table></li></ol><h2 id="802-1X服务器与RADIUS客户配置与记录">802.1X服务器与RADIUS客户配置与记录</h2><ol><li>配置并记录管理VLAN ID号和 IP地址；</li><li>管理VLAN ID号为1，管理VLAN IP地址为172.16.3.0/24；</li><li>802.1X服务的开启：包括打开AAA、802.1X认证方法、应用方法及计账方法列表；</li><li>配置RADIU客户端：包括访问的RADIUS服务器的 IP 地址、认证/授权端口及记账端口，加密 key，snmp 等；</li><li>开启802.1X端口接入控制：包括将接入测试PC 机的那几个端口开启802.1X接入控制，交换机其他端口不能开启 802.1X 接入端口控制。</li></ol><center>表3-4 RADIUS客户端配置参数记录</center><table><thead><tr><th>RADIUS服务器IP地址</th><th>认证端口</th><th>记账端口</th><th>加密key</th></tr></thead><tbody><tr><td>192.168.0.201</td><td>1812</td><td>1813</td><td>test</td></tr></tbody></table><p>完成上述配置后进行连通性测试，各VLAN内的PC相互ping，观察是否能ping通，用802.1X协议原理解释观察到的现象：</p><ul><li><p>PC1 和PC2相互ping，现象记录：不通 。</p></li><li><p>PC3 和PC4相互ping，现象记录：不通 。</p></li><li><p>PC1 ping 外网主机，现象记录：不通 。</p><p>造成上述现象的原因分析：此时PC还没有进行用户认证，所以受控端口未接通，ping的业务数据不能通过。</p></li></ul><h2 id="RADIUS服务器配置">RADIUS服务器配置</h2><p>在RADIUS服务器中配置的认证的相关信息记录如下：配置RADIUS客户端的IP地址是172.16.3.210；与RADIUS客户端的共享密钥是test。配置的账户名和密码，记录如表3-5所示。</p><center>表3-5 接入账户和密码</center><table><thead><tr><th>账户名</th><th>密码</th></tr></thead><tbody><tr><td>user1</td><td>1</td></tr><tr><td>user2</td><td>1</td></tr><tr><td>user3</td><td>1</td></tr><tr><td>user4</td><td>1</td></tr></tbody></table><h2 id="802-1X客户端配置与记录">802.1X客户端配置与记录</h2><p>802.1X客户端在PC机上配置。采用Windows 自带的802.1X客户程序。在各PC机上配置的内容包括：开启 802.1X 服务，设置与 802.1X 服务器上匹配的加密方式；设置与 RADIUS 服务器上匹配的用户名和密码。</p><p>802.1X加密方式为 EAP-MSCHAP v2；实验者自己使用的密码分别为user2和1 。</p><h2 id="802-1X接入控制测试">802.1X接入控制测试</h2><ol><li><p>各测试PC机用配置好的用户名密码进行登录，成功后，记录各PC机获取的IP地址。并用802.1X 协议原理解释为什么此时PC机能获取IP地址。</p><p>答：PC机获得的IP地址如表3-7所示。用户认证成功后，受控端口接通，用户可以与DHCP服务器正常交互，因此获取到IP地址。</p></li><li><p>登录成功后，各PC机ping 192.168.0.201（RADIUS服务器的IP地址。该地址可以模拟外网），记录测试情况。</p></li><li><p>各PC机ping外网主机t，记录上网情况。</p></li></ol><center>表3-7 802.1X接入控制测试记录</center><table><thead><tr><th>主机</th><th>获取的IP地址</th><th>测试操作</th><th>测试结果</th></tr></thead><tbody><tr><td>PC1</td><td>172.16.22.10</td><td>PC1-2相互ping</td><td>通</td></tr><tr><td>PC2</td><td>172.16.22.11</td><td>PC3-4相互ping</td><td>通</td></tr><tr><td>PC3</td><td>172.16.33.10</td><td>PC1  ping外网主机</td><td>通</td></tr><tr><td>PC4</td><td>172.16.33.11</td><td>PC4  ping外网主机</td><td>通</td></tr></tbody></table><ol start="4"><li><p>选择1台PC机上退出802.1X客户软件，设计1-2种错误配置，并重新进行802.1X接入过程，观察现象，记录结果并分析。</p><ul><li><p>设置的错误配置为：用户名、密码错误</p></li><li><p>现象记录：认证不成功，无法进行业务数据的传输。</p></li><li><p>原因分析：Radius服务器通过比对自己的数据库发现用户名密码错误，导致用户认证失败，所以受控端口未接通，业务数据不能通过，所以不通。</p></li></ul></li></ol><h1 id="实验分析">实验分析</h1><ol><li><p>根据实验过程，总结802.1X认证中对RADIUS客户端配置的主要内容有哪些？</p><p>答：802.1X认证中对RADIUS客户端配置的主要内容主要包括以下内容：</p><ol><li>配置管理vlan；</li><li>Radius服务器地址和共享秘钥；</li><li>开启802.1X服务，开启AAA认证服务；</li><li>配置上联的Radius服务器的IP地址；</li><li>配置Radius key</li><li>在对应端口开启802.1x认证。</li></ol></li><li><p>在本实验802.1X认证中，除了在实验中设计的错误配置外，至少列举3种可能的错误配置会导致认证失败。</p><p>答：可能的错误配置如下：</p><ul><li>RADIUS客户端没启用认证或启用了本地认证；</li><li>RADIUS客户端没正确配置RADIUS服务器的地址和共享密钥；</li><li>交换机的trunk口没有配置；</li><li>RADIUS认证服务器没配置正确的EAP方法；</li><li>客户端没关防火墙，导致认证请求被防火墙阻止。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 实验实操 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PPPoE本地认证与远端认证接入控制</title>
      <link href="/e9d76f08/"/>
      <url>/e9d76f08/</url>
      
        <content type="html"><![CDATA[<h1 id="实验目的">实验目的</h1><ul><li><p>掌握PPPoE接入控制模式结构、原理及特点；</p></li><li><p>掌握PPPoE本地认证和PPPoE + RADIUS远端认证两种接入控制模式的配置方法；</p></li><li><p>通过抓包分析PPPoE协议和RADIUS协议的运行过程，进一步加深对协议的理解。</p></li></ul><h1 id="实验内容">实验内容</h1><ul><li><p>基于 PPPoE本地认证的LAN接入实验</p><p>根据拓扑图互连设备搭建实验环境，按实验要求进行设备配置，接入测试，并通过抓包，记录并分析PPPoE协议的运行过程。</p></li><li><p>基于PPPoE + RADIUS远端认证的LAN接入实验</p><p>根据拓扑图互连设备搭建实验环境，按实验要求进行设备配置，接入测试，并通过抓包，记录并分析PPPoE和RADIUS协议前后台的协同工作过程。</p></li></ul><h1 id="实验器材">实验器材</h1><ul><li><p>以太交换机2台（配置线1根，用于交换机故障时排查问题）；</p></li><li><p>PC级6-8台（用途：1台PPPoE服务器，1台Radius服务器，1台外网主机，3-5台PPPoE客户机）；</p></li><li><p>USB接口的以太网卡：科B119房间1个，科B121房间7-9个；</p></li><li><p>USB转串口配置线1根（用于交换机故障时排查问题）；</p></li><li><p>网线：科B119房间1根，科B121房间7-9根。</p></li></ul><h1 id="实验原理">实验原理</h1><p>PPPoE协议主要用于多点链路的接入控制。工作流程包含发现和会话两个阶段，发现阶段是无状态的，目的是与每一个NAR主机建立一条虚拟点到点链路，并用唯一的会话ID标识。发现阶段结束后，就进入标准的PPP会话阶段。</p><p>NAS和NAA是两个独立的逻辑实体，位于同一物理设备时称为本地认证。适合于接入用户不多的小网，用户接入认证和接入控制都有PPPoE服务器完成。用户身份认证通过后，由PPPoE服务器通过IP池为用户分配IP地址上网。</p><p>对于接入用户数多或多种接入用户的综合接入控制，通常采用基于PPPoE+RADIUS的远端认证方式。该方式下，用户认证由RADIUS服务器完成，对于通过认证的用户进行授权，并将授权信息通过RADIUS协议发送到PPPoE服务器设备的RADIUS客户端，PPPoE服务器据此为接入用户分配IP地址上网。</p><h1 id="实验拓扑-2">实验拓扑</h1><p><img src="https://image.asa-world.cn/pic/image-20230701082707756.png" alt="本地认证实验拓扑"></p><p><img src="https://image.asa-world.cn/pic/image-20230701082722161.png" alt="远端认证实验拓扑"></p><h1 id="实验操作与记录">实验操作与记录</h1><h2 id="网络连接端口记录与IP地址规划">网络连接端口记录与IP地址规划</h2><p>本实验中，PPPoE客户IP地址池（内网地址），外网地址，网络连接端口等规划如表1和表2。</p><center>表1 交换机连接端口规划</center><table><thead><tr><th>端口号</th><th>连接设备</th><th></th><th>端口号</th><th>连接设备</th></tr></thead><tbody><tr><td>2 @交换机1</td><td>PPPoE客户1</td><td></td><td>1 @交换机2</td><td>PPPoE服务器eth0外网口</td></tr><tr><td>6 @交换机1</td><td>PPPoE客户2</td><td></td><td>14 @交换机2</td><td>RADIUS服务器</td></tr><tr><td>12 @交换机1</td><td>PPPoE客户3</td><td></td><td>10 @交换机2</td><td>外网PC</td></tr><tr><td>16 @交换机1</td><td>PPPoE客户4</td><td></td><td></td><td></td></tr><tr><td>1  @交换机1</td><td>PPPoE服务器eth1内网口</td><td></td><td></td><td></td></tr></tbody></table><center>表2  IP地址规划</center><table><thead><tr><th>设备或端口</th><th>IP地址（若需要，可含掩码）</th></tr></thead><tbody><tr><td>PPPoE客户端IP地址池</td><td>192.168.4.2/24~192.168.4.11/24</td></tr><tr><td>PPP连接中服务器端地址  (与IP地址池在同一网段的地址）</td><td>192.168.4.1/24</td></tr><tr><td>PPPoE服务器外网网卡  （eth0）</td><td>192.168.5.1/24</td></tr><tr><td>RADIUS服务器网卡  （eth0）</td><td>192.168.5.2/24</td></tr><tr><td>外网主机</td><td>192.168.5.3/24</td></tr></tbody></table><h2 id="PPPoE本地认证">PPPoE本地认证</h2><p>（1）关键步骤与主要内容</p><ol><li><p>进入桌面终端，运行配置脚本，根据提示配置PPPoE服务器参数。</p></li><li><p>启动PPPoE服务器（开启服务）。</p></li><li><p>配置IP转发与NAT。</p><ol><li><p>开启转发：sysctl -w net.ipv4.ip_forward=1</p></li><li><p>配置NAT：iptables -t nat -A POSTROUTING -s X.X.X.X/M –j MASQUERADE</p></li></ol></li><li><p>开启wireshark，抓PPPOE客户端的报文。</p></li><li><p>客户机使用PPPoE拨号接入，重启相应网卡，即启用PPPoE连接。</p></li><li><p>客户机ping外网测试，能够ping通外网PC说明已经可以连接外网。</p></li></ol><p>（2）实验记录</p><center>表3 PPPoE本地认证实验测试记录</center><table><thead><tr><th>客户端</th><th>帐户名</th><th>密码</th><th>认证后获取的  IP地址</th><th>Ping外网主机  （通，不通）</th></tr></thead><tbody><tr><td>PPPoE客户1</td><td>user1</td><td>1</td><td>192.168.4.5</td><td>通</td></tr><tr><td>PPPoE客户2</td><td>user2</td><td>1</td><td>192.168.4.4</td><td>通</td></tr><tr><td>PPPoE客户3</td><td>user3</td><td>1</td><td>192.168.4.6</td><td>通</td></tr><tr><td>PPPoE客户4</td><td>user4</td><td>`</td><td>192.168.4.8</td><td>通</td></tr></tbody></table><h2 id="PPPoE-RADIUS远程认证">PPPoE+RADIUS远程认证</h2><p>（1）关键步骤与主要内容</p><ol><li><p>进入桌面终端，运行配置脚本，根据提示配置PPPoE服务器参数。</p></li><li><p>输入命令 ~/Desktop/radius.sh ，运行radius脚本。（如果需要输入密码，则输入123456）</p></li><li><p>根据提示输入PPPoE服务器的IP地址,并回车。</p></li><li><p>根据提示输入NAS和NAA之间的共享密钥，并回车。</p></li><li><p>进入用户管理数据库。在终端内输入<code>mysql -u radius -p</code>后回车，输入密码：<code>321</code>，进入数据库。</p></li><li><p>在mysql&gt;提示后输入<code>use radius</code>后回车，进入radius数据库。</p></li><li><p>在mysql&gt; 提示符后输入如下命令，命令中的用户名、密码请自行更改。</p><p><code>insert into radcheck (username,attribute,op,value)</code></p><p><code>values('用户名', 'Cleartext-Password', ':=', '密码');</code></p></li><li><p>在Radius服务器上开启抓包。</p></li><li><p>客户端配置过程同本地认证实验，各PPPoE客户机ping外网主机，观察通信结果。</p></li></ol><p>（2）实验记录</p><center>表4 基于PPPoE + RADIUS远程认证实验记录表1</center><table><thead><tr><th>科目</th><th>具体配置的数据</th></tr></thead><tbody><tr><td>PPPoE服务器和RADIUS服务器的共享密钥 key</td><td>123</td></tr><tr><td>在PPPoE服务器上配置的RADIUS服务器的IP地址</td><td>192.168.5.2/24</td></tr><tr><td>在RADIUS服务器上配置的PPPoE服务器的IP地址</td><td>192.168.5.1/24</td></tr></tbody></table><center>表5 PPPoE + RADIUS远程认证实验记录表2</center><table><thead><tr><th>配置事项</th><th>账户名</th><th>密码</th><th>认证后获取的  IP地址</th><th>Ping外网主机   （通，不通）</th></tr></thead><tbody><tr><td>PPPoE客户1</td><td>1user</td><td>1</td><td>192.168.4.7/24</td><td>通</td></tr><tr><td>PPPoE客户2</td><td>2user</td><td>1</td><td>192.168.4.2/24</td><td>通</td></tr><tr><td>PPPoE客户3</td><td>3user</td><td>1</td><td>192.168.4.5/24</td><td>通</td></tr><tr><td>PPPoE客户4</td><td>4user</td><td>1</td><td>192.168.4.8/24</td><td>通</td></tr></tbody></table><h1 id="本地认证分析">本地认证分析</h1><h2 id="客户机网络连接状态">客户机网络连接状态</h2><p><img src="https://image.asa-world.cn/pic/image-20230701161514081.png" alt="user3的网络状态"></p><h2 id="发现阶段报文分析">发现阶段报文分析</h2><p>该阶段的本质是建立主机和PPPOE服务器之间的一条虚拟点到点通道，并由唯一会话标识表征。该阶段的协议交互如下图所示。下面逐一分析每次交互报文内容。</p><p><img src="https://image.asa-world.cn/pic/image-20230701161800512.png" alt="发现阶段协议交互"></p><p>如下图所示，PADI报文中，主机使用广播MAC地址进行广播，用于寻找合适的PPPoE服务器。</p><p><img src="https://image.asa-world.cn/pic/image-20230701161947826.png" alt="有效启动发现（PADI）"></p><p>如下图所示，PADO报文中，满足要求的服务器均可以应答，把自己的MAC地址作为源地址，单播出去；载荷部分中AC Cookie的内容由PPPOE服务器自由定义和解释，携带tag的类型、长度和值。</p><p><img src="https://image.asa-world.cn/pic/image-20230701162104691.png" alt="有效发现提供（PADO）"></p><p>如下图所示，PADR报文中主机单播，发向主机选择的服务器，进行请求。可以看到载荷中的AC-Cookie与PADO的完全一致，主机并未解析和处理它。</p><p><img src="https://image.asa-world.cn/pic/image-20230701162302688.png" alt="有效发现请求（PADR）"></p><p>如下图所示，PADS报文中服务器应答主机，分配唯一的会话标识5，成功建立P2P隧道。</p><p><img src="https://image.asa-world.cn/pic/image-20230701162357469.png" alt="有效发现会话证实（PADS）"></p><h2 id="会话阶段报文分析">会话阶段报文分析</h2><p>该阶段即在每条虚拟链路中承载PPP帧，进行PPP链路的建立，认证和网络层协议协商等。</p><blockquote><p>PPP链路建立</p></blockquote><p>从下面两张图可以看出PPP链路建立是主机和服务器相互请求，建立双向连接。最大接收单元指发送端PPP报文中信息域的长度不能超过MRU，否则接收端不负责处理，可能会将报文丢弃。图中可以看出二者最大接收单元都为1492字节；对于魔术字，两端不能重复，可以用来检测链路的环回情况，这是一个必要选项，必须被确认否则LCP不能UP。</p><p>服务器的请求还会对认证协议及算法进行协商，这里使用的是CHAP with MD5。</p><p><img src="https://image.asa-world.cn/pic/image-20230701162711248.png" alt="主机配置请求"></p><p><img src="https://image.asa-world.cn/pic/image-20230701162801819.png" alt="服务器配置请求"></p><blockquote><p>CHAP认证</p></blockquote><p>PPP链路建立完成后，开始进行CHAP认证对用户身份进行鉴别。CHAP协议交互如下图所示。下面逐一分析每次交互报文内容。</p><p><img src="https://image.asa-world.cn/pic/image-20230701162930610.png" alt="CHAP协议交互"></p><p>如下图所示，PPPOE通过单播给对等端（主机）发送质询分组，质询值应该是唯一的和不可预知的值，并且应该在随后的每个询问中改变，增强了安全性。</p><p><img src="https://image.asa-world.cn/pic/image-20230701163039268.png" alt="质询报文"></p><p>如下图所示，主机接收到质询报文后，将质询值通过哈希计算进行加密再发送，因为使用的是MD5算法，所以输出为16字节。</p><p><img src="https://image.asa-world.cn/pic/image-20230701163124628.png" alt="响应报文"></p><p><img src="https://image.asa-world.cn/pic/image-20230701163202173.png" alt="认证通过报文"></p><blockquote><p>网络层配置</p></blockquote><p>认证通过后，有IPCP对网络层协议进行配置，分配IP地址。协议交互过程如图3-12所示。下面逐一分析每次交互报文内容。</p><p><img src="https://image.asa-world.cn/pic/image-20230701163246267.png" alt="认证通过报文"></p><p>下图可以看到，由于主机还没有IP地址，此时将参数配置选项中的IP地址填充全0，表示请求对端分配IP。</p><p><img src="https://image.asa-world.cn/pic/image-20230701163329654.png" alt="主机配置请求"></p><p>当服务器收到报文时，会发送NAK应答表示不接受对端IP。又检测到对端IP为全0，则将分配给对方的IP地址（192.168.4.6）填充到报文内，并给定DNS服务器进行应答，如下图所示。</p><p><img src="https://image.asa-world.cn/pic/image-20230701163428952.png" alt="服务器应答"></p><p>下图可以看出，主机收到Config-Nak报文后，使用服务器提供的IP地址（192.168.4.6）和DNS服务器重新发送一个Config-Request报文。</p><p><img src="https://image.asa-world.cn/pic/image-20230701163512077.png" alt="主机配置请求"></p><p>下图可以看出服务器接受对端主机IP（192.168.4.6）并发送ACK。由于连接是双向的，服务器也要发送配置请求，然后主机发送ACK表示接受IP，这里不再赘述。</p><p><img src="https://image.asa-world.cn/pic/image-20230701163559151.png" alt="服务器应答"></p><h2 id="PPPOE终止阶段">PPPOE终止阶段</h2><p>该阶段主机和服务器均可发起终止，发送PADT。</p><h1 id="远程认证分析">远程认证分析</h1><h2 id="客户机网络连接状态-2">客户机网络连接状态</h2><p><img src="https://image.asa-world.cn/pic/image-20230701164817223.png" alt="2user的网络状态"></p><h2 id="报文分析">报文分析</h2><p>整个认证授权协议交互过程如下图所示，下面逐一分析每次交互报文内容。</p><p><img src="https://image.asa-world.cn/pic/image-20230701165048173.png" alt="RSA交互过程"></p><p>下图可以看出，在一个二层网络中，PPPOE服务器向2user主机发起CHAP 质询，质询值为随机23字节值，服务器用户为misaka</p><p><img src="https://image.asa-world.cn/pic/image-20230701165141033.png" alt="PPPOE服务器向2user主机发起质询"></p><p>下图可以看出主机收到质询报文后通过MD5算法使用共享密钥对质询值进行加密，生成16字节的值，发送过去。</p><p><img src="https://image.asa-world.cn/pic/image-20230701165227880.png" alt="2user主机响应质询"></p><p>下图可以看出，PPPOE服务器通过三层网络把接入请求发送给Radius服务器应用层，且使用的是UDP无连接的方式。</p><p><img src="https://image.asa-world.cn/pic/image-20230701165317274.png" alt="PPPOE服务器向Radius服务器发送接入请求"></p><p>接入请求报文中，鉴别码是一个16字节的随机数，这个值应该是不可预测的，并且是唯一的，因为具有相同密码的重复请求值，使黑客有机会用已截取的响应回复用户。可以看到报文中直接发送了认证用户名和质询响应，PPPOE服务器并未对质询响应做处理，这是与其本地认证最大的不同。</p><p>下图可以看出Radius服务器接收请求报文后接受了请求并发出响应，回应鉴别码是对整个数据包进行MD5演算产生的16字节索引，防止伪造服务器的回应。</p><p><img src="https://image.asa-world.cn/pic/image-20230701165421126.png" alt="Radius服务器向PPPOE服务器发送接入响应"></p><p>下图可以看出PPPOE向主机发送接入成功报文，用户认证成功。</p><p><img src="https://image.asa-world.cn/pic/image-20230701165506576.png" alt="PPPOE服务器向用户发送认证成功报文"></p><p>认证通过后，PPPOE服务器开始为用户2user分配IP地址，从图5-3可以看出该阶段过程与本地认证阶段别无二致，这里不再详细介绍，详见7.1（3）中网络层配置分析部分。我们这里可以通过下图可以看出，PPPOE服务器给用户分配的地址是192.168.4.2。</p><p><img src="https://image.asa-world.cn/pic/image-20230701165823336.png" alt="PPPOE服务器向用户发送NAK"></p><p>分配完IP地址后，PPPOE会向Radius服务器发送记账请求，如下图所示。</p><p><img src="https://image.asa-world.cn/pic/image-20230701165858364.png" alt="PPPOE服务器向Radius服务器发送记账请求"></p><p>Radius服务器收到记账请求报文后发送响应，开始记账，即记录用户的网络行为，如下图所示。</p><p><img src="https://image.asa-world.cn/pic/image-20230701165947486.png" alt="Radius服务器向PPPOE服务器发送记账响应"></p>]]></content>
      
      
      <categories>
          
          <category> 实验实操 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>健康监护手表项目管理报告</title>
      <link href="/1fd86296/"/>
      <url>/1fd86296/</url>
      
        <content type="html"><![CDATA[<p>项目管理是任何一项产品开发过程中必不可少的环节。本文将会探讨一款健康监护手表产品的项目管理各阶段的内容，包括项目的前期准备、研发阶段、市场推广和售后服务等，同时也将进行成本分析和定价，以确保产品的成功上市。</p><p><img src="https://image.asa-world.cn/pic/image-20230629155426996.png" alt="产品原型图"></p><h1 id="项目前期准备阶段">项目前期准备阶段</h1><h2 id="市场调研和竞争分析">市场调研和竞争分析</h2><p>市场调研和竞争分析是确定产品市场前景和定位的重要步骤。我们需要了解目标市场的规模、增长趋势、消费者的购买行为和偏好等信息，并评估竞争对手的产品优势和不足。</p><p>智能手表市场是一个分散的市场，因此公司寄希望于产品创新和产品开发来获得优势和本地参与者的数量。这使得市场竞争更加激烈。主要参与者包括 Apple Inc.、Fitbit Inc.、三星电子有限公司等。</p><p><img src="https://image.asa-world.cn/pic/image-20230629155614169.png" alt="智能手表市场集中度"></p><h2 id="确定产品核心功能">确定产品核心功能</h2><p>根据市场调研的结果，我们需要确定产品的核心功能，应满足消费者的需求和期望。核心功能如下：</p><ul><li>心率监测：手表应该能够实时监测用户的心率，并提供相应的数据记录和报告，以便用户可以追踪自己的健康状况。</li><li>运动监测：手表应该能够监测用户的运动情况，包括步数、卡路里消耗等数据，并提供相应的数据记录和报告，以便用户可以追踪自己的运动量和健康状况。</li><li>睡眠监测：手表应该能够监测用户的睡眠情况，包括睡眠时间、睡眠质量等数据，并提供相应的数据记录和报告，以便用户可以了解自己的睡眠状况并采取相应的措施改善睡眠质量。</li><li>健康提醒：手表应该能够提供用户健康方面的提醒，例如提醒用户多喝水、多运动等，以便用户可以更好地保持健康生活习惯。</li><li>通知提醒：手表应该能够连接用户的手机，提供来电、短信、社交媒体等通知提醒功能，方便用户在不方便拿出手机的情况下及时了解信息。</li></ul><h2 id="制定产品研发计划">制定产品研发计划</h2><p>制定产品研发计划是确保项目顺利进行的关键步骤。我们需要确定项目的时间表、资源需求、研发流程和质量控制措施等，以确保产品按时上市，并满足消费者的需求和期望。</p><p><img src="https://image.asa-world.cn/pic/image-20230629164604427.png" alt="甘特图示例"></p><h1 id="研发阶段">研发阶段</h1><p>研发阶段是将产品从概念变成现实的过程。在这个阶段，我们需要进行硬件和软件的研发工作，并对产品进行测试和优化。在这个阶段，我们需要做好以下工作：</p><h2 id="技术研究和设计">技术研究和设计</h2><h3 id="硬件方案">硬件方案</h3><p>健康监护手表需要集成多种传感器和硬件模块，包括：</p><ul><li>心率传感器和血氧传感器：用于监测用户的心率和血氧饱和度。</li><li>运动传感器：包括加速度传感器、陀螺仪和磁力计，用于监测用户的运动姿态和步数等。</li><li>GPS模块：用于定位和导航，支持室内和室外定位。</li><li>显示屏：用于显示时间、消息和运动数据等。</li><li>无线通信模块：支持蓝牙和Wi-Fi通信，方便用户与手机或其他设备连接和数据传输。</li><li>电池：需要选择高效节能的电池，保证手表的使用时间和充电效率。</li></ul><p>硬件方案的可行性需要考虑以下因素：</p><ol><li>技术可行性：手表需要集成多种传感器和硬件模块，需要考虑硬件集成的复杂度和稳定性，同时需要保证传感器的准确性和精度。</li><li>成本可行性：手表的硬件成本需要控制在合理范围内，同时需要保证产品的质量和性能，避免因为成本控制导致产品性能不佳。</li><li>生产可行性：需要考虑手表的生产和组装流程，选择合适的供应商和制造商，确保产品生产和组装的效率和质量。</li></ol><h3 id="软件方案">软件方案</h3><p>健康监护手表的软件方案需要考虑以下因素：</p><ul><li>操作系统：选择适合手表的操作系统，例如Android Wear或watchOS等。</li><li>应用程序开发：开发适合手表的应用程序，例如运动追踪、健康监测、消息提醒等。</li><li>用户界面设计：设计简洁、直观、易用的用户界面，方便用户进行操作和管理数据。</li><li>数据存储和处理：存储和处理用户的健康和运动数据，需要考虑数据的安全和隐私。</li></ul><p>软件方案的可行性需要考虑以下因素：</p><ol><li>技术可行性：需要选择适合手表的操作系统和开发环境，同时需要保证应用程序的性能和稳定性。</li><li>成本可行性：需要考虑软件开发的成本和周期，确保软件开发成本在合理范围内。</li><li>用户可接受性：需要设计简洁、易用的用户界面，方便用户进行操作和管理数据，同时需要考虑用户对手表功能的需求和接受度。</li><li>数据存储和处理可行性：需要考虑数据存储和处理的可行性和安全性，确保用户数据的隐私和安全。</li></ol><h2 id="系统架构设计">系统架构设计</h2><p>根据下图所示的系统结构和模块划分，可以采用以下系统软硬件接口和数据传输协议。</p><p><img src="https://image.asa-world.cn/pic/image-20230629165043246.png" alt="健康监护手表模块划分"></p><p>系统软硬件接口：</p><ul><li>蓝牙：作为手表与手机或其他设备进行通信的主要方式，可以用于传输数据和控制指令。</li><li>Wi-Fi：可以用于手表的联网和数据传输，方便用户远程管理和控制。</li><li>USB接口：可用于手表与电脑进行数据传输和固件升级等操作。</li></ul><p>数据传输协议：</p><ul><li>Bluetooth Low Energy（BLE）：采用低功耗蓝牙技术，能够满足手表与手机或其他设备之间的数据传输需求，同时能够有效延长手表的使用时间。</li><li>Wi-Fi Direct：可以用于手表与支持Wi-Fi Direct的设备之间的点对点通信，可用于数据传输和控制指令等。</li><li>USB传输协议：采用USB传输协议，可以实现手表与电脑之间的数据传输和固件升级等操作。</li></ul><h2 id="硬件研发">硬件研发</h2><p>硬件研发是将产品设计方案转化为实际产品的关键环节。我们需要制定硬件设计方案，并进行模型制作和样机测试。在测试过程中，我们需要不断地优化硬件配置和结构设计，以提高产品的性能和质量。</p><h2 id="软件研发">软件研发</h2><p>软件研发是将产品核心功能转化为实际软件的重要环节。我们需要制定软件开发计划，并开发出具有核心功能的软件应用程序。在测试过程中，我们需要不断地优化软件性能和用户体验。</p><h2 id="测试和优化">测试和优化</h2><p>测试和优化是确保产品质量的重要环节。我们需要对硬件和软件进行全面的测试，以确保产品符合设计要求，并具有稳定性、耐用性和安全性等特性。在测试过程中，我们需要不断地优化产品的性能和体验。</p><h1 id="市场推广阶段">市场推广阶段</h1><h2 id="市场宣传和推广">市场宣传和推广</h2><p>)市场宣传和推广是让消费者知道产品的重要环节。我们需要通过广告、促销、公关和口碑营销等方式宣传产品，并让目标消费者了解产品的核心功能、优势和价格等信息。</p><p><img src="https://image.asa-world.cn/pic/image-20230629165718320.png" alt="产品海报"></p><h2 id="销售渠道建设">销售渠道建设</h2><p>销售渠道建设是让消费者购买产品的关键步骤。我们需要建立线上和线下的销售渠道，并与零售商、分销商和电商平台等合作，以确保产品能够覆盖目标市场，并达到销售目标。</p><h1 id="售后服务阶段">售后服务阶段</h1><h2 id="技术支持和维修服务">技术支持和维修服务</h2><p>技术支持和维修服务是让消费者对产品有信心和依赖的关键步骤。我们需要建立专业的技术支持团队，并为消费者提供免费的维修和保养服务，以确保产品能够长期稳定运行。</p><h2 id="客户服务和反馈收集">客户服务和反馈收集</h2><p>客户服务和反馈收集是解决消费者问题和收集反馈的关键环节。我们需要建立客户服务中心，并为消费者提供快速和满意的解决方案。同时，我们还需要收集消费者的反馈和意见，以不断改进产品和服务。</p><h1 id="成本分析和定价">成本分析和定价</h1><p>成本分析和定价是确保产品盈利和市场竞争力的关键步骤。在这个阶段，我们需要确定产品的成本和利润，并根据市场需求和竞争情况，制定合理的售价。在这个阶段，我们需要做好以下工作：</p><h2 id="成本分析">成本分析</h2><p>成本分析是对产品开发、制造、营销等环节产生的成本进行分析和评估，以确定产品的成本结构和成本水平。在成本分析中，我们需要考虑以下因素：</p><ul><li>固定成本：不随产量变化而变化的成本，如房租、工资等。</li><li>变动成本：随产量变化而变化的成本，如原材料成本、运输成本等。</li></ul><p>该产品的各成本分析如下表。分析得出，一款健康监护手表的总成本大约在150-400元之间。</p><table><thead><tr><th>成本</th><th>成本类型</th><th>成本内容</th><th>成本水平</th></tr></thead><tbody><tr><td>硬件成本</td><td>变动成本</td><td>如屏幕、电池、传感器、芯片等</td><td>50-100元之间</td></tr><tr><td>研发成本</td><td>固定成本</td><td>包括软件开发、设计和测试等方面的费用，这些成本根据公司规模和团队人员的工资水平而异</td><td>100万-500万元之间</td></tr><tr><td>制造成本</td><td>变动成本</td><td>包括原材料、组装、包装等费用</td><td>通常在硬件成本的基础上增加30%-50%不等</td></tr><tr><td>营销成本</td><td>混合成本</td><td>包括广告宣传、渠道费用、销售人员的薪资等，这些成本根据市场策略和销售目标而定</td><td>通常在总成本的10%-20%之间</td></tr></tbody></table><p>注：对于营销成本，如果公司采用一些长期的宣传手段，如品牌建设、公关活动等，这些费用通常是固定成本；而如果公司采用短期的宣传手段，如促销、网络广告等，则这些费用通常是变动成本。</p><h2 id="定价策略">定价策略</h2><p>定价策略是制定产品售价的关键步骤。在定价策略中，我们需要考虑以下因素：</p><ul><li>目标市场：目标市场的需求和购买力决定了产品的价格敏感度。需要确定手表的市场定位，是高端还是中低端，是面向运动爱好者还是普通消费者等。不同的市场定位会对定价策略产生影响。</li><li>竞争情况：竞争对手的产品价格、品质和服务对产品的售价产生影响。目前市面上智能健康手表在500-4000元不等。</li><li>产品特性：产品的性能、品质和独特性决定了产品的附加价值。</li><li>生产成本：生产成本和利润率决定了产品的最低售价。经上文分析，本产品的成本在150-400元之间。</li><li>市场定位：市场定位和品牌形象对产品的售价产生影响。</li></ul><p>根据以上因素，我们可以制定合理的定价策略，并根据市场反馈和竞争情况，不断进行调整和优化。一款健康监护手表的一般市场价格为总成本的2-3倍之间。假设手表的总成本为300元，采用3倍定价策略，则手表的售价为900元。</p><h1 id="项目风险管理">项目风险管理</h1><p>项目风险管理是为了预测、识别、评估和控制项目中可能出现的各种风险，并为项目成功实施提供支持和保障的关键步骤。在项目风险管理中，我们需要做好以下工作：</p><h2 id="风险识别">风险识别</h2><p>风险识别是对项目中可能出现的各种风险进行识别和分析的关键步骤。我们需要在项目启动阶段和各个阶段的关键节点上，对可能出现的风险进行详细的分析和评估。</p><h2 id="风险评估">风险评估</h2><p>风险评估是对识别出的风险进行评估和分类的关键步骤。我们需要根据风险的影响和概率进行评估和分类，并制定相应的应对措施。</p><h2 id="风险控制">风险控制</h2><p>风险控制是为了减轻或消除风险的影响，采取相应的措施来预防或应对风险的关键步骤。我们需要根据风险的性质和影响，制定相应的应对措施，并加强对风险的监控和管理，确保项目不受到风险的影响。</p><h2 id="风险监控">风险监控</h2><p>风险监控是对项目风险进行跟踪和监控的关键步骤。我们需要对风险的变化和影响进行跟踪和分析，并及时调整和优化风险管理策略，以确保项目能够成功实施。</p><h1 id="总结-2">总结</h1><p>健康监护手腕产品是一款集健康监护、运动跟踪、心理疏导等多种功能于一身的智能手腕设备，其开发需要经历多个阶段，包括项目规划、需求分析、设计开发、测试验收和产品发布等。在项目管理方面，我们需要做好项目规划、需求分析、进度控制、成本管理和风险管理等工作，以确保项目能够按时、按质量、按预算完成。</p>]]></content>
      
      
      <categories>
          
          <category> 顶层设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中小型园区网络构建（一） —— SDN网络及其构建</title>
      <link href="/ed5df591/"/>
      <url>/ed5df591/</url>
      
        <content type="html"><![CDATA[<h1 id="概述-3">概述</h1><p>为了构建一个可以实现互联互通、支持多种网络技术并可提供一定网络功能的中小型网络，通过分析讨论我们的实现规划如下：</p><ol><li>确定拓扑，针对中小型网络，搭建拓扑结构</li><li>确定所需的硬件或软件设备，我们计划在Ubuntu系统中，使用Mininet完成拓扑搭建同时完成各项要求</li><li>实现网络设备的正确的安装和配置，实现各个网络设备之间的互联互通，同时在此基础上，考虑设备之间的冗余、鲁棒性问题</li><li>完成各项网络技术的实现，如：使用SDN网络控制器进行联通、区分子网、使用NAT技术实现外网联通等</li><li>配置网络的安全设置，包括防火墙、访问控制列表等</li><li>安装和配置必要的软件，包括服务器软件、数据库软件等</li></ol><hr><h1 id="SDN网络介绍">SDN网络介绍</h1><p>软件定义网络SDN（Software Defined Network）是由美国斯坦福大学CLean Slate研究组提出的一种新型网络创新架构，可通过软件编程的形式定义和控制网络，其控制平面和转发平面分离及开放性可编程的特点，被认为是网络领域的一场革命，为新型互联网体系结构研究提供了新的实验途径，也极大地推动了下一代互联网的发展。</p><h2 id="SDN网络架构">SDN网络架构</h2><p>SDN的整体架构由下到上（由南到北）分为数据平面、控制平面和应用平面，具体如图2-1所示。其中，数据平面由交换机等网络通用硬件组成，各个网络设备之间通过不同规则形成的SDN数据通路连接；控制平面包含了逻辑上为中心的SDN控制器，它掌握着全局网络信息，负责各种转发规则的控制；应用平面包含着各种基于SDN的网络应用，用户无需关心底层细节就可以编程、部署新应用。</p><p><img src="https://image.asa-world.cn/pic/image-20230206151457029.png" alt="SDN架构图"></p><p>控制平面与数据平面之间通过SDN控制数据平面接口（control-data-plane interface，简称CDPI）进行通信，它具有统一的通信标准，主要负责将控制器中的转发规则下发至转发设备，最主要应用的是OpenFlow协议。控制平面与应用平面之间通过SDN北向接口（northbound interface，简称NBI）进行通信，而NBI并非统一标准，它允许用户根据自身需求定制开发各种网络管理应用。</p><p>SDN中的接口具有开放性，以控制器为逻辑中心，南向接口负责与数据平面进行通信，北向接口负责与应用平面进行通信，东西向接口负责多控制器之间的通信。最主流的南向接口CDPI采用的是OpenFlow协议。OpenFlow最基本的特点是基于流（Flow）的概念来匹配转发规则，每一个交换机都维护一个流表（Flow Table），依据流表中的转发规则进行转发，而流表的建立、维护和下发都是由控制器完成的。针对北向接口，应用程序通过北向接口编程来调用所需的各种网络资源，实现对网络的快速配置和部署。东西向接口使控制器具有可扩展性，为负载均衡和性能提升提供了技术保障。</p><h2 id="SDN的优势">SDN的优势</h2><p>SDN具有传统网络无法比拟的优势：首先，数据控制解耦合使得应用升级与设备更新换代相互独立，加快了新应用的快速部署；其次，网络抽象简化了网络模型,将运营商从繁杂的网络管理中解放出来，能够更加灵活地控制网络；最后，控制的逻辑中心化使用户和运营商等可以通过控制器获取全局网络信息，从而优化网络，提升网络性能。</p><hr><h1 id="SDN设计方案">SDN设计方案</h1><h2 id="需求分析-2">需求分析</h2><p>在我们设计的网络中，为了更加方便的管理网络并且利用编程的方式去设计网络，因此我们需要选择利用SDN网络技术去搭建我们的网络。并且我们所设计的网络是一个划分子网的网络架构，因此我们需要一个路由协议，对我们该网络的报文进行转发处理。而由于原本的OSPF以及RIP动态路由协议不适合部署在SDN网络下，因此我们选择自己构建私有的路由协议实现路由功能，使得转发自动寻路。</p><p>而在路由协议的过程中，我们需要考虑到拓扑的带宽是否充足，是否会发生拥塞，避免某一条链路负载过大的现象发生，因此我们还需要设计流量监控的功能，便于我们分析网络中的链路负载信息，从而实现路由协议选择路径的时候，能够动态的选择最优路径，从而减轻对于我们网络中链路中的负载。</p><h2 id="SDN网络规划">SDN网络规划</h2><p>我们需要将网络划分网段，并且构建核心交换部分，其中主干网拓扑图所示，在我们设计的网络中，包括DHCP服务器、NAPT服务节点S7、web服务器、ftp服务器、以及各个网段，所属网段分别为192.168.1.0/24、192.168.2.0/24、192.168.3.0/24、192.168.4.0/24。</p><p><img src="https://image.asa-world.cn/pic/image-20230206151724843.png" alt="SDN主干网络设计"></p><h2 id="网络路由设计方案">网络路由设计方案</h2><p>在我们设计的网络中，我们将网段分别为192.168.1.0/24、192.168.2.0/24、192.168.3.0/24、192.168.4.0/24。而其中每个子网的网关分别为子网中的openflow交换机。其中所用架构为SDN网络，并没有传统路由器，因此无法使用如OSPF、RIP等动态路由协议，因此为了实现跨子网的联通和交互自动寻路过程，我们选择设计私有的路由协议，从而现实我们的SDN网络中的跨子网通信。</p><p><img src="https://image.asa-world.cn/pic/image-20230206152055294.png" alt="路由协议流程图"></p><p>其中我们所设计的路由协议流程如下：</p><ol><li>当网络中主机发送报文的时候首先判断目的IP是否为自己所在为同一个网络，如果是则按照同一子网进行交互，如果不是则请求网关mac，并发向网关。</li><li>当网关收到报文后，判断是否有流表项匹配可以转发该报文，如果有则按照流表修改mac并进行转发，如果没有则发送给控制器。</li><li>控制器接收到报文后，判断目的地址是否有arp记录，如果没有则，从每个边界交换机向边界发送arp请求，并缓存报文。如果有则跳向5)。</li><li>当控制器收到arp回复报文之后记录源地址的mac和ip对应情况，以及端口、交换机信息。跳向5)</li><li>控制器根据报文的源信息和目的信息（mac地址、交换机、端口号、链路的负载情况），利用Dijkstra算法进行寻路计算，计算出当前的最优路径。</li><li>根据寻路结果进行寻路流表和mac地址更改流表的下发，使得下一次报文可以直接依靠流表进行转发。</li><li>将报文从目的地址记录的交换机和端口送出。</li></ol><blockquote><p>其中在步骤6，下发流表的情况如下所述：</p><ol><li>路径中的第一个openflow交换机：匹配为报文的目的IP地址，且目的mac为网关mac地址；作用为修改报文的mac地址为其IP对应的mac地址以及转发该报文。</li><li>路径中的后续openflow交换机：匹配为报文的目的IP地址；作用为转发报文。</li></ol></blockquote><p>采用以上的路由协议可以实现我们的SDN网络的划分子网的通信，并且依靠下发流表的方式，并且采用Dijkstra算法进行寻路计算，可以使得在一次寻路之后，短时间内依靠流表进行转发，并且转发路径为当前最优，提高我们的减少我们的报文传输延迟和降低我们的丢包率。</p><h2 id="流量监控设计方案">流量监控设计方案</h2><p>在上述我们设计的网络以及路由协议中，我们所用的寻路方法为掌网络拓扑信息后利用Dijkstra算法进行寻路计算，而这之中，需要知道每条链路的权重信息。因此我们这里选择利用控制器定期请求每个交换机的每个端口的byte接收总数，并与历史记录中的byte数相减，从而算出近段时间内的链路负载情况，随后将链路负载情况归一化计算得出每条链路的权重，从而使得我们可以利用Dijkstra算法算出我们的最优报文转发数据。</p><p><img src="https://image.asa-world.cn/pic/image-20230206152103897.png" alt="流量监控流程图"></p><hr><h1 id="SDN网络的实现">SDN网络的实现</h1><h2 id="拓扑搭建">拓扑搭建</h2><details class="folding-tag" blue><summary> 网络和控制器的生成 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">net = Mininet(topo=<span class="literal">None</span>,</span><br><span class="line">              build=<span class="literal">False</span>,</span><br><span class="line">              ipBase=<span class="string">&#x27;192.168.0.0/20&#x27;</span>)</span><br><span class="line"></span><br><span class="line">info(<span class="string">&#x27;*** Adding controller\n&#x27;</span>)</span><br><span class="line">c0 = net.addController(name=<span class="string">&#x27;c0&#x27;</span>,</span><br><span class="line">                       controller=RemoteController,</span><br><span class="line">                       ip=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">                       protocol=<span class="string">&#x27;tcp&#x27;</span>,</span><br><span class="line">                       port=<span class="number">6633</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 交换机的生成 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">info(<span class="string">&#x27;*** Add switches\n&#x27;</span>)</span><br><span class="line">s9 = net.addSwitch(<span class="string">&#x27;s9&#x27;</span>, cls=OVSKernelSwitch, failMode=<span class="string">&#x27;standalone&#x27;</span>)</span><br><span class="line">s5 = net.addSwitch(<span class="string">&#x27;s5&#x27;</span>, cls=OVSKernelSwitch, dpid=<span class="string">&#x27;0000000000000005&#x27;</span>)</span><br><span class="line">s4 = net.addSwitch(<span class="string">&#x27;s4&#x27;</span>, cls=OVSKernelSwitch, dpid=<span class="string">&#x27;0000000000000004&#x27;</span>)</span><br><span class="line">s11 = net.addSwitch(<span class="string">&#x27;s11&#x27;</span>, cls=OVSKernelSwitch, failMode=<span class="string">&#x27;standalone&#x27;</span>)</span><br><span class="line">s3 = net.addSwitch(<span class="string">&#x27;s3&#x27;</span>, cls=OVSKernelSwitch, dpid=<span class="string">&#x27;0000000000000003&#x27;</span>)</span><br><span class="line">s6 = net.addSwitch(<span class="string">&#x27;s6&#x27;</span>, cls=OVSKernelSwitch, dpid=<span class="string">&#x27;0000000000000006&#x27;</span>)</span><br><span class="line">s10 = net.addSwitch(<span class="string">&#x27;s10&#x27;</span>, cls=OVSKernelSwitch, failMode=<span class="string">&#x27;standalone&#x27;</span>)</span><br><span class="line">s7 = net.addSwitch(<span class="string">&#x27;s7&#x27;</span>, cls=OVSKernelSwitch, dpid=<span class="string">&#x27;0000000000000007&#x27;</span>)</span><br><span class="line">s8 = net.addSwitch(<span class="string">&#x27;s8&#x27;</span>, cls=OVSKernelSwitch, failMode=<span class="string">&#x27;standalone&#x27;</span>)</span><br><span class="line">s1 = net.addSwitch(<span class="string">&#x27;s1&#x27;</span>, cls=OVSKernelSwitch, dpid=<span class="string">&#x27;0000000000000001&#x27;</span>)</span><br><span class="line">s2 = net.addSwitch(<span class="string">&#x27;s2&#x27;</span>, cls=OVSKernelSwitch, dpid=<span class="string">&#x27;0000000000000002&#x27;</span>)</span><br><span class="line">dhcp = net.addSwitch(<span class="string">&#x27;dhcp&#x27;</span>, cls=OVSKernelSwitch, dpid=<span class="string">&#x27;0000000000000008&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 主机的生成 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">info(<span class="string">&#x27;*** Add hosts\n&#x27;</span>)</span><br><span class="line">h8 = net.addHost(<span class="string">&#x27;h8&#x27;</span>, cls=Host,ip=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line">h9 = net.addHost(<span class="string">&#x27;h9&#x27;</span>, cls=Host,ip=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line"><span class="comment">#h4 = net.addHost(&#x27;h4&#x27;, cls=Host, ip=&#x27;192.168.2.60/24&#x27;, defaultRoute=&#x27;via 192.168.2.254&#x27;)</span></span><br><span class="line">h4 = net.addHost(<span class="string">&#x27;h4&#x27;</span>, cls=Host,ip=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line">h7 = net.addHost(<span class="string">&#x27;h7&#x27;</span>, cls=Host,ip=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line"><span class="comment">#h1 = net.addHost(&#x27;h1&#x27;, cls=Host, ip=&#x27;192.168.1.60/24&#x27;, defaultRoute=&#x27;via 192.168.1.254&#x27;)</span></span><br><span class="line">h1 = net.addHost(<span class="string">&#x27;h1&#x27;</span>, cls=Host,ip=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line">h3 = net.addHost(<span class="string">&#x27;h3&#x27;</span>, cls=Host,ip=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line">h2 = net.addHost(<span class="string">&#x27;h2&#x27;</span>, cls=Host,ip=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line">h5 = net.addHost(<span class="string">&#x27;h5&#x27;</span>, cls=Host,ip=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line">h6 = net.addHost(<span class="string">&#x27;h6&#x27;</span>, cls=Host,ip=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> NAPT和服务器的网卡接入 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info(<span class="string">&#x27;*** Add NAT\n&#x27;</span>)</span><br><span class="line"><span class="comment"># nat = net.addNAT(&#x27;nat&#x27;, connect=False, ip=&#x27;192.168.5.1/20&#x27;, inNamespace = False)</span></span><br><span class="line">_intf_1 = Intf(intfName1, node=s7, port=<span class="number">1</span>)</span><br><span class="line">_intf_2 = Intf(intfName2, node=s11, port=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 链路连接的生成 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">info(<span class="string">&#x27;*** Add links\n&#x27;</span>)</span><br><span class="line"><span class="comment"># net.addLink(nat, s7, 1, 1)</span></span><br><span class="line">net.addLink(s10, s3, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">net.addLink(s9, s2, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">net.addLink(s8, s1, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">net.addLink(s11, s6, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">net.addLink(s6, s7, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">net.addLink(s7, s4, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">net.addLink(s7, s5, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">net.addLink(s4, s5, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">net.addLink(s4, s1, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">net.addLink(s4, s2, <span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line">net.addLink(s4, s3, <span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line">net.addLink(s1, s5, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">net.addLink(s5, s2, <span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line">net.addLink(s5, s3, <span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">net.addLink(h1, s8, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">net.addLink(s8, h2, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">net.addLink(s8, h3, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">net.addLink(s9, h4, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">net.addLink(s9, h5, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">net.addLink(s9, h6, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">net.addLink(s10, h7, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">net.addLink(s10, h8, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">net.addLink(s10, h9, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">net.addLink(dhcp, s4, <span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">net.addLink(dhcp, s5, <span class="number">2</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 交换机与网络的启动 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">info(<span class="string">&#x27;*** Starting network\n&#x27;</span>)</span><br><span class="line">net.build()</span><br><span class="line">net.start()</span><br><span class="line">info(<span class="string">&#x27;*** Starting controllers\n&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> controller <span class="keyword">in</span> net.controllers:</span><br><span class="line">    controller.start()</span><br><span class="line"></span><br><span class="line">info(<span class="string">&#x27;*** Starting switches\n&#x27;</span>)</span><br><span class="line">net.get(<span class="string">&#x27;s9&#x27;</span>).start([])</span><br><span class="line">net.get(<span class="string">&#x27;s5&#x27;</span>).start([c0])</span><br><span class="line">net.get(<span class="string">&#x27;s4&#x27;</span>).start([c0])</span><br><span class="line">net.get(<span class="string">&#x27;s11&#x27;</span>).start([])</span><br><span class="line">net.get(<span class="string">&#x27;s3&#x27;</span>).start([c0])</span><br><span class="line">net.get(<span class="string">&#x27;s6&#x27;</span>).start([c0])</span><br><span class="line">net.get(<span class="string">&#x27;s10&#x27;</span>).start([])</span><br><span class="line">net.get(<span class="string">&#x27;s7&#x27;</span>).start([c0])</span><br><span class="line">net.get(<span class="string">&#x27;s8&#x27;</span>).start([])</span><br><span class="line">net.get(<span class="string">&#x27;s1&#x27;</span>).start([c0])</span><br><span class="line">net.get(<span class="string">&#x27;s2&#x27;</span>).start([c0])</span><br><span class="line">net.get(<span class="string">&#x27;dhcp&#x27;</span>).start([c0])</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> NAPT和DHCP中继的脚本运行 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    h1.cmd(<span class="string">&quot;chmod 777 /etc/resolv.conf&quot;</span>)</span><br><span class="line">    h1.cmd(<span class="string">&quot;echo $&#x27;nameserver 8.8.8.8\noptions edns0\nsearch localdomain example.org&#x27;  &gt; /etc/resolv.conf&quot;</span>)</span><br><span class="line"></span><br><span class="line">    net.get(<span class="string">&#x27;dhcp&#x27;</span>).cmd(<span class="string">&#x27;ifconfig dhcp-eth1 192.168.0.1 netmask 255.255.255.0&#x27;</span>)</span><br><span class="line">    net.get(<span class="string">&#x27;dhcp&#x27;</span>).cmd(<span class="string">&#x27;ifconfig dhcp-eth2 192.168.0.2 netmask 255.255.255.0&#x27;</span>)</span><br><span class="line">    net.get(<span class="string">&#x27;dhcp&#x27;</span>).cmd(<span class="string">&quot; ip route add 192.168.0.0/21 dev dhcp-eth1 via 192.168.0.254&quot;</span>)</span><br><span class="line">    dhcp.cmd(<span class="string">&quot; arp -s 192.168.0.254 00:00:00:00:11:00&quot;</span>)</span><br><span class="line">    dhcp.cmd(<span class="string">&quot;rm -r /var/lib/dhcp/dhclient.leases&quot;</span>)</span><br><span class="line">    dhcp.cmd(<span class="string">&quot;rm -r /var/lib/dhcp/dhcpd.leases&quot;</span>)</span><br><span class="line">    dhcp.cmd(<span class="string">&quot;service isc-dhcp-server restart &amp;&quot;</span>)</span><br><span class="line">    <span class="built_in">input</span>(<span class="string">&quot;------------Waiting to start controller and enter space to continue------------&quot;</span>)</span><br><span class="line">    info(<span class="string">&#x27;*** Post configure switches and hosts\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> host <span class="keyword">in</span> net.hosts:</span><br><span class="line">        <span class="keyword">if</span> host.params[<span class="string">&#x27;ip&#x27;</span>] == <span class="string">&#x27;0.0.0.0&#x27;</span>:</span><br><span class="line">            get_ip(host)</span><br><span class="line">    info(<span class="string">&#x27;*** Post configure switches and hosts\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    CLI(net)</span><br><span class="line">    net.stop()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ip</span>(<span class="params">host</span>):</span><br><span class="line">    info(<span class="string">&#x27;*** get ip for &#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(host))</span><br><span class="line">    host.cmd(<span class="string">&quot;dhclient &#123;&#125;-eth1&quot;</span>.<span class="built_in">format</span>(host.name))</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="控制器的初始化">控制器的初始化</h2><p>在控初始阶段制器需要进行初始化，才能知晓全局的交换拓扑信息，并且交换机才有默认发给控制器的流表项，随后才能实现我们项目中的报文交互过程，并且这个初始化也能实现我们项目中某条链路断开后的重新掌握信息，增加网络的健壮性。</p><details class="folding-tag" blue><summary> 检测链路的加入和离开 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@set_ev_cls(<span class="params">event.EventLinkAdd</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_link_add_handler</span>(<span class="params">self, event</span>):</span><br><span class="line">    self.logger.info(<span class="string">&quot;!!!A link add.Topology rediscovery...&quot;</span>)</span><br><span class="line">    self.switch_status_handler(event, <span class="string">&#x27;add&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@set_ev_cls(<span class="params">event.EventLinkDelete</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_link_delete_handler</span>(<span class="params">self, event</span>):</span><br><span class="line">    self.logger.info(<span class="string">&quot;!!!A link leaved.Topology rediscovery...&quot;</span>)</span><br><span class="line">    self.switch_status_handler(event, <span class="string">&#x27;dele&#x27;</span>)</span><br><span class="line">    self.dele_flow(event)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele_flow</span>(<span class="params">self, event</span>):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> self.all_switches:</span><br><span class="line">        datapath = s.dp</span><br><span class="line">        ofproto = datapath.ofproto</span><br><span class="line">        parser = datapath.ofproto_parser</span><br><span class="line">        <span class="keyword">match</span> = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP)</span><br><span class="line">        mod = parser.OFPFlowMod(datapath=datapath,</span><br><span class="line">                                command=ofproto.OFPFC_DELETE,</span><br><span class="line">                                out_port=ofproto.OFPP_ANY,</span><br><span class="line">                                out_group=ofproto.OFPG_ANY,</span><br><span class="line">                                <span class="keyword">match</span>=<span class="keyword">match</span>)</span><br><span class="line">        datapath.send_msg(mod)</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 记录链路和交换机并初始化 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">switch_status_handler</span>(<span class="params">self, event, <span class="built_in">type</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&#x27;dele&#x27;</span>:</span><br><span class="line">            self.topo.init()</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">type</span> == <span class="string">&#x27;add&#x27;</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        all_switches = copy.copy(get_switch(self, <span class="literal">None</span>))</span><br><span class="line">        self.all_switches = all_switches</span><br><span class="line">        <span class="comment"># 获取交换机的端口地址</span></span><br><span class="line">        self.switch_adds = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> all_switches:</span><br><span class="line">            <span class="keyword">for</span> port <span class="keyword">in</span> s.ports:</span><br><span class="line">                self.switch_adds[(s.dp.<span class="built_in">id</span>, port.port_no)] = port.hw_addr</span><br><span class="line">        self.nat_switch = copy.copy(get_switch(self, self.nat_switch_id))[<span class="number">0</span>]</span><br><span class="line">        self.logger.info(<span class="string">&#x27;-----------------------------nat switch is: &#123;&#125;----------------&#x27;</span>.<span class="built_in">format</span>(self.nat_switch.dp.<span class="built_in">id</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get all datapathid</span></span><br><span class="line">        <span class="comment"># 获取交换机的ID值</span></span><br><span class="line">        self.topo.switches = [s.dp.<span class="built_in">id</span> <span class="keyword">for</span> s <span class="keyword">in</span> all_switches]</span><br><span class="line"></span><br><span class="line">        self.logger.info(<span class="string">&quot;switches &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.topo.switches))</span><br><span class="line"></span><br><span class="line">        self.datapaths = [s.dp <span class="keyword">for</span> s <span class="keyword">in</span> all_switches]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get link and get port</span></span><br><span class="line"></span><br><span class="line">        all_link_stats = [(l.src.dpid, l.dst.dpid, l.src.port_no, l.dst.port_no) <span class="keyword">for</span> l <span class="keyword">in</span></span><br><span class="line">                          copy.copy(get_link(self, <span class="literal">None</span>))]</span><br><span class="line">        self.all_links = <span class="built_in">dict</span>(</span><br><span class="line">            [[(l.src.dpid, l.src.port_no), [l.dst.dpid, l.dst.port_no]] <span class="keyword">for</span> l <span class="keyword">in</span> copy.copy(get_link(self, <span class="literal">None</span>))])</span><br><span class="line"></span><br><span class="line">        self.logger.info(<span class="string">&quot;Number of links &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(all_link_stats)))</span><br><span class="line"></span><br><span class="line">        all_link_repr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        dhcp_links = copy.copy(get_link(self, self.dhcp_switch))</span><br><span class="line">        self.dhcp_link_stats = [(l.src.dpid, l.dst.dpid, l.src.port_no, l.dst.port_no) <span class="keyword">for</span> l <span class="keyword">in</span> dhcp_links]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;dhcp links:  &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.dhcp_link_stats))</span><br><span class="line">        <span class="keyword">for</span> s1, s2, p1, p2 <span class="keyword">in</span> all_link_stats:</span><br><span class="line">            <span class="comment"># 如果之前没有记录才新增邻居记录，并初始化</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (self.topo.find_adjacent(s1, s2)) <span class="keyword">and</span> <span class="keyword">not</span> (self.topo.find_adjacent(s2, s1)):</span><br><span class="line">                self.topo.set_adjacent(s1, s2, p1)</span><br><span class="line">                self.topo.set_adjacent(s2, s1, p2)</span><br><span class="line">            all_link_repr += <span class="string">&#x27;s&#123;&#125;p&#123;&#125;--s&#123;&#125;p&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(s1, p1, s2, p2)</span><br><span class="line">        self.logger.info(<span class="string">&quot;All links:\n&quot;</span> + all_link_repr)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取边界交换机</span></span><br><span class="line">        self.edge_switch = []</span><br><span class="line">        intra_port = []</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> all_link_stats:</span><br><span class="line">            intra_port.append((l[<span class="number">0</span>], l[<span class="number">2</span>]))</span><br><span class="line">            intra_port.append((l[<span class="number">1</span>], l[<span class="number">3</span>]))</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> all_switches:</span><br><span class="line">            <span class="keyword">for</span> port <span class="keyword">in</span> s.ports:</span><br><span class="line">                <span class="keyword">if</span> (s.dp.<span class="built_in">id</span>, port.port_no) <span class="keyword">not</span> <span class="keyword">in</span> intra_port:</span><br><span class="line">                    self.edge_switch.append((s, port.port_no))</span><br><span class="line">                    self.logger.info(<span class="string">&quot;edge_switch:&#123;&#125;   port:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(s.dp.<span class="built_in">id</span>, port.port_no))</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 交换机初始化 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@set_ev_cls(<span class="params">ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">switch_features_handler</span>(<span class="params">self, ev</span>):</span><br><span class="line">    datapath = ev.msg.datapath</span><br><span class="line">    ofproto = datapath.ofproto</span><br><span class="line">    parser = datapath.ofproto_parser</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> = parser.OFPMatch()</span><br><span class="line">    actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,</span><br><span class="line">                                      ofproto.OFPCML_NO_BUFFER)]</span><br><span class="line">    self.add_flow(datapath, <span class="number">0</span>, <span class="keyword">match</span>, actions)</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="路由协议的RYU实现">路由协议的RYU实现</h2><p>对于我们网络中的路由协议的设计，我们需要首先实现寻路算法的封装，其次再是对与寻路后流表项的添加，而当其中可能未记录目的信息的时候会涉及报文的缓存以及arp报文的发送和处理，最终我们还要实现一个报文进入控制器的一个主要处理的功能函数，从而实现我们网络中划分子网的一个报文传输的路由协议。</p><details class="folding-tag" blue><summary> 寻路算法 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">def</span> <span class="title function_">Dijkstra</span>(<span class="params">self, src_sw, dst_sw, src_port, dst_port</span>):</span><br><span class="line">        <span class="comment"># print(&quot;now we begin to find the shortest paths from sw:&#123;&#125; port:&#123;&#125; to sw:&#123;&#125; port:&#123;&#125; &quot;.format(src_sw, src_port,</span></span><br><span class="line">        <span class="comment">#                                                                                             dst_sw,</span></span><br><span class="line">        <span class="comment">#                                                                                             dst_port))</span></span><br><span class="line">        bucket = CircleBucket(self.max_weight + <span class="number">1</span>)  <span class="comment"># 创建循环桶对象</span></span><br><span class="line">        bucket.updateBucket(<span class="number">0</span>, src_sw)  <span class="comment"># 将源点先加入桶</span></span><br><span class="line">        <span class="comment"># pre用于存储路径 并将所有交换机在路径的前置结点初始化为None</span></span><br><span class="line">        pre = &#123;&#125;</span><br><span class="line">        <span class="comment"># dis用于存储距离 并将所有交换机离源交换机距离初始化为9999999</span></span><br><span class="line">        dis = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> sw <span class="keyword">in</span> self.switches:</span><br><span class="line">            pre[sw] = <span class="literal">None</span></span><br><span class="line">            dis[sw] = <span class="number">9999999</span></span><br><span class="line">        dis[src_sw] = <span class="number">0</span>  <span class="comment"># 将源结点的距离初始化为0</span></span><br><span class="line">        flag = <span class="number">1</span>  <span class="comment"># flag 用于判断是否找到目的交换机 因为这是一个单源单宿问题</span></span><br><span class="line">        <span class="keyword">while</span> flag == <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">not</span> bucket.checkBucketEmpty():  <span class="comment"># 若还没找到目的交换机或桶内结点数不为空则继续循环</span></span><br><span class="line">            sw = bucket.getFirst()  <span class="comment"># 取出现在离源交换机最近的交换机</span></span><br><span class="line">            <span class="keyword">if</span> sw == dst_sw:  <span class="comment"># 判断取出的交换机是不是目的交换机 如果是将flag置0并退出循环</span></span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> u <span class="keyword">in</span> self.switches:</span><br><span class="line">                <span class="keyword">if</span> u <span class="keyword">in</span> (self.get_adjacent(sw)).keys():</span><br><span class="line">                    <span class="comment"># print(self.get_Adjdict(sw)[u])</span></span><br><span class="line">                    <span class="comment"># 遍历取出交换机的所有邻接交换机 并更新循环桶内数据</span></span><br><span class="line">                    <span class="keyword">if</span> dis[sw] + self.get_adjacent(sw)[u][<span class="number">1</span>] &lt; dis[u]:  <span class="comment"># 判断邻接交换机离源交换机的距离有没有缩短</span></span><br><span class="line">                        dis[u] = dis[sw] + self.get_adjacent(sw)[u][<span class="number">1</span>]</span><br><span class="line">                        pre[u] = sw  <span class="comment"># 设置前置交换机</span></span><br><span class="line">                        bucket.updateBucket(dis[u], u)  <span class="comment"># 将桶数据数据更新</span></span><br><span class="line">        spath = [dst_sw]</span><br><span class="line">        sw = dst_sw</span><br><span class="line">        <span class="keyword">while</span> pre[sw] != <span class="literal">None</span>:  <span class="comment"># 通过pre找出最短路径</span></span><br><span class="line">            sw = pre[sw]</span><br><span class="line">            spath.append(sw)</span><br><span class="line">        spath.reverse()  <span class="comment"># 将路径反转为从到源交换机到目的交换机</span></span><br><span class="line">        <span class="comment"># print(&quot;Find done.The shortest path :&quot;, end=&quot; &quot;)</span></span><br><span class="line">        <span class="comment"># self.printPath(spath)  # 输出最短路径</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 现在我们已经通过Dijkstra算法找到最短路径了，接下来把该路径转化为控制器配置的格式</span></span><br><span class="line">        <span class="comment"># 交换机之间路径的配置格式如右 (src_sw,inport,outport)-&gt;.......-&gt;(dst_sw,inport,outport) 我们要把所有路经的交换机都记录为左边的格式</span></span><br><span class="line">        cpath = []  <span class="comment"># configure path</span></span><br><span class="line">        inport = src_port</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(spath) - <span class="number">1</span>):</span><br><span class="line">            s1 = spath[i]</span><br><span class="line">            s2 = spath[i + <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># get s1-&gt;s2 outport</span></span><br><span class="line">            outport = self.get_adjacent(s1)[s2][<span class="number">0</span>]</span><br><span class="line">            cpath.append((s1, inport, outport))</span><br><span class="line">            inport = self.get_adjacent(s2)[s1][<span class="number">0</span>]</span><br><span class="line">        cpath.append((dst_sw, inport, dst_port))</span><br><span class="line">        <span class="comment"># return cpath can configure switch&#x27;s path  返回可以配置的路径</span></span><br><span class="line">        <span class="keyword">return</span> cpath</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">定义一个循环桶的类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 建一个指定容量的桶，存放(w[u],u)类型数据并能根据w[u]的大小放入相应的位置。  w[u]为结点u离源点的位置</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 能对桶内的数据进行更新修改，并重新放置。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3. 在取出一个数据后，能自动将桶的头指针位置转移到桶内w[u]最小的桶。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CircleBucket</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, buckets_num</span>):</span><br><span class="line">        <span class="comment"># 桶中存放数据的个数</span></span><br><span class="line">        self.buckets_num = buckets_num</span><br><span class="line">        <span class="comment"># 创建桶数组 用于存放(w[u],[u])类型数据 因为距离源点同一距离的点不一定只有一个</span></span><br><span class="line">        self.buckets = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.buckets_num)]</span><br><span class="line">        <span class="comment"># 桶的头指针位置 默认为0</span></span><br><span class="line">        self.first_bucket = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 桶中所以数据个数</span></span><br><span class="line">        self.data_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新桶的头指针位置</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">updateFirst</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 如果现在头指针位置的列表为空</span></span><br><span class="line">        <span class="keyword">if</span> self.checkListEmpty(self.first_bucket):</span><br><span class="line">            self.first_bucket = (self.first_bucket + <span class="number">1</span>) % self.buckets_num</span><br><span class="line">            <span class="keyword">while</span> self.checkListEmpty(self.first_bucket):</span><br><span class="line">                self.first_bucket = (self.first_bucket + <span class="number">1</span>) % self.buckets_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获得桶的头指针的数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getFirst</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 先进行头指针的更新</span></span><br><span class="line">        self.updateFirst()</span><br><span class="line">        <span class="comment"># 如果列表不为空才进行操作</span></span><br><span class="line">        self.data_num -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.buckets[self.first_bucket].pop()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 向桶内更新数据 将w位置的桶内加入u 即源结点到u的距离为w</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">updateBucket</span>(<span class="params">self, w, u</span>):</span><br><span class="line">        <span class="comment"># 向桶内加入数据 每个桶里面都是一个列表</span></span><br><span class="line">        self.buckets[w % self.buckets_num].append(u)</span><br><span class="line">        self.data_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkListEmpty</span>(<span class="params">self, w</span>):</span><br><span class="line">        <span class="comment"># 如果列表为空 返回true</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.buckets[w]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断桶内是否有数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkBucketEmpty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.data_num == <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 添加流表 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_flow</span>(<span class="params">self, datapath, priority, <span class="keyword">match</span>, actions, buffer_id=<span class="literal">None</span>, idle_timeout=<span class="number">0</span>, hard_timeout=<span class="number">0</span></span>):</span><br><span class="line">    ofproto = datapath.ofproto</span><br><span class="line">    parser = datapath.ofproto_parser</span><br><span class="line"></span><br><span class="line">    inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,</span><br><span class="line">                                         actions)]</span><br><span class="line">    <span class="keyword">if</span> buffer_id:</span><br><span class="line">        mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,</span><br><span class="line">                                priority=priority, <span class="keyword">match</span>=<span class="keyword">match</span>, idle_timeout=idle_timeout,</span><br><span class="line">                                hard_timeout=hard_timeout,</span><br><span class="line">                                instructions=inst)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mod = parser.OFPFlowMod(datapath=datapath, priority=priority, idle_timeout=idle_timeout,</span><br><span class="line">                                hard_timeout=hard_timeout,</span><br><span class="line">                                <span class="keyword">match</span>=<span class="keyword">match</span>, instructions=inst)</span><br><span class="line">    datapath.send_msg(mod)</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 配置路径的流表 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">configure_path</span>(<span class="params">self, shortest_path, msg, origin_mac, dst_mac, dst_ip</span>):</span><br><span class="line">    <span class="comment"># configure shortest path to switches</span></span><br><span class="line">    recv_datapath = msg.datapath</span><br><span class="line">    <span class="keyword">for</span> switch, inport, outport <span class="keyword">in</span> shortest_path:</span><br><span class="line">        flow_list = []</span><br><span class="line">        datapath = self._find_dp(<span class="built_in">int</span>(switch))</span><br><span class="line">        actions = [datapath.ofproto_parser.OFPActionOutput(outport)]</span><br><span class="line">        <span class="comment"># 目的IP为外网报文</span></span><br><span class="line">        <span class="comment"># 第一个交换机</span></span><br><span class="line">        pkt = packet.Packet(msg.data)</span><br><span class="line">        pkt_ipv4 = pkt.get_protocol(ipv4.ipv4)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(switch) == recv_datapath.<span class="built_in">id</span>:</span><br><span class="line">            <span class="keyword">if</span> dst_ip == self.nat_ip:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                pkt_tcp = pkt.get_protocol(tcp.tcp)</span><br><span class="line">                pkt_udp = pkt.get_protocol(udp.udp)</span><br><span class="line">                <span class="keyword">if</span> pkt_tcp:</span><br><span class="line">                    tcp_match = datapath.ofproto_parser.OFPMatch(in_port=inport, ipv4_dst=dst_ip,</span><br><span class="line">                                                                 tcp_dst=pkt_tcp.dst_port,</span><br><span class="line">                                                                 eth_type=ether_types.ETH_TYPE_IP,</span><br><span class="line">                                                                 ip_proto=in_proto.IPPROTO_TCP)</span><br><span class="line">                    tcp_actions = [datapath.ofproto_parser.OFPActionSetField(</span><br><span class="line">                        ipv4_dst=self.tcp_in[pkt_tcp.dst_port][<span class="number">0</span>]), datapath.ofproto_parser.OFPActionSetField(</span><br><span class="line">                        tcp_dst=self.tcp_in[pkt_tcp.dst_port][<span class="number">1</span>]),</span><br><span class="line">                                      datapath.ofproto_parser.OFPActionSetField(eth_dst=dst_mac)] + actions</span><br><span class="line">                    dst_ip = self.tcp_in[pkt_tcp.dst_port][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">                    flow_list.append((tcp_actions, tcp_match))</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> pkt_udp:</span><br><span class="line">                    udp_match = datapath.ofproto_parser.OFPMatch(in_port=inport, ipv4_dst=dst_ip,</span><br><span class="line"></span><br><span class="line">                                                                 udp_dst=pkt_udp.dst_port,</span><br><span class="line">                                                                 eth_type=ether_types.ETH_TYPE_IP,</span><br><span class="line">                                                                 ip_proto=in_proto.IPPROTO_UDP)</span><br><span class="line"></span><br><span class="line">                    udp_actions = [datapath.ofproto_parser.OFPActionSetField(</span><br><span class="line">                        ipv4_dst=self.udp_in[pkt_udp.dst_port][<span class="number">0</span>]), datapath.ofproto_parser.OFPActionSetField(</span><br><span class="line">                        udp_dst=self.udp_in[pkt_udp.dst_port][<span class="number">1</span>]),</span><br><span class="line">                                      datapath.ofproto_parser.OFPActionSetField(eth_dst=dst_mac)] + actions</span><br><span class="line">                    dst_ip = self.udp_in[pkt_udp.dst_port][<span class="number">0</span>]</span><br><span class="line">                    <span class="comment"># print(self.udp_in)</span></span><br><span class="line">                    <span class="comment"># print(self.udp_out)</span></span><br><span class="line">                    flow_list.append((udp_actions, udp_match))</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">int</span>(switch) == self.nat_switch_id <span class="keyword">and</span> <span class="keyword">not</span> self.ipINvpn(pkt_ipv4.dst, msg.<span class="keyword">match</span>[<span class="string">&#x27;in_port&#x27;</span>], datapath.<span class="built_in">id</span>):</span><br><span class="line"></span><br><span class="line">                pkt_tcp = pkt.get_protocol(tcp.tcp)</span><br><span class="line">                pkt_udp = pkt.get_protocol(udp.udp)</span><br><span class="line">                <span class="keyword">if</span> pkt_tcp:</span><br><span class="line">                    tcp_match = datapath.ofproto_parser.OFPMatch(in_port=inport, ipv4_src=pkt_ipv4.src,</span><br><span class="line">                                                                 tcp_src=pkt_tcp.src_port, ipv4_dst=dst_ip,</span><br><span class="line">                                                                 eth_type=ether_types.ETH_TYPE_IP,</span><br><span class="line">                                                                 ip_proto=in_proto.IPPROTO_TCP)</span><br><span class="line">                    tcp_actions = [datapath.ofproto_parser.OFPActionSetField(ipv4_src=self.nat_ip),</span><br><span class="line">                                   datapath.ofproto_parser.OFPActionSetField(</span><br><span class="line">                                       tcp_src=self.tcp_out[(pkt_ipv4.src, pkt_tcp.src_port)])] + actions</span><br><span class="line">                    flow_list.append((tcp_actions, tcp_match))</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> pkt_udp:</span><br><span class="line">                    udp_match = datapath.ofproto_parser.OFPMatch(in_port=inport, ipv4_src=pkt_ipv4.src,</span><br><span class="line">                                                                 udp_src=pkt_udp.src_port, ipv4_dst=dst_ip,</span><br><span class="line">                                                                 eth_type=ether_types.ETH_TYPE_IP,</span><br><span class="line">                                                                 ip_proto=in_proto.IPPROTO_UDP)</span><br><span class="line">                    udp_actions = [datapath.ofproto_parser.OFPActionSetField(ipv4_src=self.nat_ip),</span><br><span class="line">                                   datapath.ofproto_parser.OFPActionSetField(</span><br><span class="line">                                       udp_src=self.udp_out[(pkt_ipv4.src, pkt_udp.src_port)])] + actions</span><br><span class="line">                    flow_list.append((udp_actions, udp_match))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">match</span> = datapath.ofproto_parser.OFPMatch(in_port=inport, eth_dst=origin_mac, ipv4_dst=dst_ip,</span><br><span class="line">                                                         eth_type=ether_types.ETH_TYPE_IP)</span><br><span class="line">                actions.insert(<span class="number">0</span>, datapath.ofproto_parser.OFPActionSetField(eth_dst=dst_mac))</span><br><span class="line">                flow_list.append((actions, <span class="keyword">match</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> self.ipInSubnet(dst_ip, self.net_ip) :</span><br><span class="line">            <span class="comment"># 如果是nat交换机 下发更改IP和端口的流表</span></span><br><span class="line">            <span class="keyword">if</span> switch == self.nat_switch_id:</span><br><span class="line">                pkt_tcp = pkt.get_protocol(tcp.tcp)</span><br><span class="line">                pkt_udp = pkt.get_protocol(udp.udp)</span><br><span class="line">                <span class="keyword">if</span> pkt_tcp:</span><br><span class="line">                    tcp_match = datapath.ofproto_parser.OFPMatch(in_port=inport, ipv4_src=pkt_ipv4.src,</span><br><span class="line">                                                                 tcp_src=pkt_tcp.src_port, ipv4_dst=dst_ip,</span><br><span class="line">                                                                 eth_type=ether_types.ETH_TYPE_IP,</span><br><span class="line">                                                                 ip_proto=in_proto.IPPROTO_TCP)</span><br><span class="line">                    tcp_actions = [datapath.ofproto_parser.OFPActionSetField(ipv4_src=self.nat_ip),</span><br><span class="line">                                   datapath.ofproto_parser.OFPActionSetField(</span><br><span class="line">                                       tcp_src=self.tcp_out[(pkt_ipv4.src, pkt_tcp.src_port)])] + actions</span><br><span class="line">                    flow_list.append((tcp_actions, tcp_match))</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> pkt_udp:</span><br><span class="line">                    udp_match = datapath.ofproto_parser.OFPMatch(in_port=inport, ipv4_src=pkt_ipv4.src,</span><br><span class="line">                                                                 udp_src=pkt_udp.src_port, ipv4_dst=dst_ip,</span><br><span class="line">                                                                 eth_type=ether_types.ETH_TYPE_IP,</span><br><span class="line">                                                                 ip_proto=in_proto.IPPROTO_UDP)</span><br><span class="line">                    udp_actions = [datapath.ofproto_parser.OFPActionSetField(ipv4_src=self.nat_ip),</span><br><span class="line">                                   datapath.ofproto_parser.OFPActionSetField(</span><br><span class="line">                                       udp_src=self.udp_out[(pkt_ipv4.src, pkt_udp.src_port)])] + actions</span><br><span class="line">                    flow_list.append((udp_actions, udp_match))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">match</span> = datapath.ofproto_parser.OFPMatch(in_port=inport, eth_dst=dst_mac,</span><br><span class="line">                                                         eth_type=ether_types.ETH_TYPE_IP)</span><br><span class="line">                flow_list.append((actions, <span class="keyword">match</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">match</span> = datapath.ofproto_parser.OFPMatch(in_port=inport, ipv4_dst=dst_ip,</span><br><span class="line">                                                     eth_type=ether_types.ETH_TYPE_IP)</span><br><span class="line">            flow_list.append((actions, <span class="keyword">match</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> datapath <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> actions, <span class="keyword">match</span> <span class="keyword">in</span> flow_list:</span><br><span class="line">            self.add_flow(datapath, <span class="number">1</span>, <span class="keyword">match</span>, actions, hard_timeout=self.hard_timeout)</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> ARP报文处理 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">arp_handler</span>(<span class="params">self, msg</span>):</span><br><span class="line"></span><br><span class="line">    datapath = msg.datapath</span><br><span class="line">    ofproto = datapath.ofproto</span><br><span class="line">    parser = datapath.ofproto_parser</span><br><span class="line">    in_port = msg.<span class="keyword">match</span>[<span class="string">&#x27;in_port&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    pkt = packet.Packet(msg.data)</span><br><span class="line"></span><br><span class="line">    eth = pkt.get_protocols(ethernet.ethernet)[<span class="number">0</span>]</span><br><span class="line">    arp_pkt = pkt.get_protocol(arp.arp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> eth:</span><br><span class="line">        eth_dst = eth.dst</span><br><span class="line">        eth_src = eth.src</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> eth_dst == mac.BROADCAST_STR <span class="keyword">and</span> arp_pkt:</span><br><span class="line">        <span class="comment"># target ip</span></span><br><span class="line">        arp_dst_ip = arp_pkt.dst_ip</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> arp_pkt:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># specify the operation that the sender is performing:1 for request,2 for reply</span></span><br><span class="line">        opcode = arp_pkt.opcode</span><br><span class="line"></span><br><span class="line">        <span class="comment"># src ip</span></span><br><span class="line">        arp_src_ip = arp_pkt.src_ip</span><br><span class="line">        <span class="comment"># dst ip</span></span><br><span class="line">        arp_dst_ip = arp_pkt.dst_ip</span><br><span class="line"></span><br><span class="line">        <span class="comment"># arp请求</span></span><br><span class="line">        <span class="keyword">if</span> opcode == arp.ARP_REQUEST:</span><br><span class="line">            <span class="keyword">if</span> arp_dst_ip == self.nat_ip <span class="keyword">or</span> self.ipINvpn(arp_dst_ip, in_port, datapath.<span class="built_in">id</span>):</span><br><span class="line">                <span class="comment"># send arp reply from in port</span></span><br><span class="line">                actions = [parser.OFPActionOutput(in_port)]</span><br><span class="line">                arp_reply = packet.Packet()</span><br><span class="line"></span><br><span class="line">                arp_reply.add_protocol(ethernet.ethernet(</span><br><span class="line">                    ethertype=eth.ethertype,</span><br><span class="line">                    dst=eth_src,</span><br><span class="line">                    src=self.switch_adds[(self.nat_switch_id, self.nat_switch_port)]))</span><br><span class="line"></span><br><span class="line">                <span class="comment"># add arp protocol</span></span><br><span class="line">                arp_reply.add_protocol(arp.arp(</span><br><span class="line">                    opcode=arp.ARP_REPLY,</span><br><span class="line">                    src_mac=self.switch_adds[(self.nat_switch_id, self.nat_switch_port)],</span><br><span class="line">                    src_ip=arp_dst_ip,</span><br><span class="line">                    dst_mac=eth_src,</span><br><span class="line">                    dst_ip=arp_src_ip))</span><br><span class="line"></span><br><span class="line">                <span class="comment"># serialize the packet to binary format 0101010101</span></span><br><span class="line">                arp_reply.serialize()</span><br><span class="line">                <span class="comment"># arp reply</span></span><br><span class="line">                out = parser.OFPPacketOut(</span><br><span class="line">                    datapath=datapath,</span><br><span class="line">                    buffer_id=ofproto.OFP_NO_BUFFER,</span><br><span class="line">                    in_port=ofproto.OFPP_CONTROLLER,</span><br><span class="line">                    actions=actions, data=arp_reply.data)</span><br><span class="line">                datapath.send_msg(out)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> arp_dst_ip <span class="keyword">in</span> self.arp_table:</span><br><span class="line">                <span class="comment"># send arp reply from in port</span></span><br><span class="line">                actions = [parser.OFPActionOutput(in_port)]</span><br><span class="line">                arp_reply = packet.Packet()</span><br><span class="line"></span><br><span class="line">                arp_reply.add_protocol(ethernet.ethernet(</span><br><span class="line">                    ethertype=eth.ethertype,</span><br><span class="line">                    dst=eth_src,</span><br><span class="line">                    src=self.arp_table[arp_dst_ip][<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">                arp_reply.add_protocol(arp.arp(</span><br><span class="line">                    opcode=arp.ARP_REPLY,</span><br><span class="line">                    src_mac=self.arp_table[arp_dst_ip][<span class="number">0</span>],</span><br><span class="line">                    src_ip=arp_dst_ip,</span><br><span class="line">                    dst_mac=eth_src,</span><br><span class="line">                    dst_ip=arp_src_ip))</span><br><span class="line">                <span class="comment"># serialize the packet to binary format 0101010101</span></span><br><span class="line">                arp_reply.serialize()</span><br><span class="line">                <span class="comment"># arp reply</span></span><br><span class="line">                out = parser.OFPPacketOut(</span><br><span class="line">                    datapath=datapath,</span><br><span class="line">                    buffer_id=ofproto.OFP_NO_BUFFER,</span><br><span class="line">                    in_port=ofproto.OFPP_CONTROLLER,</span><br><span class="line">                    actions=actions, data=arp_reply.data)</span><br><span class="line">                datapath.send_msg(out)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> in_port != self.nat_switch_port <span class="keyword">or</span> datapath.<span class="built_in">id</span> != self.nat_switch_id:</span><br><span class="line">                <span class="comment"># send arp reply from in port</span></span><br><span class="line">                actions = [parser.OFPActionOutput(in_port)]</span><br><span class="line">                arp_reply = packet.Packet()</span><br><span class="line"></span><br><span class="line">                arp_reply.add_protocol(ethernet.ethernet(</span><br><span class="line">                    ethertype=eth.ethertype,</span><br><span class="line">                    dst=eth_src,</span><br><span class="line">                    src=self.switch_adds[(datapath.<span class="built_in">id</span>, in_port)]))</span><br><span class="line"></span><br><span class="line">                <span class="comment"># add arp protocol</span></span><br><span class="line">                arp_reply.add_protocol(arp.arp(</span><br><span class="line">                    opcode=arp.ARP_REPLY,</span><br><span class="line">                    src_mac=self.switch_adds[(datapath.<span class="built_in">id</span>, in_port)],</span><br><span class="line">                    src_ip=arp_dst_ip,</span><br><span class="line">                    dst_mac=eth_src,</span><br><span class="line">                    dst_ip=arp_src_ip))</span><br><span class="line"></span><br><span class="line">                <span class="comment"># serialize the packet to binary format 0101010101</span></span><br><span class="line">                arp_reply.serialize()</span><br><span class="line">                <span class="comment"># arp reply</span></span><br><span class="line">                out = parser.OFPPacketOut(</span><br><span class="line">                    datapath=datapath,</span><br><span class="line">                    buffer_id=ofproto.OFP_NO_BUFFER,</span><br><span class="line">                    in_port=ofproto.OFPP_CONTROLLER,</span><br><span class="line">                    actions=actions, data=arp_reply.data)</span><br><span class="line">                datapath.send_msg(out)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 缓存报文 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存储并发送arp</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stor</span>(<span class="params">self, msg</span>):</span><br><span class="line">    <span class="comment"># msg = ev.msg</span></span><br><span class="line">    datapath = msg.datapath</span><br><span class="line">    port = msg.<span class="keyword">match</span>[<span class="string">&#x27;in_port&#x27;</span>]</span><br><span class="line">    pkt = packet.Packet(msg.data)</span><br><span class="line">    pkt_ethernet = pkt.get_protocol(ethernet.ethernet)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> pkt_ethernet:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    eth = pkt.get_protocols(ethernet.ethernet)[<span class="number">0</span>]</span><br><span class="line">    eth_dst = eth.dst</span><br><span class="line">    eth_src = eth.src</span><br><span class="line">    pkt_ipv4 = pkt.get_protocol(ipv4.ipv4)</span><br><span class="line">    <span class="comment"># src ip</span></span><br><span class="line">    src_ip = copy.copy(pkt_ipv4.src)</span><br><span class="line">    <span class="comment"># dst ip</span></span><br><span class="line">    dst_ip = copy.copy(pkt_ipv4.dst)</span><br><span class="line">    parser = datapath.ofproto_parser</span><br><span class="line">    <span class="comment"># 不在私网内</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.ipInSubnet(dst_ip, self.net_ip) <span class="keyword">and</span> <span class="keyword">not</span> (</span><br><span class="line">            self.ipInSubnet(pkt_ipv4.dst, <span class="string">&quot;/&quot;</span>.join((self.nat_ip, self.nat_mask)))):</span><br><span class="line">        <span class="comment"># 修改原ip</span></span><br><span class="line">        dst_ip = self.net_getaway_ip</span><br><span class="line">    <span class="comment"># 存储报文</span></span><br><span class="line">    self.buffer.append([src_ip, dst_ip, <span class="number">20</span>, msg])</span><br><span class="line">    self.logger.info(<span class="string">&quot;\n----------------Stor a Packet and Send ARP in edge_switch for &#123;&#125;----------------&quot;</span>.<span class="built_in">format</span>(dst_ip))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送arp</span></span><br><span class="line">    <span class="keyword">for</span> s, port_no <span class="keyword">in</span> self.edge_switch:</span><br><span class="line">        <span class="keyword">if</span> s.dp.<span class="built_in">id</span> == datapath.<span class="built_in">id</span> <span class="keyword">and</span> port == port_no:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        self.logger.info(<span class="string">&quot;Send ARP in edge_switch:&#123;&#125;  port:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(s.dp.<span class="built_in">id</span>, port_no))</span><br><span class="line"></span><br><span class="line">        actions = [parser.OFPActionOutput(port_no)]</span><br><span class="line">        arp_send = packet.Packet()</span><br><span class="line"></span><br><span class="line">        arp_send.add_protocol(ethernet.ethernet(</span><br><span class="line">            ethertype=<span class="number">2054</span>,</span><br><span class="line">            dst=<span class="string">&quot;ff:ff:ff:ff:ff:ff&quot;</span>,</span><br><span class="line">            src=eth_src <span class="keyword">if</span> s.dp.<span class="built_in">id</span>!=self.nat_switch_id <span class="keyword">else</span> self.switch_adds[(self.nat_switch_id, self.nat_switch_port)]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># add arp protocol</span></span><br><span class="line">        arp_send.add_protocol(arp.arp(</span><br><span class="line">            opcode=arp.ARP_REQUEST,</span><br><span class="line">            src_mac=eth_src <span class="keyword">if</span> s.dp.<span class="built_in">id</span>!=self.nat_switch_id <span class="keyword">else</span> self.switch_adds[(self.nat_switch_id, self.nat_switch_port)],</span><br><span class="line">            src_ip=src_ip,</span><br><span class="line">            dst_mac=<span class="string">&quot;00:00:00:00:00:00&quot;</span>,</span><br><span class="line">            dst_ip=dst_ip))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># serialize the packet to binary format 0101010101</span></span><br><span class="line">        arp_send.serialize()</span><br><span class="line">        <span class="comment"># arp reply</span></span><br><span class="line">        out = parser.OFPPacketOut(</span><br><span class="line">            datapath=s.dp,</span><br><span class="line">            buffer_id=s.dp.ofproto.OFP_NO_BUFFER,</span><br><span class="line">            in_port=s.dp.ofproto.OFPP_CONTROLLER,</span><br><span class="line">            actions=actions, data=arp_send.data)</span><br><span class="line">        <span class="comment"># print(dst_ip)</span></span><br><span class="line">        s.dp.send_msg(out)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 有ARP回复后查询缓存数据并发送 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查寻发送</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_send</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.buffer) - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        self.logger.info(</span><br><span class="line">            <span class="string">&quot;Find a packet in buffer can be sent from &#123;&#125; to &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.buffer[i][<span class="number">0</span>], self.buffer[i][<span class="number">1</span>]))</span><br><span class="line">        curr_switch = self.buffer[i][<span class="number">3</span>].datapath.<span class="built_in">id</span></span><br><span class="line">        in_port = self.buffer[i][<span class="number">3</span>].<span class="keyword">match</span>[<span class="string">&#x27;in_port&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> self.buffer[i][<span class="number">0</span>] <span class="keyword">in</span> self.arp_table <span class="keyword">and</span> self.buffer[i][<span class="number">1</span>] <span class="keyword">in</span> self.arp_table:</span><br><span class="line">            <span class="keyword">if</span> self.buffer[i][<span class="number">1</span>] == self.net_getaway_ip:</span><br><span class="line">                pkt = packet.Packet(self.buffer[i][<span class="number">3</span>].data)</span><br><span class="line">                eth = pkt.get_protocols(ethernet.ethernet)[<span class="number">0</span>]</span><br><span class="line">                parser = self.nat_switch.dp.ofproto_parser</span><br><span class="line">                pkt_ipv4 = pkt.get_protocol(ipv4.ipv4)</span><br><span class="line">                pkt_icmp = pkt.get_protocol(icmp.icmp)</span><br><span class="line">                pkt_tcp = pkt.get_protocol(tcp.tcp)</span><br><span class="line">                pkt_udp = pkt.get_protocol(udp.udp)</span><br><span class="line">                src_ip = copy.copy(pkt_ipv4.src)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 修改mac</span></span><br><span class="line">                eth.dst = self.arp_table[self.net_getaway_ip][<span class="number">0</span>]</span><br><span class="line">                <span class="comment"># 修改原ip</span></span><br><span class="line">                pkt_ipv4.src = self.nat_ip</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> pkt_icmp:</span><br><span class="line">                    <span class="comment"># 修改id</span></span><br><span class="line">                    pkt_icmp.data.<span class="built_in">id</span> = self.icmp_out[(src_ip, pkt_icmp.data.<span class="built_in">id</span>)]</span><br><span class="line">                    self.ICMPTTLinit(pkt_icmp.data.<span class="built_in">id</span>)</span><br><span class="line">                    pkt_icmp.csum = <span class="number">0</span></span><br><span class="line">                <span class="keyword">elif</span> pkt_tcp:</span><br><span class="line">                    <span class="comment"># 修改id</span></span><br><span class="line">                    pkt_tcp.src_port = self.tcp_out[(src_ip, pkt_tcp.src_port)]</span><br><span class="line">                    pkt_tcp.csum = <span class="number">0</span></span><br><span class="line">                <span class="keyword">elif</span> pkt_udp:</span><br><span class="line">                    <span class="comment"># 修改id</span></span><br><span class="line">                    pkt_udp.src_port = self.udp_out[(src_ip, pkt_udp.src_port)]</span><br><span class="line">                    pkt_udp.csum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">                pkt.serialize()</span><br><span class="line"></span><br><span class="line">                actions = [parser.OFPActionOutput(self.nat_switch_port)]</span><br><span class="line">                self.send_out(self.nat_switch, actions, pkt.data)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> in_port == self.nat_switch_port <span class="keyword">and</span> curr_switch == self.nat_switch_id:</span><br><span class="line">                pkt = packet.Packet(self.buffer[i][<span class="number">3</span>].data)</span><br><span class="line">                eth = pkt.get_protocols(ethernet.ethernet)[<span class="number">0</span>]</span><br><span class="line">                parser = self.nat_switch.dp.ofproto_parser</span><br><span class="line">                pkt_ipv4 = pkt.get_protocol(ipv4.ipv4)</span><br><span class="line">                <span class="built_in">print</span>(pkt_ipv4.dst)</span><br><span class="line">                dst_mac, dst_switch_id, final_port = self.arp_table[pkt_ipv4.dst]</span><br><span class="line">                <span class="comment"># print(&quot;find switch &#123;&#125; port &#123;&#125; &quot;.format(dst_switch_id, final_port))</span></span><br><span class="line">                eth.dst = dst_mac</span><br><span class="line">                <span class="built_in">print</span>(eth.dst)</span><br><span class="line">                pkt.serialize()</span><br><span class="line">                actions = [parser.OFPActionOutput(final_port)]</span><br><span class="line">                dst_switch = copy.copy(get_switch(self, dst_switch_id))[<span class="number">0</span>]</span><br><span class="line">                out = parser.OFPPacketOut(</span><br><span class="line">                    datapath=dst_switch.dp,</span><br><span class="line">                    buffer_id=dst_switch.dp.ofproto.OFP_NO_BUFFER,</span><br><span class="line">                    in_port=dst_switch.dp.ofproto.OFPP_CONTROLLER,</span><br><span class="line">                    actions=actions, data=pkt.data)</span><br><span class="line">                dst_switch.dp.send_msg(out)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.default_handler(curr_switch, in_port, self.buffer[i][<span class="number">0</span>], self.buffer[i][<span class="number">1</span>], self.buffer[i][<span class="number">3</span>])</span><br><span class="line">            self.buffer.pop(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 内网报文默认处理 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">default_handler</span>(<span class="params">self, curr_switch, in_port, src_ip, dst_ip, msg</span>):</span><br><span class="line">    datapath = msg.datapath</span><br><span class="line">    ofproto = datapath.ofproto</span><br><span class="line">    parser = datapath.ofproto_parser</span><br><span class="line">    <span class="comment"># 寻路并转发，要修改mac</span></span><br><span class="line">    dst_mac, dst_switch, final_port = self.arp_table[dst_ip]</span><br><span class="line">    pkt = packet.Packet(msg.data)</span><br><span class="line">    pkt_ipv4 = pkt.get_protocol(ipv4.ipv4)</span><br><span class="line">    eth = pkt.get_protocols(ethernet.ethernet)[<span class="number">0</span>]</span><br><span class="line">    origin_mac = eth.dst</span><br><span class="line">    eth.dst = dst_mac</span><br><span class="line">    <span class="keyword">if</span> origin_mac == eth.dst <span class="keyword">and</span> (curr_switch,in_port) <span class="keyword">not</span> <span class="keyword">in</span> self.edge_switch:</span><br><span class="line">        actions = [parser.OFPActionOutput(OFPP_IN_PORT)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pkt.serialize()</span><br><span class="line">        msg.data = pkt.data</span><br><span class="line">        <span class="comment"># 找到源和目的主机的mac及连接的虚拟机</span></span><br><span class="line">        self.logger.info(<span class="string">&quot;Received a Packet from intranet &#123;&#125; to intranet &#123;&#125; change MAC from &#123;&#125; to &quot;</span></span><br><span class="line">                         <span class="string">&quot;&#123;&#125; \n&quot;</span>.<span class="built_in">format</span>(pkt_ipv4.src,pkt_ipv4.dst,origin_mac,dst_mac))</span><br><span class="line"></span><br><span class="line">        shortest_path = self.topo.Dijkstra(</span><br><span class="line">            curr_switch,</span><br><span class="line">            dst_switch,</span><br><span class="line">            in_port,</span><br><span class="line">            final_port)</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(shortest_path) &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        path_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># (s1,inport,outport)-&gt;(s2,inport,outport)-&gt;...-&gt;(dest_switch,inport,outport)</span></span><br><span class="line">        <span class="keyword">for</span> s, ip, op <span class="keyword">in</span> shortest_path:</span><br><span class="line">            path_str = path_str + <span class="string">&quot;--&#123;&#125;-&#123;&#125;-&#123;&#125;--&quot;</span>.<span class="built_in">format</span>(ip, s, op)</span><br><span class="line">        self.logger.info(</span><br><span class="line">            <span class="string">&quot;Configure the shortset path from &#123;&#125; to &#123;&#125; —— &#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(src_ip, dst_ip, path_str))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.logger.info(&quot;Now configuring switches of interest&quot;)</span></span><br><span class="line">        self.configure_path(shortest_path, msg, origin_mac, dst_mac, dst_ip)</span><br><span class="line">        <span class="comment"># self.logger.info(&quot;Configure done&quot;)</span></span><br><span class="line">        <span class="comment"># sleep(1)</span></span><br><span class="line">        out_port = shortest_path[-<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">        in_port = shortest_path[-<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">        actions = [parser.OFPActionOutput(out_port)]</span><br><span class="line">        out_switch = get_switch(self, shortest_path[-<span class="number">1</span>][<span class="number">0</span>])[<span class="number">0</span>]</span><br><span class="line">        datapath = out_switch.dp</span><br><span class="line">        parser = datapath.ofproto_parser</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> msg.buffer_id == ofproto.OFP_NO_BUFFER:</span><br><span class="line">        data = msg.data</span><br><span class="line">    <span class="comment"># send the packet out to avoid packet loss</span></span><br><span class="line">    out = parser.OFPPacketOut(</span><br><span class="line">        datapath=datapath,</span><br><span class="line">        buffer_id=msg.buffer_id,</span><br><span class="line">        actions=actions,</span><br><span class="line">        in_port=in_port,</span><br><span class="line">        data=data</span><br><span class="line">    )</span><br><span class="line">    datapath.send_msg(out)</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 报文直接发往交换机端口 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_out</span>(<span class="params">switch, actions, data</span>):</span><br><span class="line">    parser = switch.dp.ofproto_parser</span><br><span class="line">    out = parser.OFPPacketOut(</span><br><span class="line">        datapath=switch.dp,</span><br><span class="line">        buffer_id=switch.dp.ofproto.OFP_NO_BUFFER,</span><br><span class="line">        in_port=switch.dp.ofproto.OFPP_CONTROLLER,</span><br><span class="line">        actions=actions, data=data)</span><br><span class="line">    switch.dp.send_msg(out)</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 报文进入控制器后的处理 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@set_ev_cls(<span class="params">ofp_event.EventOFPPacketIn, MAIN_DISPATCHER</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">packet_in_handler</span>(<span class="params">self, event</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># msg is an object which desicribes the corresponding OpenFlow message</span></span><br><span class="line">    msg = event.msg</span><br><span class="line">    datapath = msg.datapath</span><br><span class="line">    <span class="comment"># object for the negotiated Openflow version</span></span><br><span class="line">    parser = datapath.ofproto_parser</span><br><span class="line">    <span class="comment"># through which port the packet comes in</span></span><br><span class="line">    in_port = msg.<span class="keyword">match</span>[<span class="string">&#x27;in_port&#x27;</span>]</span><br><span class="line">    <span class="comment"># self.logger.info(&quot;From datapath &#123;&#125; port &#123;&#125; come in a packet&quot;.format(datapath.id,in_port))</span></span><br><span class="line">    <span class="comment"># get src_mac and dest mac</span></span><br><span class="line">    pkt = packet.Packet(msg.data)</span><br><span class="line">    eth = pkt.get_protocols(ethernet.ethernet)[<span class="number">0</span>]</span><br><span class="line">    dpid = datapath.<span class="built_in">id</span></span><br><span class="line">    <span class="comment"># drop lldp</span></span><br><span class="line">    <span class="keyword">if</span> eth.ethertype == ether_types.ETH_TYPE_LLDP:</span><br><span class="line">        <span class="comment"># self.logger.info(&quot;LLDP&quot;)</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># get source and destination mac address</span></span><br><span class="line">    dst_mac = eth.dst</span><br><span class="line">    src_mac = eth.src</span><br><span class="line">    <span class="comment"># check if this is an arp packet</span></span><br><span class="line">    arp_pkt = pkt.get_protocol(arp.arp)</span><br><span class="line">    self.mac_to_port.setdefault(dpid, &#123;&#125;)</span><br><span class="line">    self.mac_to_port[dpid][src_mac] = in_port</span><br><span class="line">    self.TTLdes()</span><br><span class="line">    pkt_ipv4 = pkt.get_protocol(ipv4.ipv4)</span><br><span class="line">    <span class="keyword">if</span> pkt_ipv4:</span><br><span class="line">        src_ip = pkt_ipv4.src</span><br><span class="line">        dst_ip = pkt_ipv4.dst</span><br><span class="line">    <span class="keyword">if</span> pkt.get_protocol(ipv6.ipv6):</span><br><span class="line">        <span class="keyword">match</span> = parser.OFPMatch(eth_type=eth.ethertype)</span><br><span class="line">        actions = []</span><br><span class="line">        self.add_flow(datapath, <span class="number">1</span>, <span class="keyword">match</span>, actions)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>                                                                                                in_port))</span><br><span class="line"></span><br><span class="line">    pkt_dhcp = pkt.get_protocol(dhcp.dhcp)</span><br><span class="line">    <span class="comment"># 判断是否为dhcp报文</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pkt_dhcp:</span><br><span class="line">        <span class="keyword">if</span> dpid != self.dhcp_switch:</span><br><span class="line">            self.dhcp_relay_handler(msg)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 判断是否为arp报文</span></span><br><span class="line">    <span class="keyword">if</span> arp_pkt:</span><br><span class="line">        <span class="comment"># 记录ip mac 设备号 端口号</span></span><br><span class="line">        <span class="keyword">if</span> arp_pkt.src_ip <span class="keyword">not</span> <span class="keyword">in</span> self.arp_table <span class="keyword">or</span> self.arp_table[arp_pkt.src_ip] != (</span><br><span class="line">                src_mac, dpid, in_port) <span class="keyword">and</span> src_mac != self.switch_adds[(self.nat_switch_id, self.nat_switch_port)]:</span><br><span class="line">            self.arp_table[arp_pkt.src_ip] = (src_mac, dpid, in_port)</span><br><span class="line">            <span class="comment"># 查询发送</span></span><br><span class="line">            self.find_send()</span><br><span class="line">        self.arp_handler(msg)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># if pkt_ipv4.src not in self.arp_table</span></span><br><span class="line">        <span class="comment"># 发送到外网：目的为外网，且源不是</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.ipInSubnet(dst_ip, self.net_ip) <span class="keyword">and</span> self.ipInSubnet(src_ip, self.net_ip):</span><br><span class="line">            self.NAT_out(msg)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 外网发送到内网：目的为外网，且源也是外网</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (self.ipInSubnet(src_ip, self.net_ip)):</span><br><span class="line">            <span class="keyword">if</span> dst_ip == self.nat_ip:</span><br><span class="line">                self.NAT_in(msg)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 查询到目的IP在ARP表中</span></span><br><span class="line">        <span class="keyword">if</span> self.find(dst_ip):</span><br><span class="line">            self.default_handler(dpid, in_port, src_ip, dst_ip, msg)</span><br><span class="line">        <span class="comment"># 未查询到结果</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.stor(msg)</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="流量检测的RYU实现">流量检测的RYU实现</h2><p>实现网络中的流量监控，需要周期的让控制器请求交换机的端口信息，并做出计算和更新，因此需要RYU实现的函数有如下。</p><details class="folding-tag" blue><summary> 周期请求端口信息 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_monitor</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> self.all_switches:</span><br><span class="line">            self._request_stats(s.dp)</span><br><span class="line">        hub.sleep(self.monitor_time)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_request_stats</span>(<span class="params">self, datapath</span>):</span><br><span class="line">    self.logger.debug(<span class="string">&#x27;send stats request: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(datapath.<span class="built_in">id</span>))</span><br><span class="line">    ofproto = datapath.ofproto</span><br><span class="line">    parser = datapath.ofproto_parser</span><br><span class="line"></span><br><span class="line">    req = parser.OFPPortStatsRequest(datapath, <span class="number">0</span>, ofproto.OFPP_ANY)</span><br><span class="line">    datapath.send_msg(req)</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 返回端口信息处理 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@set_ev_cls(<span class="params">ofp_event.EventOFPPortStatsReply, MAIN_DISPATCHER</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_port_stats_reply_handler</span>(<span class="params">self, ev</span>):</span><br><span class="line">    body = ev.msg.body</span><br><span class="line">    <span class="comment"># 更新流量差和全流量</span></span><br><span class="line">    <span class="comment"># print(self.all_links)</span></span><br><span class="line">    <span class="keyword">for</span> stat <span class="keyword">in</span> <span class="built_in">sorted</span>(body, key=attrgetter(<span class="string">&#x27;port_no&#x27;</span>)):</span><br><span class="line">        <span class="keyword">if</span> (ev.msg.datapath.<span class="built_in">id</span>, stat.port_no) <span class="keyword">in</span> self.all_links:</span><br><span class="line">            <span class="comment"># 计算流量差</span></span><br><span class="line">            traffic_sub = stat.rx_bytes - self.topo.get_adjacent(ev.msg.datapath.<span class="built_in">id</span>)[</span><br><span class="line">                self.all_links[(ev.msg.datapath.<span class="built_in">id</span>, stat.port_no)][<span class="number">0</span>]][<span class="number">3</span>]</span><br><span class="line">            self.topo.update_adjacent(ev.msg.datapath.<span class="built_in">id</span>, self.all_links[(ev.msg.datapath.<span class="built_in">id</span>, stat.port_no)][<span class="number">0</span>],</span><br><span class="line">                                      cycle_traffic=traffic_sub, all_traffic=stat.rx_bytes)</span><br><span class="line">    <span class="comment"># 更新完后更新权重</span></span><br><span class="line">    self.topo.update_weight()</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 链路权重更新 </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_adjacent</span>(<span class="params">self, s1, s2, port=<span class="literal">None</span>, weight=<span class="literal">None</span>, cycle_traffic=<span class="literal">None</span>, all_traffic=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> port:</span><br><span class="line">        self.adjacent[s1][s2][<span class="number">0</span>] = port</span><br><span class="line">    <span class="keyword">if</span> weight:</span><br><span class="line">        self.adjacent[s1][s2][<span class="number">1</span>] = weight</span><br><span class="line">    <span class="keyword">if</span> cycle_traffic:</span><br><span class="line">        self.adjacent[s1][s2][<span class="number">2</span>] = cycle_traffic</span><br><span class="line">    <span class="keyword">if</span> all_traffic:</span><br><span class="line">        self.adjacent[s1][s2][<span class="number">3</span>] = all_traffic</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_weight</span>(<span class="params">self</span>):</span><br><span class="line">    all_traffic = [<span class="built_in">list</span>(edge.values()) <span class="keyword">for</span> edge <span class="keyword">in</span> self.adjacent.values()]</span><br><span class="line">    max_cycle_traffic = <span class="built_in">max</span>([<span class="built_in">max</span>(i, key=<span class="keyword">lambda</span> item: item[<span class="number">2</span>])[<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> all_traffic])</span><br><span class="line">    min_cycle_traffic = <span class="built_in">min</span>([<span class="built_in">min</span>(i, key=<span class="keyword">lambda</span> item: item[<span class="number">2</span>])[<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> all_traffic])</span><br><span class="line">    self.update_times += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> s1, data <span class="keyword">in</span> self.adjacent.items():</span><br><span class="line">        <span class="keyword">for</span> s2, [_, _, cycle_traffic, _] <span class="keyword">in</span> data.items():</span><br><span class="line">            <span class="comment"># 计算权重并更新</span></span><br><span class="line">            weight = math.ceil(((cycle_traffic - min_cycle_traffic) * <span class="number">100</span> / (</span><br><span class="line">                    max_cycle_traffic - min_cycle_traffic) <span class="keyword">if</span> max_cycle_traffic != min_cycle_traffic <span class="keyword">and</span> cycle_traffic != min_cycle_traffic <span class="keyword">else</span> <span class="number">1</span>) )</span><br><span class="line">            self.update_adjacent(s1, s2, weight=weight)</span><br><span class="line">    <span class="keyword">if</span> self.update_times % <span class="built_in">len</span>(self.switches) ==<span class="number">0</span>:</span><br><span class="line">        self.print_weight()</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><hr><h1 id="效果展示">效果展示</h1><h2 id="拓扑展示">拓扑展示</h2><p>从图中可以得到h1至h4有s1-s4-s2以及s1-s5-s2两条路线。</p><p><img src="https://image.asa-world.cn/pic/image-20230206161904294.png" alt="拓扑图"></p><h2 id="寻路展示">寻路展示</h2><p>在h1 ping h4之前查看流表项如下可以看出流表中没有寻路的表。</p><p><img src="https://image.asa-world.cn/pic/image-20230206162034245.png" alt="寻路前流表"></p><p>h1 ping h4显示两点间连通性正常：</p><p><img src="https://image.asa-world.cn/pic/image-20230206162111172.png" alt="ping操作"></p><p>此时再查看流表项可以得到s1与s2间已经产生对应的转发表，以及可以将对应IP地址的mac地址修改正确的流表项。</p><p><img src="https://image.asa-world.cn/pic/image-20230206162140472.png" alt="查看流表"></p><p>同时可以看到s4已经产生两条转发流表，证明寻路选择了s1-s4-s2这条路径。</p><p><img src="https://image.asa-world.cn/pic/image-20230206162200598.png" alt="查看流表"></p><h2 id="抓包分析">抓包分析</h2><p>通过对s1的1端口与s2的1端口进行抓包分析可知：其均向对应的网关发送arp请求以得到相应的mac地址。</p><p><img src="https://image.asa-world.cn/pic/image-20230206162303460.png" alt="抓包分析"></p><p>同时可知，icmp报文在经过s1前后其mac地址也得到了相应的更改，此处的修改即将s1处经过的该icmp报文mac地址修改为s4处，使其按照预定的寻路路径s1-s4-s2到达目的地h4。</p><p><img src="https://image.asa-world.cn/pic/image-20230206162321977.png" alt="抓包分析"></p><p>内网的连通性得以验证，此时pingall可以发现内网主机是可以相互ping通的。</p><p><img src="https://image.asa-world.cn/pic/image-20230206162350760.png" alt="pingall操作"></p><blockquote><p>鸣谢：廉廉子、杰杰子、逸逸子、航航子、亮亮子</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDN </tag>
            
            <tag> Python </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“探索号”火星车项目开发</title>
      <link href="/f5eadc1/"/>
      <url>/f5eadc1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>欢迎大家来到&quot;探索号&quot;火星车发布会的现场！</p></blockquote><p>美国有NASA，我们有MARSA，这是它的英文名字Mars Assistance，火星探索辅助设备。</p><hr><h1 id="火星情况">火星情况</h1><p>要想去到遥远的火星去执行任务，我们当然要先弄清楚火星上面的基本情况是什么样的。通过查找资料，尤其是《火星救援》这部电影给了我们启发很多。</p><p>我们了解到火星，火星表面的平均大气压强不足地球上的1%，所以它时不时就会来一场席卷整颗行星大风暴。因此风化严重，火星上遍布撞击坑、峡谷、沙丘和砾石。另外，2014年科学家发现在火星内部存在庞大的水资源，酷似巨型“地下水库”。俗话说水是生命之源，我们有理由怀疑火星上会不会真的有生命，或者说是外星人呢。</p><p><img src="https://image.asa-world.cn/pic/dN7PLKx9jo_small.jpg" alt="日落下的火星山脉"></p><p>有了这个怀疑，我们想要做的就是火星生命的探测。</p><hr><h1 id="探索号特点与功能">探索号特点与功能</h1><p>&quot;探索号&quot;火星车，它有以下几个特点和功能。</p><h2 id="外观">外观</h2><p>首先外观上，大家可以看出我们使用了履带的设计。刚才我们讲到火星多风沙，那么履带的设计大大增强了火星车的稳定性；在坑洼地段履带比轮胎的脱困能力也会好很多；因为履带和地面的接触面积更大，所以对地面压强就很小，在沙地泥地里更不容易陷进去。</p><p><img src="https://image.asa-world.cn/pic/image-20230205141406914.png" alt="履带式设计"></p><h2 id="超声波避障功能">超声波避障功能</h2><p>另外，为了应对比较恶劣的地质环境，我们还加入了超声波避障功能。</p><p>由于环境复杂多样，我们设计了两种避障策略。</p><ul><li>面对比较矮小的障碍物，火星车会利用自身的机械臂将自身撑起来而实现翻越障碍物；</li><li>如果障碍物比较高大，火星车就会骂骂咧咧的走开，重新规划路线。</li></ul><div class="video"><video controls preload><source src='https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/video/%E9%81%BF%E9%9A%9C%E5%8A%9F%E8%83%BD_x264.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><h2 id="多级变速功能">多级变速功能</h2><p>为了使火星车前进的更加稳定，我们使用了姿态传感器，通过对欧拉角的判断实现了上坡加速，下坡减速。</p><div class="video"><video controls preload><source src='https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/video/%E6%99%BA%E8%83%BD%E5%BE%AA%E8%BF%B9_batch.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><h2 id="智能检测功能">智能检测功能</h2><p>我们关注多学科交叉融合，坚持产学研一体化，刚才我们是火星车的任务是探测生命，于是我们调整我们之前做的大创项目，使用YOLO目标检测算法，通过火星车上的摄像头将视频流传回上位机进行检测。我们的算法可检测类别八十余种。</p><h2 id="红外寻迹功能">红外寻迹功能</h2><p>难道外星人真的好找吗，不一定。我们火星车还实现了寻迹功能，可以外星生命的痕迹主动探索。</p><div class="video"><video controls preload><source src='https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/video/%E6%99%BA%E8%83%BD%E5%BE%AA%E8%BF%B9_batch.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><hr><h1 id="实现原理">实现原理</h1><h2 id="超声波避障">超声波避障</h2><p>障碍物类型的判断方法：当超声波检测障碍物距离小于阈值时，机械臂触地将火星车支撑起来，超声波持续检测，如果还能检测到障碍物则说明是高大障碍物，否则判断为矮小障碍物。</p><p>对于低矮障碍物，因为机械臂可使火星车直接翻越，因此火星车将慢速前进并收回机械臂；对于高大障碍物，火星车将后退并右转重新寻路。</p><p><img src="https://image.asa-world.cn/pic/image-20230205140137319.png" alt="避障流程图"></p><p>技术细节：通过Get_distance函数获取超声波传感器检测前方障碍物的距离值，通过不断调试，我们将阈值调整到15。Angle[0]、Angle[1]、Angle[3]分别对应0、1、3号舵机负责调整机械臂姿态。</p><p>通过MOTOR_GO_FORWARD、MOTOR_GO_STOP、MOTOR_GO_RIGHT函数直接控制火星车的行进方向。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">shangpo</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">          MOTOR_GO_STOP;</span><br><span class="line">        <span class="comment">//停车</span></span><br><span class="line">        Angle[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        Angle[<span class="number">1</span>]=<span class="number">70</span>;</span><br><span class="line">        Angle[<span class="number">3</span>]=<span class="number">0</span>;</span><br><span class="line">        Delay_ms(<span class="number">500</span>);</span><br><span class="line">        <span class="type">float</span> distance = Get_distance();    <span class="comment">//获取超声波传感器距离值</span></span><br><span class="line">        <span class="keyword">if</span>((<span class="number">15</span>&lt;distance)||(distance&lt;=<span class="number">0</span>))             <span class="comment">//判断超声波传感器距离值大于15小于等于0</span></span><br><span class="line">        &#123;</span><br><span class="line">            MOTOR_GO_FORWARD;</span><br><span class="line">            Delay_ms(<span class="number">300</span>);</span><br><span class="line">            MOTOR_GO_STOP;</span><br><span class="line">            Angle[<span class="number">0</span>]=<span class="number">180</span>;</span><br><span class="line">            Angle[<span class="number">3</span>]=<span class="number">0</span>;</span><br><span class="line">            Delay_ms(<span class="number">500</span>);</span><br><span class="line">            Angle[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            Delay_ms(<span class="number">50</span>);</span><br><span class="line">            MOTOR_GO_FORWARD;</span><br><span class="line">            Delay_ms(<span class="number">500</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">//forward(adjust,500);</span></span><br><span class="line">            Delay_ms(<span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          Angle[<span class="number">0</span>]=<span class="number">180</span>;</span><br><span class="line">          Angle[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">          Angle[<span class="number">3</span>]=<span class="number">0</span>;</span><br><span class="line">          Delay_ms(<span class="number">500</span>);</span><br><span class="line">          MOTOR_GO_BACK;</span><br><span class="line">          Delay_ms(<span class="number">500</span>);</span><br><span class="line">          MOTOR_GO_RIGHT;</span><br><span class="line">          Delay_ms(<span class="number">250</span>);</span><br><span class="line">          MOTOR_GO_STOP;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多级变速">多级变速</h2><p>变速策略为当火星车通过姿态传感器判断处于上坡状态或下坡状态。当处于上坡状态时，火星车加速前进，当处于下坡状态时，火星车减速前进。</p><p><img src="https://image.asa-world.cn/pic/image-20230205140424140.png" alt="变速原理"></p><p>本功能的解码模块如图所示，其主要部分参考姿态传感器官方文档的帧设定。当传入数据帧头为0x53时，传递的是姿态信息。通过官方给的变换公式，我们便可以得到三个角度的姿态信息和一个温度信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> Communication <span class="title function_">Decode3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Communication_Decode_flag3)&#123;</span><br><span class="line">Communication_Decode_flag3=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(buffer3[<span class="number">0</span>]==<span class="number">0x53</span>)&#123;</span><br><span class="line">ro11x=(buffer:<span class="number">3</span>[<span class="number">2</span>]&lt;&lt;<span class="number">8</span>)|buffer3[<span class="number">1</span>])/<span class="number">32768.0</span>*<span class="number">180</span>;</span><br><span class="line">pitchy=(buffer3[<span class="number">4</span>]&lt;<span class="number">8</span>)|buffer:<span class="number">3</span>[<span class="number">3</span>])/<span class="number">32768.0</span>*<span class="number">180</span>;</span><br><span class="line">yawz=(buffer3[<span class="number">6</span>]&lt;&lt;<span class="number">8</span>)|buffer3[<span class="number">5</span>])/<span class="number">32768.0</span>*<span class="number">180</span>;</span><br><span class="line">temperature=((buffer3[<span class="number">8</span>]&lt;&lt;<span class="number">8</span>)buffer3[<span class="number">7</span>])/<span class="number">100.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再通过其中的pitchy来判断上下坡信息并调整速度，并且上坡的度数越大，速度越快。下坡的读书越大，速度越慢。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">int</span> speed=<span class="number">3</span>;</span><br><span class="line"> <span class="type">float</span> s_up=<span class="number">1</span>;</span><br><span class="line"> <span class="type">float</span> s_down=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 设置系统时钟为72M ;*/</span></span><br><span class="line">  SystemInit();</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  SysTick_Configuration();  <span class="comment">//SysTick中断配置，主要用来定时</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//LCD_12864_init();//液晶屏初始化</span></span><br><span class="line">  </span><br><span class="line">  GPIO_ALL_Config(); <span class="comment">//GPIO初始化</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//Init_LED();   //流水灯等延时38秒等待WIFI模块启动</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//Init_Steer(); //舵机角度初始化  </span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">//TIM2_PWM_Init(); //定时器2(舵机PWM初始化)</span></span><br><span class="line">  </span><br><span class="line">  TIM4_Init(); <span class="comment">//定时器4(计时)</span></span><br><span class="line">    </span><br><span class="line">  TIM5_PWM_Init(); <span class="comment">//定时器5(电机速度PWM初始化)</span></span><br><span class="line">  </span><br><span class="line">  USART1_Config();  <span class="comment">//串口初始化</span></span><br><span class="line">  </span><br><span class="line">  ifstop=<span class="number">0</span>; <span class="comment">//用来计数多长时间没有检测到黑线</span></span><br><span class="line">  USART3_Config();</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  Set_Right_Speed(<span class="number">500</span>);</span><br><span class="line">  Set_Left_Speed(<span class="number">500</span>);</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123; </span><br><span class="line">    <span class="keyword">if</span>(ifstop&lt;<span class="number">150000</span>)&#123;</span><br><span class="line">       TrackLine();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pitchy&gt;<span class="number">190</span>)&#123;</span><br><span class="line">       Set_Right_Speed((u16)(speed+(pitchy<span class="number">-180</span>)*s_up));</span><br><span class="line">       Set_Left_Speed((u16)(speed+(pitchy<span class="number">-180</span>)*s_up));</span><br><span class="line">     &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(pitchy&lt;<span class="number">170</span>)&#123;</span><br><span class="line">      Set_Right_Speed((u16)(speed+(<span class="number">180</span>-pitchy)*s_down));</span><br><span class="line">      Set_Left_Speed((u16)(speed+(<span class="number">180</span>-pitchy)*s_down));</span><br><span class="line">    &#125; </span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">     Set_Right_Speed(speed);</span><br><span class="line">     Set_Left_Speed(speed);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="智能检测">智能检测</h2><p>yolov5智能检测的原理如图4-11所示。对于Yolov5，这是基于YOLOv3（一种轻量级检测网络）改进的。YOLOv5网络结构由四部分组成：输入侧，骨干，颈部和预测。输入端采用Mosaic数据增强，并针对不同数据集获得自适应锚帧计算和自适应图像缩放。骨干网络采用集中结构，同时设计两种CSP结构，一种应用于骨干网，另一种应用于Neck;颈部部分是FPN和PAN结构， 相比YOLOv4，YOLOv5不同之处在于颈部结构采用了从CSPnet设计中借鉴的CSP2结构，增强了网络特征融合的能力;输出端采用边界框损耗函数，实现更快更好的收敛效果。</p><p><img src="https://image.asa-world.cn/pic/clip_image002.jpg" alt="YOLO检测"></p><p>事实上，对于yolov5智能检测流程，未来我们还会进行进一步优化，具体如下：火星车在火星上进行搜寻，摄像系统将视频流传给火星基地，然后火星基地依靠强大的计算能力，分析得出相关结果，对小车下发指令，指导小车进行运动。下面是我们预期的工作流程图：</p><p><img src="https://image.asa-world.cn/pic/image-20230205140852371.png" alt="智能检测优化"></p><h2 id="红外循迹">红外循迹</h2><p>此功能通过两个红外传感模块实现。其基本原理为检测红外线的反射，而黑线能够吸收红外线，因此黑线不会反射红外线，也就检测不到。通过这个原理，就可以判断当前车辆相对于黑线的位置。当两边都能检测到反射时，说明黑线在两个传感器中间，车辆前进。当左边或者右边检测不到反射时，说明车辆偏向一边，此时应该左转或右转。当两边都检测不到反射时，说明车辆到达终点，应该停下来。</p><p><img src="https://image.asa-world.cn/pic/image-20230205141023165.png" alt="寻迹原理"></p><p>通过TR_L和TR_R分别接收红外传感器传来的数据，其中检测到值为1，没有检测到值为0。结合方向控制函数根据我们的基本逻辑即可实现红外循迹。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">line</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>((TR_L==<span class="number">0</span>)&amp;&amp;(TR_R==<span class="number">0</span>))<span class="comment">//两边同时都没有探测到黑线</span></span><br><span class="line">    &#123;</span><br><span class="line">        MOTOR_GO_FORWARD;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125; </span><br><span class="line">                       </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((TR_L == <span class="number">1</span>)&amp;&amp;(TR_R== <span class="number">0</span>))<span class="comment">//右侧遇到障碍  </span></span><br><span class="line">      &#123;</span><br><span class="line">        MOTOR_GO_LEFT;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">              </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((TR_L == <span class="number">0</span>)&amp;&amp;(TR_R == <span class="number">1</span>))<span class="comment">//左侧遇到障碍 </span></span><br><span class="line">      &#123;</span><br><span class="line">        MOTOR_GO_RIGHT;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">                       </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((TR_L == <span class="number">1</span>)&amp;&amp;(TR_R == <span class="number">1</span>))<span class="comment">//左右都检测到黑线，就如视频中的那样遇到一道横的胶带 </span></span><br><span class="line">      &#123;</span><br><span class="line">        MOTOR_GO_STOP;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="问题与解决">问题与解决</h1><blockquote><p>超声波模块间歇失控</p></blockquote><ul><li><strong>问题描述</strong>：超声波模块有时距离障碍物很远时就启动机械臂，有时撞上障碍物时也没有反应。</li><li><strong>解决思路</strong>：我们首先怀疑是不是超声波模块有问题，我们换了几个模块还是有问题。然后我们觉得是不是模块缓冲区的问题，是不是上一次检测到障碍物时还未将结果存入缓冲区，再次启动时才将缓冲区读取出来，这样就可以解释“撞上障碍物时也没有反应，后面再次启动时又会立刻有反应”这一现象了。</li><li><strong>解决方法</strong>：最后我们发现是因为主代码中有一段中断程序，过了一段时间程序就会进入该中断而不再执行我们的代码，删掉中断程序后即可正常运行。</li></ul><blockquote><p>火星车行进偏移</p></blockquote><ul><li><strong>问题描述</strong>：火星车前进路线不直，上到跷跷板后会掉下来。</li><li><strong>解决方法</strong>：因为每个电机的生产情况不尽相同，因此相同的PWM信号也会使电机的旋转情况不同。需要自己手动补偿速度差异。</li></ul><blockquote><p>姿态传感器无效</p></blockquote><ul><li><strong>问题描述</strong>：在最初进行这个功能的调试过程中，我们发现火星车无法通过串口接收姿态传感器传递的内容</li><li><strong>解决思路</strong>：最开始我们以为是自身算法没有写好，但经过层层排查之后，我们发现用串口助手也无法接收到姿态传感器的内容，于是考虑是姿态传感器的问题，最终在更换姿态传感器后解决。</li></ul><blockquote><p>姿态传感器数据不准确</p></blockquote><ul><li><strong>问题描述</strong>：姿态传感器的角度信息不准确，当处于平地的时候会认为处于上坡。</li><li><strong>解决思路</strong>：通过多次实验发现姿态传感器的角度数据有一个固定的偏差，通过对接收到的角度数据做一个固定的调零后可以解决这个问题。</li></ul><blockquote><p>火星车的wifi模块的不稳定</p></blockquote><ul><li><strong>问题描述</strong>：火星车的wifi模块和电脑的连接经常会出现断连，重连的现象。</li><li><strong>解决方法</strong>：经过检查和分析，是火星车的STM32主板给wifi模块供电的电压不足。</li></ul><blockquote><p>火星车和WiFi模块的上位机通信</p></blockquote><ul><li><strong>问题描述</strong>：上位机（电脑或者手机）接入火星车的wifi之后，便仅能接收到视频，而不能给火星车下放指令。</li><li><strong>原因推断</strong>：在wifi开启之后，38秒流水灯还没有走完的情况之下，电脑就接入wifi，会打断STM32主板里面的相关指令接收模块的初始化。因为接入会给主板发送一个信号，相当于一个指令。</li></ul><blockquote><p>红外传感器灵敏度不足</p></blockquote><ul><li><strong>问题描述</strong>：红外传感器无法准确探测黑线，灵敏度不足。</li><li><strong>解决方法</strong>：通过手动使用螺丝刀调节红外传感器的灵敏度，可以调整红外循迹的流畅度，从而更好地实现循迹。</li></ul><hr><blockquote><p>鸣谢：勇勇子、奇奇子</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于软件工程的学生基本信息管理系统数据库设计</title>
      <link href="/86ecce66/"/>
      <url>/86ecce66/</url>
      
        <content type="html"><![CDATA[<h1 id="概述-4">概述</h1><h2 id="软件工程定义">软件工程定义</h2><p>关于软件工程的定义，在GB/T11457-2006《消息技术 软件工程术语》中将其定义为&quot;应用计算机科学理论和技术以及工程管理原则和方法，按预算和进度，实现满足用户要求的软件产品的定义、开发、和维护的工程或进行研究的学科&quot;。</p><h2 id="软件工程意义">软件工程意义</h2><h3 id="软件工程与软件开发">软件工程与软件开发</h3><p>软件的开发到底是一门科学还是一门工程，这是一个被争论了很久的问题。实际上，软件开发兼有两者的特点。但是这并不意味着它们可以被互相混淆。很多人认为软件工程基于计算机科学和信息科学就如传统意义上的工程学之于物理和化学一样。在美国，大约40%的软件工程师具有计算机科学的学位。在世界其他地方，这个比例也差不多。他们并不一定会每天使用计算机科学方面的知识，但是他们每天都会使用软件工程方面的知识。</p><h3 id="软件工程地位">软件工程地位</h3><p>软件工程学科是计算学科的分支，计算学科中理论、抽象、设计等三个学科形态，绑定、大问题的复杂性、概念和形式模型、一致性和完备性、效率、演化、抽象层次、按空间排序、按时间排序、重用、安全性、折衷与决策等十二个基本概念，数学方法、系统科学方法在软件工程学科中占有重要地位。此外，软件工程还十分重视管理过程，以提高软件产品的质量、降低开发成本、保证工程按时完成。系统性、规范性、可度量性也是软件工程非常关注的。</p><p>软件工程学科的理论基础是数学、计算机科学。软件工程的研究和实践涉及人力、技术、资金、进度的综合管理，是开展最优化生产活动的过程；软件工程必须划分系统的边界，给出系统的解决方案。因此，软件工程的相关学科有计算机科学与技术、数学、计算机工程、管理学、系统工程和人类工程学等。</p><hr><h1 id="需求分析-3">需求分析</h1><h2 id="信息需求分析">信息需求分析</h2><p>对学校而言，学生成绩管理是管理工作中重要的一环，但是高校学生的成绩管理工作量大、繁杂，人工处理非常困难。因此，借助于强大计算机的处理能力，能够把人从繁重的成绩管理工作中解脱出来，并且更加准确、安全、清晰的管理环境。</p><p>该数据库需要记录的数据有学生入学时会记录身份信息，包括姓名、性别、出生日期、民族、身份证号、学号、政治面貌、手机号码等相关信息；学校的多个学院和多个校区信息；每个校区的宿舍楼信息，其中宿舍楼的类别有博士生公寓、硕士生公寓和本科生公寓。</p><p>因此系统需要完整记录学生的基本信息、当前所在学院、所在校区、所住宿舍楼寝室，以及其他可能需要的信息。</p><h2 id="功能需求分析">功能需求分析</h2><p>能够进行数据库的数据定义、数据操纵、数据控制等处理功能。具体功能应包括：可提供学生基本信息查询、添加、插入、删除、更新，以及调整校区、学院、寝室的功能。</p><h2 id="安全性和完整性需求分析">安全性和完整性需求分析</h2><p>对于学生基本信息数据库来讲，由于其主要数据是学生基本信息，只能由本人以及学校单位知道，因此做好数据安全性是重中之重。另外，要求所有在校学生的信息都要录入其中，并且要设计好个别情况。</p><hr><h1 id="系统设计-2">系统设计</h1><h2 id="概念结构设计">概念结构设计</h2><p>概念结构设计是整个数据库设计的关键，它通过对用户需求进行综合、归纳与抽象，形成一个独立于具体DBMS的概念模型。</p><p>根据学生基本信息管理系统数据库设计需求抽象出学生、学院、校区、宿舍四个实体，对四个实体做简化处理，因简化后关系结构比较简单，故省略了局部E-R图。对4个实体之间的关系进行分析如下：</p><ul><li><p>一位学生位于一个学院，一个学院拥有多名学生，所以学生与学院之间是一对多（1:n）的关系；</p></li><li><p>一位学生住在一个宿舍，一门课程住着多名学生，所以学生与宿舍之间是一对多（1:n）的关系；</p></li><li><p>一个校区会有多个寝室和多个学院，而一个寝室和校区仅被一个校区拥有，所以校区与寝室、学院都是一对多（1:n）的关系；</p></li></ul><h3 id="系统实体抽象">系统实体抽象</h3><ul><li>学生（学号、姓名、性别、出生日期、民族、身份证号、政治面貌、手机号码、学院、宿舍）；</li><li>学院（编号、名称、类型）；</li><li>校区（编号、名称、地址）；</li><li>宿舍（编号、类型、校区）</li></ul><h3 id="全局E-R图">全局E-R图</h3><p><img src="https://image.asa-world.cn/pic/clip_image002.jpg" alt="全局E-R模型图"></p><h2 id="逻辑结构设计">逻辑结构设计</h2><h3 id="关系模式">关系模式</h3><p>E-R图向关系模型转化要解决的问题是如何将实体型和实体间的联系转化为关系模式，如何确定这些关系模式的属性和码。</p><p>设计学生基本信息管理系统数据库，包括学生（student）、学院（school）、校区（campus）、宿舍（dormitory）四个实体，其关系模式中对每个实体定义属性如下：</p><ul><li>student表: 学号（snum）、姓名（sname）、性别（sgender）、出生日期（sbirthday）、民族（snationality）、身份证号(sid)、政治面貌（spolitical）、手机号码（sphonenum）、学院（schoolid）、宿舍（dormitoryid），此为联系“student表”所对应的关系模式，学号为该关系的候选码，满足第三范式。</li><li>school表：学院编号（schoolid）、学院名称（schoolname）学院类型（schooltype），此为联系“school表”所对应的关系模式，学院编号为该关系的候选码，满足第三范式。</li><li>campus表：（校区编号（campusid）、校区名称（campusname）、校区地址（campuaddress），此为联系“campus表”所对应的关系模式，校区编号为该关系的候选码，满足第三范式。</li><li>dormitory表：（宿舍编号（dormitorysid）、宿舍类型（dormitorytype）、校区编号（campusid），此为联系“dormitory表”所对应的关系模式，宿舍编号为该关系的候选码，满足第三范式。</li></ul><h3 id="表结构">表结构</h3><p><img src="https://image.asa-world.cn/pic/image-20230204215137911.png" alt="学生表结构"></p><p><img src="https://image.asa-world.cn/pic/image-20230204215214237.png" alt="学院表结构"></p><p><img src="https://image.asa-world.cn/pic/image-20230204215258626.png" alt="校区表结构"></p><p><img src="https://image.asa-world.cn/pic/image-20230204215311731.png" alt="宿舍表结构"></p><hr><h1 id="代码与实现">代码与实现</h1><h2 id="创建表">创建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ---------------------------- </span></span><br><span class="line"><span class="comment">-- 创建学生表 </span></span><br><span class="line"><span class="comment">-- ---------------------------</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">STUID NUMBER(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,<span class="comment">--学号</span></span><br><span class="line">SNUM NUMBER(<span class="number">18</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">--身份证号</span></span><br><span class="line">SNAME <span class="type">VARCHAR</span>(<span class="number">20</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">--姓名</span></span><br><span class="line">SGENDER <span class="type">VARCHAR</span>(<span class="number">20</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">--性别</span></span><br><span class="line">SBIRTHDAY  <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 出生日期</span></span><br><span class="line">SPOLITICAL <span class="type">VARCHAR</span>(<span class="number">20</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">--政治面貌</span></span><br><span class="line">SNATIONALITY <span class="type">VARCHAR</span>(<span class="number">20</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">--民族</span></span><br><span class="line">SPHONENUM NUMBER(<span class="number">11</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span>,  <span class="comment">--手机号码</span></span><br><span class="line">SCHOOLID NUMBER(<span class="number">10</span>)<span class="keyword">NULL</span>, <span class="comment">--学院编号</span></span><br><span class="line">DORMITORYID <span class="type">VARCHAR</span>(<span class="number">20</span>)<span class="keyword">NULL</span> <span class="comment">--宿舍编号</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> PK_student <span class="keyword">PRIMARY</span> KEY(SNUM); <span class="comment">--创建主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> CK_student_SGENDER</span><br><span class="line">  <span class="keyword">CHECK</span>(SGENDER <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">OR</span> SGENDER <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>);   <span class="comment">--创建性别约束条件</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> CK_student_SPOLITICAL</span><br><span class="line">  <span class="keyword">CHECK</span>(SPOLITICAL <span class="operator">=</span> <span class="string">&#x27;中共党员&#x27;</span> <span class="keyword">OR</span> SPOLITICAL <span class="operator">=</span> <span class="string">&#x27;中共预备党员&#x27;</span> <span class="keyword">OR</span> SPOLITICAL <span class="operator">=</span> <span class="string">&#x27;共青团员&#x27;</span> <span class="keyword">OR</span> SPOLITICAL <span class="operator">=</span> <span class="string">&#x27;群众&#x27;</span> <span class="keyword">OR</span> SPOLITICAL <span class="operator">=</span> <span class="string">&#x27;其他&#x27;</span> );  <span class="comment">--创建政治面貌约束条件</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">-- ---------------------------- </span></span><br><span class="line"><span class="comment">-- 创建校区表 </span></span><br><span class="line"><span class="comment">-- ---------------------------</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> campus(</span><br><span class="line">CAMPUSID NUMBER(<span class="number">10</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span>,<span class="comment">--校区编号</span></span><br><span class="line">CAMPUSNAME <span class="type">VARCHAR</span>(<span class="number">30</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span>,<span class="comment">--校区名称</span></span><br><span class="line">CAMPUSADDRESS <span class="type">VARCHAR</span>(<span class="number">30</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span><span class="comment">--校区地址</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> campus <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> PK_campus <span class="keyword">PRIMARY</span> KEY(CAMPUSID);<span class="comment">--创建主键约束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ---------------------------- </span></span><br><span class="line"><span class="comment">-- 创建学院表 </span></span><br><span class="line"><span class="comment">-- ---------------------------</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> school(</span><br><span class="line">SCHOOLID NUMBER(<span class="number">10</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span>,<span class="comment">--学院编号</span></span><br><span class="line">SCHOOLNAME <span class="type">VARCHAR</span>(<span class="number">20</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">--学院名称</span></span><br><span class="line">SCHOOLTYPE <span class="type">VARCHAR</span>(<span class="number">20</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">--学院类型</span></span><br><span class="line">CAMPUSID NUMBER(<span class="number">10</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span><span class="comment">--校区编号</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> school <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> PK_school <span class="keyword">PRIMARY</span> KEY(SCHOOLID);<span class="comment">--创建主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> school <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> CK_school_TYPE  <span class="comment">--创建学院类型约束条件</span></span><br><span class="line">  <span class="keyword">CHECK</span>(SCHOOLTYPE <span class="operator">=</span> <span class="string">&#x27;自然科学&#x27;</span> <span class="keyword">OR</span> SCHOOLTYPE <span class="operator">=</span> <span class="string">&#x27;农业科学&#x27;</span> <span class="keyword">OR</span> SCHOOLTYPE <span class="operator">=</span> <span class="string">&#x27;医药科学&#x27;</span> <span class="keyword">OR</span> SCHOOLTYPE <span class="operator">=</span> <span class="string">&#x27;工程与技术科学&#x27;</span> <span class="keyword">OR</span> SCHOOLTYPE <span class="operator">=</span> <span class="string">&#x27;人文与社会科学&#x27;</span> ); </span><br><span class="line"><span class="comment">-- ---------------------------- </span></span><br><span class="line"><span class="comment">-- 创建宿舍表 </span></span><br><span class="line"><span class="comment">-- ---------------------------</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dormitory(</span><br><span class="line">DORMITORYID <span class="type">VARCHAR</span>(<span class="number">20</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span>,<span class="comment">--宿舍编号</span></span><br><span class="line">DORMITORYTYPE <span class="type">VARCHAR</span>(<span class="number">20</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span>,<span class="comment">--宿舍类型</span></span><br><span class="line">CAMPUSID NUMBER(<span class="number">10</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span><span class="comment">--校区编号</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dormitory <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> PK_dormitory <span class="keyword">PRIMARY</span> KEY(DORMITORYID);<span class="comment">--创建主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dormitory <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> CK_dormitory_TYPE</span><br><span class="line">  <span class="keyword">CHECK</span>(DORMITORYTYPE <span class="operator">=</span> <span class="string">&#x27;本科生公寓&#x27;</span> <span class="keyword">OR</span> DORMITORYTYPE <span class="operator">=</span> <span class="string">&#x27;硕士生公寓&#x27;</span> <span class="keyword">OR</span> DORMITORYTYPE <span class="operator">=</span> <span class="string">&#x27;硕士生公寓&#x27;</span> );  <span class="comment">--创建宿舍类型约束条件</span></span><br><span class="line"><span class="comment">-- ---------------------------- </span></span><br><span class="line"><span class="comment">-- 创建外键约束 </span></span><br><span class="line"><span class="comment">-- ---------------------------</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> FK_student_school_SCHOOLID </span><br><span class="line">  <span class="keyword">FOREIGN</span> KEY(SCHOOLID) <span class="keyword">REFERENCES</span> school(SCHOOLID);<span class="comment">--创建外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> FK_student_DORMITORYID </span><br><span class="line">  <span class="keyword">FOREIGN</span> KEY(DORMITORYID) <span class="keyword">REFERENCES</span> dormitory(DORMITORYID);<span class="comment">--创建外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> school <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> FK_school_campus_CAMPUSID <span class="keyword">FOREIGN</span> </span><br><span class="line">  KEY(CAMPUSID) <span class="keyword">REFERENCES</span> campus(CAMPUSID);<span class="comment">--创建外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dormitory <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> FK_dormitory_campus_CAMPUSID <span class="keyword">FOREIGN</span> </span><br><span class="line">  KEY(CAMPUSID) <span class="keyword">REFERENCES</span> campus(CAMPUSID);<span class="comment">--创建外键约束</span></span><br></pre></td></tr></table></figure><h2 id="插入校区信息">插入校区信息</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> campus <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;电子科技大学清水河校区&#x27;</span>,<span class="string">&#x27;四川省成都市高新区&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> campus <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;电子科技大学沙河校区&#x27;</span>,<span class="string">&#x27;四川省成都市成华区&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://image.asa-world.cn/pic/image-20230204215823293.png" alt="插入校区信息"></p><h2 id="插入学院信息">插入学院信息</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> school <span class="keyword">VALUES</span> (<span class="number">0001</span>,<span class="string">&#x27;信通学院&#x27;</span>,<span class="string">&#x27;工程与技术科学&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> school <span class="keyword">VALUES</span> (<span class="number">0002</span>,<span class="string">&#x27;电子学院&#x27;</span>,<span class="string">&#x27;工程与技术科学&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> school <span class="keyword">VALUES</span> (<span class="number">0003</span>,<span class="string">&#x27;微电子学院&#x27;</span>,<span class="string">&#x27;工程与技术科学&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> school <span class="keyword">VALUES</span> (<span class="number">0004</span>,<span class="string">&#x27;医学院&#x27;</span>,<span class="string">&#x27;医药科学&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> school <span class="keyword">VALUES</span> (<span class="number">0005</span>,<span class="string">&#x27;软件学院&#x27;</span>,<span class="string">&#x27;工程与技术科学&#x27;</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><img src="https://image.asa-world.cn/pic/image-20230204215915615.png" alt="插入学院信息"></p><h2 id="插入宿舍信息">插入宿舍信息</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dormitory <span class="keyword">VALUES</span> (<span class="string">&#x27;27#211&#x27;</span>,<span class="string">&#x27;本科生公寓&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dormitory <span class="keyword">VALUES</span> (<span class="string">&#x27;27#439&#x27;</span>,<span class="string">&#x27;本科生公寓&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dormitory <span class="keyword">VALUES</span> (<span class="string">&#x27;27#440&#x27;</span>,<span class="string">&#x27;本科生公寓&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dormitory <span class="keyword">VALUES</span> (<span class="string">&#x27;11#440&#x27;</span>,<span class="string">&#x27;硕士生公寓&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dormitory <span class="keyword">VALUES</span> (<span class="string">&#x27;12#440&#x27;</span>,<span class="string">&#x27;硕士生公寓&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dormitory <span class="keyword">VALUES</span> (<span class="string">&#x27;37#210&#x27;</span>,<span class="string">&#x27;博士生公寓&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dormitory <span class="keyword">VALUES</span> (<span class="string">&#x27;27#211&#x27;</span>,<span class="string">&#x27;本科生公寓&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dormitory <span class="keyword">VALUES</span> (<span class="string">&#x27;27$439&#x27;</span>,<span class="string">&#x27;本科生公寓&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dormitory <span class="keyword">VALUES</span> (<span class="string">&#x27;27$440&#x27;</span>,<span class="string">&#x27;本科生公寓&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dormitory <span class="keyword">VALUES</span> (<span class="string">&#x27;11$440&#x27;</span>,<span class="string">&#x27;硕士生公寓&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dormitory <span class="keyword">VALUES</span> (<span class="string">&#x27;12$440&#x27;</span>,<span class="string">&#x27;硕士生公寓&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dormitory <span class="keyword">VALUES</span> (<span class="string">&#x27;37$210&#x27;</span>,<span class="string">&#x27;博士生公寓&#x27;</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><img src="https://image.asa-world.cn/pic/image-20230204220025922.png" alt="插入宿舍信息"></p><h2 id="插入学生信息">插入学生信息</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2020010902003</span>,<span class="number">123445567</span>,<span class="string">&#x27;小明&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,TO_DATE(<span class="string">&#x27;2000-8-9&#x27;</span>,<span class="string">&#x27;yyyy-MM-dd&#x27;</span>),<span class="string">&#x27;党员&#x27;</span>,<span class="string">&#x27;汉&#x27;</span>,<span class="number">15130796857</span>,<span class="number">1</span>, <span class="string">&#x27;27#440&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2020010902013</span>,<span class="number">123422567</span>,<span class="string">&#x27;小红&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,TO_DATE(<span class="string">&#x27;2001-2-7&#x27;</span>,<span class="string">&#x27;yyyy-MM-dd&#x27;</span>),<span class="string">&#x27;群众&#x27;</span>,<span class="string">&#x27;汉&#x27;</span>,<span class="number">18330796857</span>,<span class="number">3</span>, <span class="string">&#x27;11$440&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://image.asa-world.cn/pic/image-20230204220121934.png" alt="插入学生信息"></p><hr><h1 id="思考">思考</h1><h2 id="数据库三大范式证明">数据库三大范式证明</h2><p>student表中学号（snum）、姓名（sname）、性别（sgender）、出生日期（sbirthday）、民族（snationality）、身份证号(sid)、政治面貌（spolitical）、手机号码（sphonenum）、学院（schoolid）、宿舍（dormitoryid）字段都是单一属性的，不可再分，因此满足第一范式；</p><p>并且姓名（sname）、性别（sgender）、出生日期（sbirthday）、民族（snationality）、身份证号(sid)、政治面貌（spolitical）、手机号码（sphonenum）、学院（schoolid）、宿舍（dormitoryid）都完全依赖于学号（snum）这一个候选关键字，因此满足第二范式；</p><p>学号为该关系的候选码，不存在非关键字段对任一候选关键字段的传递函数依赖则符合第三范式，因此满足第三范式。</p>]]></content>
      
      
      <categories>
          
          <category> 实验实操 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单词忍者——简约优雅的背单词软件开发报告</title>
      <link href="/529b1168/"/>
      <url>/529b1168/</url>
      
        <content type="html"><![CDATA[<h1 id="需求分析">需求分析</h1><p>英语作为一门全球通用的语言，深受人们的重视，现在有很多地方从幼儿园就开始学习英语。对于很多人来说，学习英语是一个非常困难的事情，而背单词APP的开发可以让用户利用碎片化的时间随时随地学习英语单词，打破了传统学习对时间和场地的限制，可以更好的提高大家的学习效率。</p><p>同时个人喜简约流，所以打算开发一个简约但功能强大的背单词软件。</p><hr><h1 id="功能分析">功能分析</h1><p>刚拿到这个项目时我还是比较迷茫的，因为这是我第一次开发项目，而且还是独自一人，只能咬着牙关艰难前行。于是我首先分析了市场上主流的背单词软件的优缺点。</p><h2 id="百词斩">百词斩</h2><p>百词斩是我高中就被老师推荐使用了。这款软件在注册时会根据用户的自身情况来推荐词库，非常个性化。同时，他还有一个很有意思的功能。在背单词时会推出单词的一个例句，然后给用户四个图片，让用户选择符合单词汉意的图片，也就是所谓的图形记忆法。这个功能很有创新。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230110231528063.png" alt="百词斩优点"></p><p>但是，他也有缺点。首先广告非常讨厌，影响用户心情。他的图形记忆法同时也是缺点。他提供的图片单一，很难包括单词的所有含义，有一定的局限性。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230110231615899.png" alt="百词斩缺点"></p><h2 id="扇贝单词">扇贝单词</h2><p>扇贝单词的界面很清新，尤其是启动界面会展现一张美图和一句优美的英语句子，很有感觉。同时，他的学习数据非常明确，“新单词数”、“复习单词数”、“未学单词数”都清晰提示着用户。</p><p>令人遗憾的是，他的部分功能需要会员，往往会使像我这种不想氪金的用户望而却步。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230110231653403.png" alt="扇贝单词分析"></p><p>通过这一系列的分析，我对于软件功能有了大致了解。我总结出单词背诵有几种模式：</p><ul><li><p>背诵模式1：通过发音回想单词——听力时的需求</p></li><li><p>背诵模式2：只提供单词（记单词卡模式），通过单词回忆单词汉意——做阅读题时的需求</p></li><li><p>背诵模式3：只提供汉意，通过汉意回想单词——写作文时的需求</p></li><li><p>背诵模式4：单词部分字母缺失，补全单词——词汇量进阶</p></li><li><p>背诵模式5：通过图片记忆单词——增加趣味性</p></li></ul><p>除了背诵功能外，还应有多用户登录系统来满足不同用户的使用。</p><hr><h1 id="系统设计">系统设计</h1><p>我把这款软件取名为“单词忍者”。这个名字启发于“水果忍者”，我希望用户在使用我这款软件时，想玩水果忍者一样快刀斩乱麻，在苦涩的英语学习过程中也有些许快乐与轻松。</p><p>具体系统操作过程如下所示。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230110231730425.png" alt="image-20230110231730425"></p><hr><h1 id="功能实现">功能实现</h1><ul><li><p>界面显示是使用的EasyX的图形库头文件，界面图片需要用PS制作图片（共26张）。</p></li><li><p>接受用户的输入信息使用了InputBox和MessageBox函数。</p></li><li><p>用户信息的储存和词库的储存使用了ini文件，该文件可以通过“键-节”来便捷的访问“值”。</p></li><li><p>同时增加了两个结构体用来储存用户信息以及单词信息。</p></li><li><p>编码方式为Unicode，它是宽字符的一种，是EsayX所必须的，它有很好的可移植性，便于不同地区的学习。但它也有个缺点就是一般编码方式的函数不能正常使用，需要转换，不利于新手小白使用。</p></li></ul><hr><h1 id="软件截图">软件截图</h1><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/welcome.png" alt="welcome"></p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/first_interface.png" alt="first_interface"></p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/recitemenu.png" alt="recitemenu"></p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230110232700753.png" alt="image-20230110232700753"></p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/exit.png" alt="exit"></p><hr><h1 id="特色亮点">特色亮点</h1><p>这个项目在开发出来以后，我还是比较满意的，它有以下亮点：</p><ol><li>添加bgm，增强沉浸感</li><li>鼠标交互，方便快捷</li><li>美女真人发音，宅男福利</li><li>功能强大，三大背诵功能任你选</li><li>界面精美</li><li>纯净无广告</li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql鉴权方式转换方法，auth_sockt方式与用户模式</title>
      <link href="/30d59510/"/>
      <url>/30d59510/</url>
      
        <content type="html"><![CDATA[<h2 id="使用auth-sockt插件">使用auth_sockt插件</h2><h3 id="转换方法">转换方法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> auth_socket;</span><br></pre></td></tr></table></figure><h3 id="检查更改">检查更改</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>,authentication_string,plugin,host <span class="keyword">FROM</span> mysql.user;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/asa-pic/pic_1/img/image-20221007235135599.png" alt="检查鉴权"></p><h3 id="auth-sockt方式说明">auth_sockt方式说明</h3><ul><li><p>这种验证方式不要求输入密码，只需要输入sudo mysql即可进入mysql服务</p></li><li><p>安全特点：</p><ul><li><p>只能用 UNIX 的 socket 方式登陆，这就保证了只能本地登陆，用户在使用这种登陆方式时已经通过了操作系统的安全验证</p></li><li><p>操作系统的用户和 MySQL 数据库的用户名必须一致，例如要登陆 MySQL 的 root 用户，必须用操作系统的 root 用户登陆</p></li></ul></li></ul><h2 id="使用用户密码登录">使用用户密码登录</h2><h3 id="转换方法-2">转换方法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;YOUR_PASS_WORD&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>YOUR_PASS_WORD</code> 处应该输入设置mysql时的root密码。</p><h3 id="检查更改-2">检查更改</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>,authentication_string,plugin,host <span class="keyword">FROM</span> mysql.user;</span><br></pre></td></tr></table></figure><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103232247138.png" alt="检查鉴权"></p><h3 id="该方式说明">该方式说明</h3><ul><li>进入mysql时需输入<code>mysql -u root -p </code>，回车后，输入前面设置的<code>YOUR_PASS_WORD</code>即可</li><li>当我们在系统投产后，操作系统的 root 用户和 MySQL 的 root 用户就不能随便使用时可以改为这种方式</li></ul>]]></content>
      
      
      <categories>
          
          <category> 实验实操 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于CycleGAN的图像风格迁移模型设计与创业策划（下）</title>
      <link href="/66af7779/"/>
      <url>/66af7779/</url>
      
        <content type="html"><![CDATA[<h1 id="融资情况">融资情况</h1><h2 id="融资与资金应用">融资与资金应用</h2><p>在公司不同的发展阶段，采用不同的筹资方式：</p><table><thead><tr><th><strong>成长阶段</strong></th><th><strong>筹措方式</strong></th></tr></thead><tbody><tr><td><strong>初创期</strong></td><td>创业团队自筹资金，吸纳种子投资和天使投资</td></tr><tr><td><strong>成长期</strong></td><td>内部融资、吸引合作企业投资、吸收风险投资</td></tr><tr><td><strong>成熟期</strong></td><td>债务融资、IPO  上市进入资本市场融资</td></tr></tbody></table><p>公司拟在2021年年底成立，计划在天使轮融资达500万元。在公司成立初期，融资将用于市场宣传开拓、渠道对接会、新产品开发测试以及房屋租赁等方面。成长期和成熟期，公司的规模逐渐扩大，将加大研发力度。同时，公司的人力、办公设备等用于公司正常经营的资金也会逐渐增加。</p><h2 id="未来收益预测">未来收益预测</h2><p>破晓科技计划从 2021 年底开始正式推出产品，预计在五年内将基本覆盖全国市场。公司的主打产品为图像风格大师、个性化风格迁移定制服务。分别解决个体及团体的巨大需求。根据我们的预测，五年内累计营业收入超过 3320万元，净利润超过1694万元。公司未来五年销售产品服务的收入与各成本情况如下表（单位：万元）所示：</p><table><thead><tr><th><strong>项目</strong></th><th><strong>2021</strong></th><th><strong>2022</strong></th><th><strong>2023</strong></th><th><strong>2024</strong></th><th><strong>2025</strong></th></tr></thead><tbody><tr><td><strong>营业收入</strong></td><td>210.00</td><td>336.00</td><td>537.60</td><td>860.16</td><td>1376.26</td></tr><tr><td><strong>营业成本</strong></td><td>28.00</td><td>44.43</td><td>61.53</td><td>93.66</td><td>145.27</td></tr><tr><td><strong>税金及附加</strong></td><td>13.23</td><td>21.17</td><td>33.87</td><td>54.19</td><td>86.70</td></tr><tr><td><strong>销售费用</strong></td><td>18.90</td><td>36.96</td><td>48.92</td><td>67.09</td><td>122.49</td></tr><tr><td><strong>管理费用</strong></td><td>27.30</td><td>42.00</td><td>72.58</td><td>120.42</td><td>173.41</td></tr><tr><td><strong>财务费用</strong></td><td>0.00</td><td>0.00</td><td>0.00</td><td>0.00</td><td>0.00</td></tr><tr><td><strong>利润总额</strong></td><td>125.37</td><td>195.89</td><td>326.86</td><td>534.16</td><td>862.91</td></tr><tr><td><strong>所得税费用</strong></td><td>31.34</td><td>48.97</td><td>81.72</td><td>133.54</td><td>215.73</td></tr><tr><td><strong>税后净利润</strong></td><td>94.03</td><td>146.92</td><td>245.15</td><td>400.62</td><td>647.18</td></tr><tr><td><strong>净资产</strong></td><td>426.09</td><td>565.36</td><td>786.83</td><td>1148.09</td><td>1763.43</td></tr><tr><td><strong>净资产收益率</strong></td><td>22.07%</td><td>25.99%</td><td>31.16%</td><td>34.89%</td><td>36.70%</td></tr></tbody></table><p>在不同应用领域的预测收益（单位：万元）如下：</p><table><thead><tr><th><strong>应用领域</strong></th><th><strong>2020</strong></th><th><strong>2021</strong></th><th><strong>2022</strong></th><th><strong>2023</strong></th><th><strong>2024</strong></th></tr></thead><tbody><tr><td><strong>游戏制作</strong></td><td>94.50</td><td>201.60</td><td>252.67</td><td>412.88</td><td>633.08</td></tr><tr><td><strong>社交自媒体</strong></td><td>52.50</td><td>94.08</td><td>139.78</td><td>206.44</td><td>330.30</td></tr><tr><td><strong>社会安防</strong></td><td>31.50</td><td>50.40</td><td>75.26</td><td>129.02</td><td>233.96</td></tr><tr><td><strong>城市规划</strong></td><td>31.50</td><td>40.32</td><td>69.89</td><td>111.82</td><td>178.91</td></tr></tbody></table><h2 id="经营分析">经营分析</h2><h3 id="盈亏平衡分析">盈亏平衡分析</h3><p>通过对本项目固定成本和变动成本的计算进行盈亏平衡分析，可以确定出项目要求的最低销售水平。将公司的预测销售水平与项目要求的最低销售水平对比可以得出公司预测销售水平的可变动幅度，从而可知公司的安全性高低。</p><table><thead><tr><th><strong>年份</strong></th><th><strong>2021</strong></th><th><strong>2022</strong></th><th><strong>2023</strong></th><th><strong>2024</strong></th><th><strong>2025</strong></th></tr></thead><tbody><tr><td><strong>预计销售量（单位：万份）</strong></td><td>18.90</td><td>40.32</td><td>50.53</td><td>82.58</td><td>126.62</td></tr><tr><td><strong>预计销售额（单位：万元）</strong></td><td>94.50</td><td>201.60</td><td>252.67</td><td>412.88</td><td>633.08</td></tr><tr><td><strong>盈亏平衡点销售量（单位：万份）</strong></td><td>4.56</td><td>9.88</td><td>10.27</td><td>15.64</td><td>23.02</td></tr><tr><td><strong>盈亏平衡点销售额（单位：万元）</strong></td><td>22.79</td><td>49.38</td><td>51.37</td><td>78.19</td><td>115.11</td></tr></tbody></table><p>由上面盈亏平衡分析表可知，每一年的预计销售额远远高于盈亏平衡点销售额， 预计销售量也远远高于盈亏平衡点销售量，这表明公司经营的安全系数较高。随着公司业务和规模的扩大，存在成本边际递减效应，单位成本呈现下降的趋势。随着公司占据的市场份额的增加，可实现的利润空间也会越来越大。</p><p>社交自媒体、社会安防、城市规划领域的盈亏平衡如下：</p><table><thead><tr><th><strong>年份</strong></th><th><strong>2021</strong></th><th><strong>2022</strong></th><th><strong>2023</strong></th><th><strong>2024</strong></th><th><strong>2025</strong></th></tr></thead><tbody><tr><td><strong>社交自媒体预计销售额（单位：万元）</strong></td><td>52.50</td><td>94.08</td><td>139.78</td><td>206.44</td><td>330.30</td></tr><tr><td><strong>社交自媒体盈亏平衡点销售额（单位：万元）</strong></td><td>12.66</td><td>23.04</td><td>28.42</td><td>39.09</td><td>60.05</td></tr><tr><td><strong>社会安防预计销售额（单位：万元）</strong></td><td>31.50</td><td>50.40</td><td>75.26</td><td>129.02</td><td>233.96</td></tr><tr><td><strong>社会安防盈亏平衡点销售额（单位：万元）</strong></td><td>7.60</td><td>12.34</td><td>15.30</td><td>24.43</td><td>42.54</td></tr><tr><td><strong>城市规划预计销售额（单位：万元）</strong></td><td>31.50</td><td>40.32</td><td>69.89</td><td>111.82</td><td>178.91</td></tr><tr><td><strong>城市规划盈亏平衡点销售额（单位：万元）</strong></td><td>7.60</td><td>9.87</td><td>14.21</td><td>21.18</td><td>32.53</td></tr></tbody></table><h2 id="财务报表与财务分析">财务报表与财务分析</h2><h3 id="财务预算假设">财务预算假设</h3><p>（一）预算编制说明</p><p>本预算报告是公司本着谨慎性原则，结合市场需求和业务拓展计划，在公司的预算基础上，按合并报表的要求,依据2014-2020年国内主要游戏运营商运营计划、Vlog自媒体市场规模行情、国内视频监控存储市场以及中国城市规划建设行业市场业务进展情况进行编制。本预算报告的编制基础是:假设公司签订的供销合同、游戏运营计划、Vlog自媒体运营、城市安防监控升级业务、城市规划建设业务规划均能按时按计划履行。</p><p>本预算报告在总结分析2014-2020年经营形势的基础上结合公司发展战略,充分考虑了金融危机、疫情影响、市场开拓、销售价格、汇率、互联网等因素对预算期的影响。本预算报告包括母公司、下属全资子公司及下属控股子公司。</p><p>（二）基本假设</p><ol><li>公司所遵循的国家和地方的现行有关法律、法规和制度无重大变化;</li><li>公司主要经营所在地及业务涉及地区的社会经济环境无重大变化;</li><li>公司所处行业形势及市场行情无重大变化;</li><li>公司2021年度销售的产品涉及的市场无重大变动;</li><li>公司主要产品和原料的市场价格和供求关系不会有重大变化;</li><li>公司生产经营业务涉及的信贷利率、税收政策以及外汇市场汇价将在正常范围内波动;</li><li>公司现行的生产组织结构无重大变化,计划的投资项目能如期完成并投入生产;</li><li>无其他不可抗力及不可预见因素对本公司造成的重大不利影响。</li></ol><p>（三）预算编制依据</p><ol><li><p>公司2021年营业收入的主要目标：公司预计2021年度实现营业收入210万元。</p></li><li><p>根据《公司法》的相关规定计提法定盈余公积比例为 10%；</p></li><li><p>依据国家税法及其相关条例，公司上缴税费项目和比例为：</p><ul><li>增值税：税率为 13%；</li><li>城市维护建设税：税率 7%，以应缴增值税税额为计税依据；</li><li>教育费附加：税率 3%，以应缴增值税税额为计税依据；</li><li>地方教育附加：税率 2%，以应缴增值税税额为计税依据；</li><li>企业所得税：税率 25%。</li></ul></li><li><p>公司主要业务收入为图像风格大师个体会员制收费以及个性化风格迁移定制服务。公司预计将于2021年末成立并投入运营。</p></li></ol><h3 id="利润表">利润表</h3><table><thead><tr><th><strong>项目</strong></th><th><strong>2020</strong></th><th><strong>2021</strong></th><th><strong>2022</strong></th><th><strong>2023</strong></th><th><strong>2024</strong></th><th><strong>2025</strong></th></tr></thead><tbody><tr><td><strong>营业收入</strong></td><td>0.00</td><td>210.00</td><td>336.00</td><td>537.60</td><td>860.16</td><td>1376.26</td></tr><tr><td><strong>营业成本</strong></td><td>5.58</td><td>25.20</td><td>39.98</td><td>55.37</td><td>84.30</td><td>130.74</td></tr><tr><td><strong>税金及附加</strong></td><td>0.01</td><td>13.23</td><td>21.17</td><td>33.87</td><td>54.19</td><td>86.70</td></tr><tr><td><strong>销售费用</strong></td><td>3.49</td><td>18.90</td><td>36.96</td><td>48.92</td><td>67.09</td><td>122.49</td></tr><tr><td><strong>管理费用</strong></td><td>4.40</td><td>27.30</td><td>42.00</td><td>72.58</td><td>120.42</td><td>173.41</td></tr><tr><td><strong>财务费用</strong></td><td>0.00</td><td>0.00</td><td>0.00</td><td>0.00</td><td>0.00</td><td>0.00</td></tr><tr><td><strong>利润总额</strong></td><td>-13.48</td><td>125.37</td><td>195.89</td><td>326.86</td><td>534.16</td><td>862.92</td></tr><tr><td><strong>所得税费用</strong></td><td>0.00</td><td>31.34</td><td>48.97</td><td>81.72</td><td>133.54</td><td>215.73</td></tr><tr><td><strong>税后净利润</strong></td><td>-13.48</td><td>94.03</td><td>146.92</td><td>245.15</td><td>400.62</td><td>647.19</td></tr></tbody></table><h2 id="风险资金退出">风险资金退出</h2><p>参考其他公司的风险资本退出方式，公司在决策时考虑了公司运营是否良好、是否满足 IPO 条件、是否有上市公司愿意定向增发、未来投资报酬率会不会低于 预算值、是否找有股东满意的收购者等多个因素。</p><p>公司会以最负责的态度对待投资者，将会根据实际情况，选择最适合的风险资本退出方式。风险资金退出时我们遵循的原则是：一方面保障天使投资者的利益，使天使投资者在资金退出时能获取最大收益。另一方面要注重公司的稳定性， 选择能促进公司发展的风险资金退出方式。</p><p>一般来说，风险资本退出的方式有创业板上市、上市公司定向增发、向第三者转让、管理层收购、创业者回购股份及清算六种可能，下面结合公司不同时期经营情况分别进行说明。</p><h3 id="当公司运营良好时">当公司运营良好时</h3><p><strong>（1）创业板公开上市</strong></p><p>结合目前破晓科技公司的战略规划，公司计划在未来五六年间完成公开上市（IPO），这是最适合的风险资本退出方式，在帮助风险资本退出，保障风险投资商的利益的同时，也提升自身的知名度和融资水平，实现公司自身的发展。</p><p>当公司发展到一定规模时，我们将争取在中国股市的创业板上市（IPO）， 申请公开发行股票，以筹集更多的资金。届时风险投资公司可通过出售其掌握的股份而收回投资，风险投资实现成功退出。这种方式让风险投资者的投资收益最高， 华南脑控将获得大量现金流入，增强流动性，提高风险企业的知名度和公司形象， 还能激励拥有原始股权的员工，留住优秀人才。</p><p><strong>（2）上市公司定向增发</strong></p><p>由于破晓科技的产品市场前景广阔，需求量巨大，运用市场后将会获得较高的盈利水平，这必将引起国内外相关企业的关注。如果投资者把公司出售，市场上相关企业由于本公司与其竞争，对其构成威胁，他们出于自身利益的考虑，极有可能买下本公司。而由同行业上市公司对本公司进行定向增发，可以使得公司实现要素资本市场化，这是在公司不能进行 IPO 的情况下最好的选择。</p><p><strong>（3）向第三者转让</strong></p><p>在五年后的任何时间，如果有一个难得的出售股份的机遇，且价格水平符合风险投资公司的要求，风险投资公司也可利用这一机遇，在保证该价格水准的前提下，把所拥有的权益转卖第三方。</p><p><strong>（4）管理层收购</strong></p><p>如果五年后条件不成熟而未能上市， 投资机构有权利要求管理层收购（MBO）。管理层收购（MBO）具体来说，就是由企业管理层发动，组建一个外部投资人集团，通过投资银行、信托等金融机构的支持，收购原来公开上市或非上市的企业的股票和资产，使它转变为管理层控制的企业，保证最低收益。</p><p><strong>（5）创业者回购股份</strong></p><p>从 2020 年开始，如果投资者的年投资报酬率低于期望值，风险投资公司可以要求创业队或其它股东买回其全部股权。</p><h3 id="当公司运营不佳时">当公司运营不佳时</h3><p>当公司运营不良，被依法宣告破产时，按照有关法律规定，组织有关部门、中介机构人员成立破产管理人，对公司进行破产清算，这是风险投资不成功时减少损失的最佳退出方式。</p><hr><h1 id="公司架构">公司架构</h1><h2 id="公司组织架构">公司组织架构</h2><h3 id="公司发展第一阶段（1-5年）">公司发展第一阶段（1-5年）</h3><p>公司发展第一阶段，公司将采用创业型组织结构模式，企业的管理者对若干下属实施直接控制，并由其下属执行一系列的工作任务。此结构虽然较为简单，但是在创业初期能够实现较高的工作执行效率。随着公司的发展壮大，将逐步向职能制组织结构进行转变，公司进一步将职权和责任分派给专门单元进行管理。具体如下图所示。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103220640344.png" alt="公司发展第一阶段组织架构（1-5年）"></p><h3 id="公司发展第二阶段（5-10年）">公司发展第二阶段（5-10年）</h3><p>在公司的快速成长阶段，要实现向全国市场全面推开公司业务，要求市场部具有很强的市场推广、产品销售能力及良好的售后服务。因此，市场部进一步划分为市场部、销售部、客户部，各司其职。</p><p>市场部负责拟定市场开发计划和市场推广计划；调查并收集市场信息；市场分析与预测；制定营销、产品、形象等企划案，与销售部、客户部共同实施等。</p><p>销售部围绕公司下达的销售目标拟定营销方针和策略计划，负责产品的销售工作；组织产品的发送以及受理退货等。</p><p>客户部负责收集客户信息；整理客户问题，反馈到销售部、技术部等相关部门；建立客户信息数据库，形成客户资料的信息化管理等。</p><h3 id="部门职责">部门职责</h3><table><thead><tr><th><strong>部门</strong></th><th><strong>主要职责</strong></th></tr></thead><tbody><tr><td><strong>董事会</strong></td><td>决定公司的发展战略及基本政策；  决定公司高层管理人员的任命；  针对总经理做出的战略计划等，行使表决通过权。</td></tr><tr><td><strong>技术部</strong></td><td>协助总经理进行决策和处理日常事务  对IoT设备的软件、硬件研究开发  针对平台对接的研究开发  对平台的功能进行测试，排除平台存在的漏洞  为技术人员制定培训计划；  对客户提供相应的培训和技术支持</td></tr><tr><td><strong>产品市场部</strong></td><td>全力做好市场开发与市场调研工作，帮助实现公司销售目标。</td></tr><tr><td><strong>销售支持部</strong></td><td>全力负责公司销售工作，完成公司销售目标。</td></tr><tr><td><strong>市场宣传部</strong></td><td>建立与客户的良好合作关系，为公司销售目标的实现提供帮助。</td></tr><tr><td><strong>财务部</strong></td><td>进行财务预测、计划、控制、分析和检查；拟定并执行公司各项财务管理和会计核算制度；编制财务报表和年度财务报告；财务预算，成本控制。</td></tr><tr><td><strong>人力资源部</strong></td><td>负责制定公司人事劳动工作的规章制度并监督执行；  负责公司人员的招聘、培训、考核，并进行工资核算；  处理办公室事务，收集处理各种数据信息与收发文件；  统筹管理公司安全保卫、清洁卫生等后勤事物。</td></tr></tbody></table><h2 id="成员构成">成员构成</h2><h3 id="成员背景">成员背景</h3><p>本项目团队成员主要来自于电子科技大学信息与通信工程学院及电子科技大学计算机视觉与机器智能实验室。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103220735195.png" alt="电子科技大学计算机视觉与机器智能实验室"></p><p>计算机视觉与机器智能实验室依托于电子科技大学信息与通信工程学院，科研工作主要涉及智能识别与视觉感知的基础理论研究与应用技术开发，研究方向包括：图像处理与模式识别，视觉目标检测、跟踪与识别，计算机视觉，智能视频监控与场景理解，智能人机交互，三维场景信息分析与处理，视觉测量，多源遥感图像融合与信息挖掘，图像采集、压缩与传输，数字视频编解码和多媒体技术等。</p><p>2007年以来，实验室在信号与信息处理学科下，围绕图像处理、机器学习、计算机视觉与机器智能等热点研究方向，以国家973计划项目子课题、国家自然科学基金、四川省科技计划等二十余项科研项目以及多项企业横向项目为支持，在计算机视觉、流形学习、深度学习、人脸检测与识别、人体动作识别、人体行为分析、行人检测与跟踪及再识别、智能视频监控与场景理解、遥感图像智能分析与识别、信息融合、医学图像处理等相关方向进行了深入的探索。在IEEE Trans、ISPRS、Radar Conference等国际知名期刊、会议发表学术论文一百多篇。</p><p>实验室理念为持之以恒地追求一流学术，立足行业及领域需求实现应用技术开发并积极寻求由影响力的企业建立特定行业的产学研合作。目前实验室师资配置为教授2名，副教授1名，高级工程师1名。同时共有研究生37名(博士生7名，硕士生30名)。</p><h3 id="指导老师介绍">指导老师介绍</h3><table><thead><tr><th><strong>成员</strong></th><th><strong>职务</strong></th><th><strong>个人简介</strong></th><th><strong>职责</strong></th></tr></thead><tbody><tr><td><strong>程建</strong></td><td>高校  指导老师</td><td>电子科技大学信息与通信工程学院教授、博导，计算机视觉与机器智能实验室负责人。现主要研究方向为：图像处理与模式识别、计算机视觉、流形学习、深度学习、人脸检测与识别、人体动作识别、人体行为分析与活动识别、智能视频监控与场景理解、遥感图像智能分析与识别、信息融合、机器视觉及工业应用等。在国内外重要学术期刊和学术会议上发表学术论文100多篇，其中SCI收录30多篇，EI收录80多篇；申请国家发明专利40多项，其中获得国家发明专利授权10多项。主持承担国家973计划项目子课题1项、国家自然科学基金项目2项、中国博士后科学基金项目1项、中国博士后科学基金特别资助项目1项、四川省科技计划项目1项、教育部博士点基金项目1项、国家重点实验室开放基金2项、中央高校基本科研业务费项目2项、电子科技大学青年教师科技基金重点项目1项、企业横向合作项目6项；参与国家973计划项目子课题1项、国防863计划项目2项。</td><td>为公司战略规划、定位和管理提供建议和意见，</td></tr><tr><td><strong>刘欣刚</strong></td><td>高校  指导老师</td><td>电子科技大学电子工程学院教授、信息与通信工程学院教授，电子科技大学信号与信息处理专业博士生导师，国际化人才，2009年获韩国岭南大学情报通信学部博士学位。其研究领域多与多媒体信号处理及通信相关，主要包括复杂环境下人脸/人体行为识别，高性能视频编解码，视频错误掩盖，图像质量评估，模式判决等。近年来以第一作者/通信作者的身份在相关研究方向的国际杂志、学术会议上发表了近百篇SCI、EI 检索的学术文章。主持科技部重点研发、国家自然基金、四川省基础研究重点等20余项纵向、横向项目。作为大会主席、程序主席等参与了如IEEE CSE、IEEE CIT等二十余个IEEE 国际学会的主办工作。受邀担任多个如JWCN、MTAP 等具有国际影响力的学术杂志的特邀编辑。</td><td>监督项目的总体运行与推进，指导项目开发；协助监督项目一级编制，二级计划审批及执行监督、考核和管理。</td></tr></tbody></table><h2 id="人力资源管理">人力资源管理</h2><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103220822717.png" alt="人力资源规划图"></p><p>公司现处于十分关键的业务拓展阶段，且在移动互联网的动态环境中，必须要有大量人才来支撑整个扩张的事业版图。人力资源必须紧跟随公司的发展战略目标，明确公司的业务发展对人力资源的数量、质量和结构的需求。结合组织自身的优势和不足，及时给公司引进优秀的人才，并加以培训与激励，让他们能最大限度地发挥自己的潜能，实现自己的价值，与公司共同成长。</p><p>人力资源管理一般可从公司的战略目标出发，分为职位管理、招聘选拔和绩效考核三条主线，系统性地对人力资源进行管理和开发，为公司的健康可持续发展提供人员的有力支撑。</p><p>随着公司的发展，人员将会持续增长，公司的组织架构也会随之调整，各个部门不断扩大，在五年中期会将综合部拆分为财务部、人力资源部、行政部三个部门分工合作，使工作分配更加清晰，完成度更高。</p><h3 id="人员招聘">人员招聘</h3><p>公司根据企业的发展战略，人才供给与需求的情况等，制定企业的人员招聘计划并由人力资源部进行实施。每年年底，公司会根据下年的发展计划和经营目标、本年度员工的流动率，由人力资源部组织，其他部门协助，制定下一年全年的人员招聘计划。人员招聘将本着公平、公正的原则，杜绝出现任人唯亲的情况，公司目前的招聘渠道主要通过校园招聘、内部招聘和外部招聘。</p><h3 id="企业人力资源开发体系">企业人力资源开发体系</h3><p>破晓公司的人力资源开发体系主要面对企业的高层管理者，企业将会邀请名牌高校的管理学院的教授来企业进行指导和专业培训；委派参加各种商业活动，使其有机会与各种商业上的知名人士进行交流和学习；对于有潜力的年轻管理者，将公费给其到名牌高校或国外进行进修学习。</p><p>破晓公司的人力资源开发体系也面对公司内部管理者，委派他们去参加各类管理或者技术方面的讲座以及交流会；邀请知名管理人员或者资深的技术人员来企业为高层管理者做讲座；与高校合作建立科研基地，在与高校的合作下不断提高技术和产品。</p><h3 id="绩效管理">绩效管理</h3><p>破晓公司将根据工作性质的不同建立一个完整的体系，不仅考评员工行为结果，而且发挥战略的导向作用，使员工的个人行为与企业战略相契合，更好地促进战略目标的实现，使员工不仅关心自己的绩效结果，同时更关注组织战略的实施。</p><p>绩效目标体系从公司战略分析开始，到公司业务重点与体系，层层落实到岗位，从而建立起了基于公司战略的组织目标责任体系。基于战略的绩效目标体系要得以落实，公司需要建立完善的绩效管理制度，使员工评价具有公平性，合理性，保证部门与公司目标的达成。</p><h2 id="公司CIS设计">公司CIS设计</h2><p>CIS 是运用统一的视觉识别设计来传达企业特有的经营理念和活动，从而提升和突出同一化企业形象，使企业形成自己内在独特的个性，最终增强企业整体竞争力。其中包括，理念识别与Logo设计。</p><p>通过对这三方面的全面阐述，我们将华南脑控的经营理念与精神文化整体系统传达给企业内部与社会大众，并使其对企业产生一致的认同感。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103220937979.png" alt="公司Logo"></p><h3 id="理念识别">理念识别</h3><p>企业理念是指企业在长期生产经营过程中所形成的企业共同认可和遵守的价值准则和文化观念，以及由企业价值准则和文化观念决定的企业经营方向、经营思想和经营战略目标。</p><p>对于我们拟成立的破晓公司，我们希望能够将我们公司的经营理念与精神文化整体系统传达给企业用户与社会大众，并使其对企业产生一致的认同感。</p><p>公司使命：做世风格迁移的领导者与普及者。作为风格迁移应用智能多模态源技术及核心算法提供商，一直致力于用公司自主研发的AI技术来造福企业，为大众提供个性化服务。</p><h3 id="公司核心价值观">公司核心价值观</h3><p>科技创新：技术优势是破晓的支撑，而科技创新是破晓的根本。</p><p>创造价值：我们将始终坚持科学研究并致力于将“产学研”结合，为社会所用，创造更大的社会价值，为了人类生活的便利与进步不断前进。</p><p>以人为本：坚持以人为本，企业为员工筑造温暖的家，员工才会与企业“同呼吸，共命运”。</p><h3 id="企业Logo">企业Logo</h3><p>企业理念破晓的logo由“破晓”两个大字组成，为毛笔字所铸，笔锋强有力，代表的是我们公司的朝气，同时这也寓示着公司将团结一心为了未来不断奋斗。企业理念识别是 CIS 基本精神所在，是企业灵魂的核心，是企业识别系统和企业生存发展的原动力，企业信奉的价值观也由此而确立，经由这股内蕴的动力，影响企业的动态、活力制度、组织管理与教育，并扩及对社会公益活动，消费者的参与行为之规划，最后经由组织化、系统化、统一化视觉识别计划，传达企业经营的信息，塑造企业独特的形象，达到识别的目的。</p><hr><h1 id="风险识别与管理对策">风险识别与管理对策</h1><h2 id="风险识别-2">风险识别</h2><p>在当今这个新时代，尤其是处于后疫情时代的企业面临着许多不确定的风险因素，一个企业必须具备提前识别风险并制定管理对策的能力，方可在未来的市场竞争中获得先天性优势并立足于不败之地。本节将从战略风险、财务风险、市场风险、运营风险、法律风险五个方面对破晓公司在未来可能面对的风险进行分析，并为接下来管理对策的制定做好准备。</p><h3 id="风险分类">风险分类</h3><p>结合我公司的自身优势、战略定位、发展目标以及发展过程中可能遇到的风险，我们将风险因素做出以下分类。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103221002694.png" alt="风险项目"></p><h3 id="风险描述">风险描述</h3><p>战略风险、财务风险、市场风险、运营风险、法律风险的具体表现如下：</p><table><thead><tr><th>风险明细</th><th>风险描述</th></tr></thead><tbody><tr><td>国家政策风险</td><td>与本公司相关的国家宏观经济政策、国家产业政策、知识产权等方面的政策会极大地影响公司的运营，为我公司的企业融资、市场供需关系、人事招聘带来巨大的风险。</td></tr><tr><td>技术风险</td><td>在公司的建立初期和开拓市场的过程中出现技术上的重大问题，或者是同行业公司出现了更占优势的风格迁移技术。作为高新技术企业，我公司面临的最大风险就是技术风险。</td></tr><tr><td>产业风险</td><td>来自其他产业的纵向竞争，使得整个产业的发展态势受到严重影响。或是互补产业出现问题，比如游戏行业发展势态低迷，我公司自然会受到影响。</td></tr><tr><td>负债  风险</td><td>对我公司偿还债务的能力进行了错误的估计，使得负债过多，对我公司向上发展带来了巨大的压力。</td></tr><tr><td>资金周转风险</td><td>采用了错误的预测方法，或者是对数据处理的模型出现错误，使得决策应收账款、销售收入的比重以及资金周转率出现时出现失误，以至于资金难以周转。</td></tr><tr><td>竞争风险</td><td>来自同行业的技术上、人才储备上、供求资源等方面的激烈竞争。尤其是公司刚建立的初期，需要面对美图秀秀等大型公司的竞争，生存压力较大。</td></tr><tr><td>经济  风险</td><td>经济周期风险（尤其是当下疫情的冲击），各种汇率、利率的变动，为我公司贷款、企业融资带来巨大的不确定性。同时还有通货膨胀、通货紧缩，影响消费者的购买力，这些都对我公司产生不可估计的影响。</td></tr><tr><td>信用  风险</td><td>对主要客户和主要供应商的信用情况产生了错误的判断，导致我公司遭受巨大损失。</td></tr><tr><td>转型风险</td><td>在运营公司时，对我公司转型的方向、时间节点、转型速度的判断产生重大失误，导致转型失败，给我公司带来巨大打击。</td></tr><tr><td>管理  风险</td><td>企业组织效能低下、缺乏合适的评价和激励标准、管理层缺乏管理经验等管理风险都会让我公司在内部出现危机。</td></tr><tr><td>自然风险</td><td>包括但不限于疫情、火灾、台风、地震等天灾人祸，尤其是在后疫情时代，疫情防控形势严峻，为我公司带来了巨大的挑战。</td></tr><tr><td>知识产权  风险</td><td>专利产权风险、相关技术或权益被侵犯、公司产品被竞争对手模仿等等，这都是我公司可能面临的知识产权风险。</td></tr><tr><td>合同协议风险</td><td>与对接的游戏公司等互补企业签订的合同协议在边界上可能存在模糊或者合同内容本身存在歧义，会为两公司的业务对接甚至是我公司发展产生恶劣影响。</td></tr><tr><td>员工道德  风险</td><td>所任用的员工不能遵守法律法规或者是道德约束，将重要技术泄露给竞争公司，将会为我公司带来不可挽回的损失。</td></tr></tbody></table><p>对于以上风险，我们做出的风险评估如下：</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103221030239.png" alt="风险评估"></p><p>通过以上各类风险的评估我们可以知道，对我公司未来发展影响较大的风险因素有管理风险、产业风险、竞争风险、负债风险、技术风险、知识产权风险、转型风险。</p><h2 id="风险管理">风险管理</h2><h3 id="风险应对">风险应对</h3><p>为了有针对性地对各个风险进行分析，并找到解决方案，接下来我们根据风险大类对他们进行分析，找到应对方法。</p><p><strong>（一）战略风险</strong></p><p>（1）打好政府关系牌，避免由此带来的隐形风险</p><p>一个企业的发展离不开当地政府的大力支持，我公司将会通过赞助当地基础设施建设项目工程、开展联谊会议等方式和当地政府建立妥善的关系，减少由此带来的隐形损耗，建立标杆企业形象，从而在大方向上的政策上做到及时应对，进退有路。</p><p>（2）对科研队伍严把关，加大研发投入，提高团队开发能力。</p><p>作为高新技术企业，我公司对科研的重视程度绝对是最看重的。我公司依托电子科技大学计算机视觉与机器智能实验室，借助这个平台，我们会进行频繁的校企合作，打造校企合作标杆形象。同时，在国内外优秀高校高薪聘用优秀毕业生，加入我们的研发团队，创造一个优秀的开发队伍。同时，购买先进的科研设备，打造国内领先的计算机视觉实验室，为科技研发打造硬件平台。最后，还要对科研队伍进行再审造，进一步提高队伍的开发能力。</p><p>（3）用户至上，不断回应用户的需求，从而植根于市场。</p><p>尽可能地进行市场调研（包括但不限于问卷调查、手机用户体验反馈等等），深度挖掘用户的多样化需求，比如风格迁移的方向、场景建模的效果、软件上手的难易程度等等，始终致力于满足用户的个性化、多样化需求，从而在市场上能够取得一定的优势。</p><p><strong>（二）财务风险</strong></p><p>（1）建立健全财务风险预警系统</p><p>采用合适的数学模型对公司财务进行分析，并借助先进的财务状况评价标准，对我公司的财务情况有正确的认识。做到加强资金预算，有效安排资金，提高公司财务的流动性，保障公司财务的稳定性，防止现金流断裂，减轻财务压力。</p><p>（2）加强企业公关能力，提高企业的信誉，确保企业融资顺利进行</p><p>我公司在成立初期面临的生存压力十分巨大，能否走出这一困境很大程度上取决于资金是否充裕，因而保障企业融资顺利进行非常重要。我们会和当地的政府、新闻媒体进行密切交流和合作，打响企业的知名度，建立良好的社会关系网，为企业的生存和进一步发展提供了坚实的保障。</p><p><strong>（三）市场风险</strong></p><p>（1）加大研发力度，关注竞争对手</p><p>归根到底，企业的核心竞争力始终是产品的质量。唯有加大研发力度，不断开发出能够满足用户多样化、个性化需求的风格迁移工具，这才是我公司立足于市场的根本。同时，也应该不断关注自己的竞争对手，尤其是像美图秀秀这种大型公司，要及时分析他们的发展方向，做到知己知彼，方可百战不殆。</p><p>（2）借款前期限错位，降低贷款成本</p><p>利率浮动主要影响的是我公司的贷款成本，因此，我们可以采取借款前期限错位的方法来规避。当预测贷款利率上升时，公司借入长期贷款，减少短期贷款的数量；当预测利率下降时，公司增加短期贷款的数量。这样，可以通过调整贷款头寸来分散部分利率风险。</p><p>（3）及时更新客户和供应商的信用情况</p><p>只有不断更新用户和供应商的信用情况，才能对他们的信用情况进行正确的评估，对信用情况差的客户或者供应商在合作时应提高警惕。</p><p><strong>（四）运营风险</strong></p><p>（1）谨慎转型，走稳健路线</p><p>在我公司转型的关键节点，我们会通过开展内部会议来凝聚团队共识，同时更多了解外界（尤其是互补企业，比如游戏开发、社会安防相关领域的企业）对我们的意见和建议，兼听则明，以此来尽量避免过于莽撞的转型想法。</p><p>在具体的行动落实上，我们尽量争取走稳健路线，发展方向上朝着个性化服务、多样化服务的方向努力。同时，我们还会以市场为导向进行品牌化运作、建立有营销团队，主公大型客户取得示范化效应以达到体现企业形象的目的，从而凸显企业品牌，为转型成功打下坚实基础。</p><p>（2）积极营造公司融洽氛围，完善管理制度</p><p>可以通过外出团建、联谊会等形式推动公司内部交流，尽量消除员工之间的隔阂，从而提高公司的整体效率和组织效能。建立健全评价和激励标准，提高员工的工作积极性，让我公司由内而外的强大。</p><p>（3）公司重要文件及时做好备份，安置消防设施，做好疫情防控</p><p>作为高新技术企业，科技是我们的第一生产力。考虑到自然灾害的不确定性，因而我们要把公司重要的文件及时做好备份，同时消防设施也要在公司内部全面安置，这样才能做到有备无患。同时，在后疫情时代，我们也要有较高的疫情防控意识，要求员工佩戴口罩工作，同时分配人员分片分区工作，防止人员聚集，做好疫情防控。</p><p><strong>（五）法律风险</strong></p><p>（1）保护知识产权，理清合同协议</p><p>我们公司在计算机视觉领域的许多知识产权是我们赖以发展的根基，但是不排除被竞争公司模仿甚至是抄袭的可能。因此我们要提高维权意识，聘用相关领域的法律人士始终关注我们公司的知识产权，从而确保知识产权不被侵犯。同时，在和其他公司签订合同协议的时候，也要让法律专业人士对合同的框架进行全方面的解读，防止在细微之处出现漏洞，致使我们公司的合法权益被侵犯。</p><p>（2）打造企业文化，提高员工的企业文化认同感，从而避免技术外流</p><p>我们公司将通过打造具有特色的企业文化，增强整个团队的集体荣誉感，建立一个有凝聚感的研发队伍，尽可能地满足团队的各种需求，从根本上杜绝了技术外流的可能。</p><h3 id="风险预警机制">风险预警机制</h3><p>除了完善应对风险的技巧，我们还有具有提前识别风险的能力。接下来我们根据公司自身的商业模式、战略定位、组织特点等因素，分析出我们公司的风险预警机制。建立我公司的风险预警机制应注意以下几个方面：</p><ul><li><p>确保公司内部沟通渠道通畅</p><p>对于公司存在的风险只有身处一线的员工才能切身体会，但公司的决策往往由管理者来决定，这就要求我们要确保公司内部沟通渠道顺畅，下属可以及时将发现的潜藏的风险汇报给上级，管理者也应该及时做出相应的应对政策并迅速传达给下级。</p></li><li><p>明确风险管理岗位责任制和完善考核制度</p><p>风险管理岗位是对于风险管理岗位要做到责任落实，对于潜在的风险，瞒报、迟报、误报等失职行为要进行应有的责罚，对于及时上报等积极表现要给予适当的奖励。此外，还要定期对风险管理岗位员工进行考核，完善考核制度，确保员工的工作积极性。</p></li><li><p>完善企业财务风险预警机制</p><p>我们公司应明确自身财务体系的变化，不可一味地照搬其他公司的财务风险预警机制，要结合自身财务的特点，完善财务风险预警机制。方法包括但不限于增强对大数据的管理与利用程度，将财务风险进行数字化表示，同时增强财务风险管理岗位的高素质队伍建设，不断进行新的风险预警机制的探索。</p></li></ul><blockquote><p>鸣谢：子瀛子、怡龙子、顺强子、子力子、琪琪子、一凡子等</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器视觉 </tag>
            
            <tag> 学生竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于CycleGAN的图像风格迁移模型设计与创业策划（中）</title>
      <link href="/e3f6879b/"/>
      <url>/e3f6879b/</url>
      
        <content type="html"><![CDATA[<h1 id="解决方案">解决方案</h1><h2 id="项目计算框架">项目计算框架</h2><p>本项目采用华为提出的MindeSpore科学计算框架。</p><h3 id="昇腾AI全栈">昇腾AI全栈</h3><p>MindSpore科学技术框架隶属于华为昇腾AI全栈。昇腾计算，是基于昇腾系列处理器构建的全栈AI计算基础设施及应用，包括昇腾Ascend系列芯片、Atlas系列硬件、CANN芯片使能、MindSpore AI框架、ModelArts、MindX应用使能等。华为Atlas人工智能计算解决方案，是基于昇腾系列AI处理器，通过模块、板卡、小站、服务器、集群等丰富的产品形态，打造面向“端、边、云”的全场景AI基础设施方案，涵盖数据中心解决方案、智能边缘解决方案，覆盖深度学习领域推理和训练全流程。昇腾AI全栈如下图所示：</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231016240.png" alt="昇腾AI全栈"></p><h3 id="MindSpore科学计算框架">MindSpore科学计算框架</h3><p>MindSpore是一个全场景深度学习框架，旨在实现易开发、高效执行、全场景覆盖三大目标，其中易开发表现为API友好、调试难度低，高效执行包括计算效率、数据预处理效率和分布式训练效率，全场景则指框架同时支持云、边缘以及端侧场景。</p><p>MindSpore总体架构如下图所示，下面介绍主要的扩展层（MindSpore Extend）、前端表达层（MindExpression，ME）、编译优化层（MindCompiler）和全场景运行时（MindRT）四个部分。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231029887.png" alt="MindSpore科学计算框架"></p><p>MindSpore具有以下设计理念：</p><ul><li>MindSpore源于全产业的最佳实践，向数据科学家和算法工程师提供了统一的模型训练、推理和导出等接口，支持端、边、云等不同场景下的灵活部署，推动深度学习和科学计算等领域繁荣发展。</li><li>MindSpore提供了Python编程范式，用户使用Python原生控制逻辑即可构建复杂的神经网络模型，AI编程变得简单。</li><li>目前主流的深度学习框架的执行模式有两种，分别为静态图模式(TensorFlow)和动态图(Pytorch)模式。静态图模式拥有较高的训练性能，但难以调试。动态图模式相较于静态图模式虽然易于调试，但难以高效执行。</li><li>MindSpore提供了动态图和静态图统一的编码方式，大大增加了静态图和动态图的可兼容性，用户无需开发多套代码，仅变更一行代码便可切换动态图/静态图模式，神经网络模型通常基于梯度下降算法进行训练，但手动求导过程复杂，结果容易出错。MindSpore的基于源码转换（Source Code Transformation，SCT）的自动微分（Automatic Differentiation）机制采用函数式可微分编程架构，在接口层提供Python编程接口，包括控制流的表达。用户可聚焦于模型算法的数学原生表达，无需手动进行求导。</li><li>随着神经网络模型和数据集的规模不断增加，分布式并行训练成为了神经网络训练的常见做法，但分布式并行训练的策略选择和编写十分复杂，这严重制约着深度学习模型的训练效率，阻碍深度学习的发展。MindSpore统一了单机和分布式训练的编码方式，开发者无需编写复杂的分布式策略，在单机代码中添加少量代码即可实现分布式训练。</li></ul><p>MindeSpore具有以下层次结构：</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231046249.png" alt="MindeSpore API层次图"></p><p>MindSpore向用户提供了3个不同层次的API，支撑用户进行网络构建、整图执行、子图执行以及单算子执行，从低到高分别为Low-Level Python API、Medium-Level Python API以及High-Level Python API。</p><ul><li>High-Level Python API</li></ul><p>第一层为高阶API，其在中阶API的基础上又提供了训练推理的管理、混合精度训练、调试调优等高级接口，方便用户控制整网的执行流程和实现神经网络的训练推理及调优。例如用户使用Model接口，指定要训练的神经网络模型和相关的训练设置，对神经网络模型进行训练，通过Profiler接口调试神经网络性能。</p><ul><li>Medium-Level Python API</li></ul><p>第二层为中阶API，其封装了低阶API，提供网络层、优化器、损失函数等模块，用户可通过中阶API灵活构建神经网络和控制执行流程，快速实现模型算法逻辑。例如用户可调用Cell接口构建神经网络模型和计算逻辑，通过使用loss模块和Optimizer接口为神经网络模型添加损失函数和优化方式，利用dataset模块对数据进行处理以供模型的训练和推导使用。</p><ul><li>Low-Level Python API</li></ul><p>第三层为低阶API，主要包括张量定义、基础算子、自动微分等模块，用户可使用低阶API轻松实现张量定义和求导计算。例如用户可通过Tensor接口自定义张量，使用ops.composite模块下的GradOperation算子计算函数在指定处的导数。</p><h3 id="TinyMS">TinyMS</h3><p>TinyMS是一款面向的主要用户群体为深度学习初学者、研究领域涉及深度学习结合的科研人员、以及深度学习相关业务应用开发的企业开发人员，用PyThon语言编写的开源深度学习开发工具包，基于以MindSpore为代表的新型开源深度学习框架，提供面向从数据准备到模型部署全流程的极简易用的高阶API封装，并通过易于扩展的模块化设计，提供覆盖多种业务场景的能力。</p><p>TinyMS主要由data, model, serving等模块组成，分场景分领域提供transform数据预处理算子，复用MindSpore原生数据集提供常用数据集，如：cifar-10等。data提供部分自定义数据集和常用的数据下载和解压等常用工具集，model提供常用的预置模型，并提供模型构建，模型编译，模型训练、验证与推理。serving通过搭建服务器来提供AI模型应用服务，为新手提供快速推理的体验。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231138478.png" alt="TinyMS设计框架"></p><p>TinyMS相较于Keras等传统API复杂度更低并提供了大量MindSpore常用预置数据集以及快速部署推理模块。使用MindSpore科学计算框架以及TinyMS程序包进行项目开发在开发难度、速度上都具有显在优势。</p><h2 id="项目数据">项目数据</h2><h3 id="Cityscapes">Cityscapes</h3><p>本项目使用Cityscapes数据集作为城市风格数据集。</p><p>Cityscapes数据集是由包含戴姆勒在内的三家德国单位联合提供，包含50多个城市的立体视觉数据的城市街道场景的语义分割图片数据集。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231158676.png" alt="Cityscapes数据集原始图像(左)与标注图像(右)"></p><p>Cityscapes数据集拥有5000张在城市环境驾驶场景高质量像素级标注图像以及20000张粗标注图像。其中高质量标注图像中对数据集进行了划分，分别为训练集2975张，验证集500张和测试集1525张共19个类别。本项目使用原始图像作为城市风格数据，标注后分割图像作为迁移风格数据进行风格迁移。</p><h3 id="艺术风格数据集">艺术风格数据集</h3><p>本项目在以上基础上，额外使用Cezanne、Monet和Vangogh三位艺术家以及日本Ukiyoe共4种艺术风格数据对原始城市图像进行艺术风格迁移。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231212024.png" alt="艺术风格图像，从左到右为Cezanne、Monet、Vangogh、Ukiyoe"></p><p>通过在Wikiart.org对艺术家画作进行收集，通过删除黑白图像并将其余图像Resize至256×256分辨率，最终得到Cezanne艺术图像525张、Monet艺术图像1072张、Vangogh艺术图像400张以及Ukiyoe艺术图像562张。</p><h2 id="项目算法模型">项目算法模型</h2><h3 id="CycleGAN">CycleGAN</h3><p>本项目使用CycleGAN作为风格迁移网络模型来完成对城市风格图片的风格迁移。CycleGAN是Zhu Yan-Jun等人于2017 ICCV上提出的一种基于生成对抗网络解决图像生成领域中风格迁移问题的算法模型。目前学术界中风格迁移网络模型要求提供图像对，即同一图片的不同风格。在现实中，这样的要求往往是昂贵且不实际的。针对这一问题提出的CycleGAN网络不要求提供图像对，可在没有任何成对训练数据的情况下，通过对图像集特定特征进行描述并将该图像集特征转换为另一图像集特征，完成非成对数据下的图像风格迁移。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231309261.png" alt="成对风格数据(左)与非成对风格数据(右)"></p><h3 id="网络结构">网络结构</h3><p>CycleGAN网络结构为一个环形结构，如图5所示。设图像风格域为X域和Y域，图中X表示X域中图像，Y表示Y域中图像。该网络包含G、F两个风格迁移生成器分别完成X域到Y域以及Y域到X域的循环风格迁移，即使用X域图像通过生成器G生成Y域图像，再通过生成器F重构X域输入的原图像。使用Y域图像通过生成器F生成X域图像，再通过生成器G重构Y域输入的原图像。同时设计DX、DY两个图像生成判别器完成对生成图像的风格域判别。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231322287.png" alt="CycleGAN"></p><h3 id="生成器">生成器</h3><p>CycleGAN网络结构中生成器结构为编码器(Encoder)+转换器(Transformer)+解码器(Decoder)。即整个图像生成过程由编码、转换与解码三步完成。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231337217.png" alt="Cycle生成器"></p><p><strong>编码器</strong>由3个卷积块构成。3个卷积块对输入图像提取特征，将图像压缩成256个64*64的特征向量。其卷积块结构分别为：卷积核大小7×7，步长为1，卷积核数量64卷积层-实例归一化层-修正线性单元层；卷积核大小3×3，步长为2，卷积核数量128卷积层-实例归一化层-修正线性单元层；卷积核大小3×3，步长为2，卷积核数量256卷积层-实例归一化层-修正线性单元层。</p><p><strong>转换器</strong>由6个残差块构成。通过组合图像的不相近特征，将图像在X域的特征向量转换为Y域的特征向量。生成器中转换器使用了6个相同的残差块，每一个残差块包含两个3×3的卷积层。能够达到在转换时同时保留原始图像特征的目标。</p><p><strong>解码器</strong>由2个反卷积块，1个卷积块构成。利用反卷积层（decovolution）完成从特征向量中还原出低级特征的工作，最后得到生成图像。其中2个反卷积块为：卷积核大小3×3，步长为1/2，卷积核数量128的卷积层-实例归一化层-修正线性单元层；卷积核大小3×3，步长为1/2，卷积核数量64的卷积层-实例归一化层-修正线性单元层；卷积块为：卷积核大小7×7，步长为1，卷积核数量3的卷积层-实例归一化层-修正线性单元层。</p><h3 id="判别器">判别器</h3><p>CycleGAN网络判别器使用70×70PatchGAN网络结构。原始GAN的判别器的设计仅输出单一评价值（True or False），该值是对生成器生成的整幅图像的一个评价。而PatchGAN的设计不同，PatchGAN设计成全卷积的形式，图像经过各种卷积层后，并不会输入到全连接层或者激活函数中，而是使用卷积将输入映射为N*N矩阵，该矩阵等同于原始GAN中的最后的评价值用以评价生成器的生成图像。通过这种方式可以增大感受野以关注图像中更多区域，使得PatchGAN相较于传统判别器更有优势。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231351263.png" alt="CycleGAN判别器"></p><p>CycleGAN中PatchGAN使用4个卷积块，分别为：卷积核大小4×4，步长为2，卷积核数量64的卷积层-实例归一化层-带泄露修正线性单元；卷积核大小4×4，步长为2，卷积核数量128的卷积层-实例归一化层-带泄露修正线性单元；卷积核大小4×4，步长为2，卷积核数量256的卷积层-实例归一化层-带泄露修正线性单元；卷积核大小4×4，步长为2，卷积核数量512的卷积层-实例归一化层-带泄露修正线性单元；最后通过一个卷积层将输出映射至1维。</p><h3 id="损失函数">损失函数</h3><p>CycleGAN利用式(1)对抗损失实现网络生成对抗训练。</p><p>为了解决非成对数据训练因模型容量过大导致不同生成器生成图像都能满足与目标域图像分布匹配问题，CylceGAN利用式(2)所示循环一致性损失减少映射函数空间域以获得更优生成质量。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231404566.png" alt="损失函数"></p><h2 id="项目系统架构">项目系统架构</h2><p>本次项目采用MindSpore高阶工具TinyMS对CycleGAN网络进行复现完成城市风格迁移。本项目系统由数据处理模块(训练/推理)、网络训练模块、网络推理以及模型部署模块<br>四部分共同组成风格迁移系统。其系统架构图如下图所示。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231414984.png" alt="系统架构图"></p><h3 id="数据处理模块">数据处理模块</h3><p>本系统数据处理模块分为训练数据处理模块和推理数据处理模块两部分。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231427748.png" alt="数据处理模块"></p><p>训练数据处理模块：该模块对训练数据进行划分为后续网络训练做准备。该模块对输入数据集按风格分为A、B集后，分别对A、B集按一定比例进行随机划分，得到训练集A、B以及测试集A、B。</p><p>推理数据处理模块：该模块对推理数据做预处理使其对后续推理网络输入适配。该模块针对图像和视频两种输入模式基于OpenCV采用两种处理方式。对于视频数据，为保证风格迁移后的视频观赏效果，首先对其进行逐帧抽取，然后将图像帧Resize至256×256分辨率。对于图像数据则直接Resize至256×256分辨率，以便后续推理。</p><h3 id="网络训练模块">网络训练模块</h3><p>本系统网络训练模块基于输入数据集完成风格迁移模型的训练工作。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231444739.png" alt="网络训练模块"></p><p>该模块首先通过高阶程序包TinyMS完成CycleGAN模型的搭建，并基于Adam优化算法创建网络优化器对网络参数进行优化。对于不同的训练需求，可选择是否载入以及载入时选择不同的预训练模型参数以实现CycleGAN网络模型的训练或者迁移训练，为后续网络推理模块提供推理模型支持。</p><h3 id="网络推理模块">网络推理模块</h3><p>本系统网络推理模块基于已训练模型完成对输入数据的风格迁移推理。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231458789.png" alt="网络推理模块"></p><p>该模块与网络训练模块相同，首先基于TinyMS完成CycleGAN模型的搭建。基于对不同风格迁移的需求，对CycleGAN网络模型载入不同风格的模型参数。最后对基于载入参数后模型对输入数据进行推理输出，完成对输入数据的风格迁移。</p><h3 id="服务部署模块">服务部署模块</h3><p>本系统服务部署模块基于Flask构建服务端与客户端完成CycleGAN网络模型的部署，实现对输入数据的推理输出。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231509751.png" alt="服务部署模块"></p><p>该模块基于轻量网页服务器Flask构建服务端(Server)与客户端(Client)作为模型部署通讯架构。首先创建服务端和客户端，在收到待推理数据后客户端将向服务端请求推理，服务端在后端调用网络推理模块完成数据推理后将推理结果传回客户端，最后由客户端完成对风格推理结果的显示输出。</p><hr><h1 id="核心产品">核心产品</h1><p>本团队根据客户群体以及需求差异，估计市场环境以及需求，拟推出两款基于图像风格迁移技术的核心产品。其中面对个体用户的社交日常需求，本团队推出图像风格大师社交多端软件平台。面对群体用户的多行业多领域个性化需求，本团队推出个性化风格迁移定制服务。</p><h2 id="图像风格大师社交多端软件平台">图像风格大师社交多端软件平台</h2><p>图像风格大师社交多端软件平台是为个人用户提供日常社交中的图像风格迁移服务。该平台以风格迁移技术为核心，基于华为昇腾AI生态栈开发，为用户提供丰富多样的社交风格迁移服务。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231523992.png" alt="图像风格大师社交多端软件平台"></p><p>本产品服务方式为：用户根据自身社交需求与期望服务环境，选择对应图像风格大师客户端软件。用户首先将需要风格迁移对象进行输入，通过网络将数据上传至图像风格大师服务器/本地GPU，通过使用风格迁移模型对输入数据进行推理实现对输入数据的风格迁移，最后通过将迁移结果返回输出。</p><h2 id="个性化风格迁移定制服务">个性化风格迁移定制服务</h2><p>个性化风格迁移定制服务是为团体用户提供在其行业领域中所需的个性化图像风格迁移服务。该服务聚焦于华为昇腾AI生态栈下图像风格迁移技术，通过针对各异化需求进行定制开发为用户提供风格迁移服务。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231538533.png" alt="个性化风格迁移定制服务"></p><p>本产品服务方式为：用户通过与公司相关部门沟通，根据用户实际需求落实风格迁移服务实际风格迁移类型、服务端类型(如桌面端、边缘计算端)与相关技术指标。公司技术部门根据需求类型搜集相关训练数据对风格迁移模型在个性化数据上进行迁移训练，同时针对客户所需服务端类型进行技术移植与模型部署，最后根据技术指标进行总体调整实现个性化风格迁移服务。</p><hr><h1 id="商业模式-2">商业模式</h1><h2 id="产品特性">产品特性</h2><p>破晓科技作为风格迁移商业化开发应用先行者，依托华为昇腾AI生态研发的风格迁移模型面向多用户群体，设计两大核心产品，图像风格大师和个性化风格迁移定制服务，从而实现多方向盈利。图像风格大师主要面向个体用户，针对社交多样化需求，多平台提供风格迁移服务；风格迁移定制服务面向团体用户，针对个性化需求，快速将我们的技术迁移开发从而提供针对性解决方案。</p><h2 id="产品形式及盈利模式">产品形式及盈利模式</h2><p>本产品从客户的实际需求出发，结合实际市场需求与技术实现形式，团队设计产品商业模式如下图所示。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231555954.png" alt="产品商业模式图"></p><h3 id="图像风格大师">图像风格大师</h3><p>基于个人用户的日常社交需求，我们设计一款面向在线个人服务的服务端产品模式。该产品分为网页端和APP两种类型。网页端通过用户提交图片发起服务请求，通过云端计算实现对用户所需图片的风格迁移结果。APP则是通过与其他软件开发商合作提供算法或者自行开发具备风格迁移功能的社交APP对个人移动端用户提供算法服务。</p><p>此种方式按会员制、计时收费、计次收费等模式获得盈利，只有初期平台建立以及平台维护的成本，预估毛利润较高，可达80%~90%。</p><h3 id="个性化风格迁移定制服务-2">个性化风格迁移定制服务</h3><p>对于政府、公司等团体用户需求，我们设计了面向团体离线服务的定制端产品模式。对于游戏开发、建筑设计等设计公司团体，我们将针对用户实际问题需求，对算法模型进行针对性调整，开发个性化的基于解决方案的离线软件应用程序对游戏开发者以及建筑设计师提供辅助设计服务。同时对于社会安防相关的政府、监控设备提供商等用户群体，我们将算法在昇腾AI生态环境下实现边缘设备的应用移植，通过边云协同机制实现智慧监控能力的提升需求。</p><p>定制端产品聚焦于团体用户个性化需求，拟采用买断制的收费模式，同时针对老用户的新需求提供有偿算法更新迭代服务以实现产品的盈利。</p><hr><h1 id="目标市场">目标市场</h1><h2 id="潜在市场">潜在市场</h2><h3 id="游戏制作-2">游戏制作</h3><p>经团队调研，中国游戏行业市场实际收入逐年增加，截止2021年市场规模已达3000亿元，市场潜力不容忽视。而游戏动画中场景的布置设计往往是整个游戏故事作品的核心和灵魂，游戏的场景内容是游戏主题的重要呈现，场景设计编排的优劣决定了游戏镜头的画面感和效果，也会影响游戏的鉴赏和点评。好的作品往往会通过优质的画面和跌宕起伏的情感吸引人们的眼球，场景设计就是制造画面的最重要环节。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231610311.png" alt="中国近年游戏行业市场变化情况"></p><p>对于我们团队所做的基于CycleGAN的城市风格迁移模型便可应用其中——一个场景设计的重要内容，场景的风格。一款游戏的场景风格一定是要贴合游戏内容的，大体可以分为梦幻风格、现实风格、装饰风格、综合风格。而通过CycleGAN模型可以做到当游戏公司在确定一款游戏的风格以后，先生成一个demo，然后使用城市风格迁移模型来做到对整个游戏场景进行风格迁移变化，快速简单地体验场景视觉效果，从而大大减少游戏制作的初期成本；因此，我们可以与游戏公司合作，将我们的产品运用其中从而获得经济效益。</p><p>另一方面，游戏开发公司通过风格迁移功能，可以开发出不同风格的测试场景并进行玩家调查，判断出哪种风格更受玩家欢迎，从而制定游戏下一步研发的方向，减少产品失败的风险。而对于游戏玩家来说，对于游戏内容的侧重点各不相同，对于游戏的风格、玩法、剧情都有其目标用户。通过风格迁移，可由玩家自行选择喜欢的场景风格，实现写实场景风格、写意场景风格与动画场景风格的自行转换，在满足玩家风格需求的同时，也能让玩家也能体会到参与游戏制作的感觉。对于普通的玩家来说，要去改变一款游戏的玩法与游戏内核难度过大，但通过仅改变游戏场景风格而不用影响整个游戏的内核，即可在保证游戏自身稳定性的同时，满足玩家对于一款游戏的参与感需求，也有很好的交互性。</p><p>我们可以将该项功能设计为需要玩家支付一定金额来获取的服务，或者可以设计为会员服务，从而获得收入。</p><h3 id="社交互动-2">社交互动</h3><p>经过团队调研，近年来，vlog逐渐地在全球范围内风靡。因为vlog的兴起，不论在国内还是国外都出现了大量vlogger。从2018年开始，在网络上席卷了一股拍原创视频记录生活的热潮，因为vlog而走红的博主也在逐渐地增多。对于全球范围内的95后甚至00后来说，vlog已经逐渐成为了他们记录生活，表达个性最为主要的方式。但并非每一个人都能像一些专业vlogger一样，拍摄出一个好的vlog，其中重要的一点就是他们对于场景风格的把握并没有做到很好。因此，我们能将我们的风格迁移运用其中，以高质量vlog作为训练模板，从而达到Vlog的场景风格迁移，达到更好的呈现效果。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231626432.png" alt="中国vlog用户规模变化及趋势预测"></p><p>同样现在兴起许多短视频软件，而大多数短视频软件都具有特效功能，但其大多是注重对人物自身的特效，而忽视了场景的特效，这就导致很多特效缺乏氛围感，假使我们能够对场景进行风格迁移的话，用户就能选择不同的风格来对背景中的城市场景进行渲染，从而增加其趣味性和观看性。</p><p>因此，本项目获益可以来自于两个方面，一是直接与这样的视频软件商合作，将该技术运用其中并从中收取一定费用；二是自行打造一个新型的具有风格迁移的软件通过自行培养用户群并提供服务来获得收入。</p><h3 id="社会保障-2">社会保障</h3><p>经过团队调研，社会对于视频监控的需求逐年提升，特别是在5G物联网大背景下，视频监控能力是智慧城市的核心要素。但当摄像头拍摄出现模糊的状况，且正好遇到事故发生，从而没能拍摄清楚时间发生状况，就会产生极大危害。而CycleGAN的风格迁移算法在图像去噪任务上有着不错的表现，利用城市风格迁移模型，将低分辨率的城市监控图像转换成高分辨率图像、将带噪声风格的城市监控图像转换为低噪声甚至无噪声图像，从而满足安防监控工作需求，提升智慧安防能力。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231641627.png" alt="视频监控市场导向"></p><p>这一方面可以通过寻求与各个地区政府部门的合作，或者直接与一些大型的摄像头出品商合作，提供算法支持从而获得经济效益。</p><h3 id="建筑规划-2">建筑规划</h3><p>城市景观是城市形象的一个重要组成部分，是城市的外部表达的性格、背景、模式和历史、文化和社会发展水平的综合反映，是自然资源和人文景观环境体现在城市文化和社会生活的特征。而其中显现的城市风格则是一个城市独有的气质，它明显区别于其他城市的个性，是该城市的市民创造的物质和精神成就的外在表现。城市景观特征不仅是建筑技术和学术流派，而且是关系到城市核心竞争力的大问题，塑造城市景观特色具有经济社会发展的现实意义和文脉传承的历史意义。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231727869.png" alt="城市规划行业市场规模变化表"></p><p>目前中国的未来城市规划几乎都是修建高层的商业大楼、酒店和公寓楼，不同城市的建筑外观风格较为单一，失去了这座城市的独有的风格气质。为了避免这种情况，我们可以利用我们的城市风格迁移模型来进行预规划，通过收集一些符合某城市形象的照片，训练出可以让模型生成符合城市风格的图像，进行建筑物外观的预设计，这既能节省成本，还能使得城市风格能与城市内涵更加贴切。</p><p>我们可以通过建筑公司了解各城市的具体需求，然后将符合该城市风格图像或视频经过风格迁移处理后的结果出售建筑公司，从而获得利益。</p><h2 id="就业推动">就业推动</h2><p>本项目从产品核心技术特点与产品市场定位出发，通过对风格迁移技术进行更新迭代，深度挖掘该技术在各个行业领域的潜在商业价值，大力推动AI行业就业发展质量，预计10年内扩大AI行业就业人数10000余人。产品团队发展计划如下：</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231742107.png" alt="产品团队发展规划"></p><p>本团队于2021年项目立项，通过技术开发与基本需求定位对产品实现初步建立。在明确基本产品需求后，于2022年扩大团队规模至100人，完成对产品的进一步开发与市场推广。针对产品实际盈利方向与市场变化，团队将于2023年进行团队定位调整，进一步明确产品更新方向，计划于2026年提供2000余就业岗位。同时进一步扩大产品需求，对各行业领域进行针对性产品更新，实现产品的全方位推广，最终实现10000余就业岗位的提供。</p>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器视觉 </tag>
            
            <tag> 学生竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于CycleGAN的图像风格迁移模型设计与创业策划（上）</title>
      <link href="/de13101c/"/>
      <url>/de13101c/</url>
      
        <content type="html"><![CDATA[<h1 id="概述-2">概述</h1><h2 id="项目概述">项目概述</h2><p>本项目要求通过MindSpore中高阶工具TinyMS支持的CycleGAN网络实现风格迁移。并提出以下目标要求：</p><ul><li>使用TinyMS搭建的CycleGAN网络</li><li>使用自己的数据做迁移学习，可基于TinyMs提供的预训练模型进行训练，也可以自行训练</li><li>有明确的应用场景和实际意义</li></ul><h2 id="项目背景">项目背景</h2><p>图像风格迁移主要指将A图像的内容特征和B图像的风格特征二者融合，最终生成一张既保留A图像内容又含有B图像目标风格的C图像的一类任务，其中可用于迁移的风格是多种多样的，例如：艺术家风格、漫画风格等。在图像风格迁移任务中会遇到这样的问题：艺术风格并没有一个标准的统一的定义，品类繁杂，比如印象派、后印象派、中国风等，所以无法用确切的数学函数模型去描述。但是有研究发现，在艺术风格较为强烈的图像中，其纹理表述和艺术风格表述近似相等，因此可以通过提取纹理特征来近似提取图像中的风格特征。但是在深度学习出现以前，需要人工去分析图像的风格，并依靠手动建立数学或者统计模型来表述图像的纹理特征。然而图像风格一旦发生变化就需要重新建模，耗时耗力，这极大地限制了这些传统图像风格迁移模型的适用范围。</p><p>随着深度学习的发展，深度神经网络能以最优的方式自动地提取图像中有效特征的表达，在图像特征提取任务上展现了出色的能力。并且采取深度学习的方式可以避免手工建模的耗时耗力。得益于此，图像风格迁移在近年来获得了极大的发展，目前在社交软件、电影制作、游戏美术设计等各个领域都得到了一定程度的应用。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231820211.png" alt="风格迁移效果演示"></p><p>另一方面，AI技术近年来迅速发展，华为技术有限公司也是提出自主研发的新一代全场景AI计算框架MindSpore。该框架具有易开发、高效执行、全场景覆盖三大特点，是源于全产业的最佳实践，为AI算法工程师以及数据工程师提供了强大的模型训练推理能力和在多场景下灵活部署能力，对数据科学和人工智能领域发展具有巨大的推动作用。此外，基于开源深度学习框架MindSpore开发的深度学习开发工具TinyMS为用户提供了从数据准备到模型部署的全流程的极简易用的高阶API封装，并通过易于扩展的模块化设计提供了覆盖多种业务场景的能力，为深度学习初学者、科研人员以及深度学习企业开发人员提供了便捷高效的开发工具包。</p><p>在本次命题中，我们便使用了TinyMS开发包中提供的CycleGAN网络模型，快速提供了风格迁移任务解决方案。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231835506.png" alt="Mindspore与TinyMS"></p><p>基于以上背景，我们本次命题期望实现的最终功能是，使用TinyMS搭建的CycleGAN网络，并基于开源图像数据训练一个城市风格迁移模型，模型接收用户输入的一张城市图像（一段城市视频），然后按照用户选择的风格来生成风格迁移后的富有特色的城市图像（视频）。</p><h2 id="产品介绍">产品介绍</h2><p>目前项目团队面向个体用户的社交需求，拟推出图像风格大师网页端、图像风格大师移动端与图像风格大师桌面端等多类型客户端社交应用软件。满足个体用户在社交中图像艺术风格滤镜、直播视频艺术背景替换等功能。</p><p>面向团体用户的多方面个性化需求，本项目目前根据产品市场需求进行定位开发，拟推出游戏场景自动化风格建模软件平台、边缘端图像去雾算法平台以及建筑风格辅助设计平台，提供多学科多场景风格迁移定制解决方案。</p><h2 id="商业模式">商业模式</h2><p>本团队作为风格迁移商业化开发应用的先行者，依托电子科技大学计算机视觉与机器智能实验室与华为昇腾AI全栈平台，基于生成对抗网络实现风格迁移技术，针对个体与团体用户的多学科多行业应用需求，根据需求技术指标进行技术迁移开发生成软件服务平台，由销售运营团队实现对客户的持续对接，实现长期运营。</p><p>主要业务分为两部分。一部分是图像风格大师社交多端软件平台。为个体用户提供社交风格迁移服务。该业务通过团队公司运营与出租代理商服务，对用户采用会员制收费、计次收费与计时收费结合方式实现盈利。第二部分是个性化风格迁移定制服务。该部分通过针对团体用户个性化差异公司团队实现定制化软件开发，并以收取定制开发费以及有偿更新迭代服务实现盈利。</p><h2 id="项目效益">项目效益</h2><h3 id="带动就业">带动就业</h3><p>破晓科技成立公司伊始，直接提供行政管理、科技研发等各类就业岗位30多个。预计五年内新增岗位200多个。公司产业应用范围较广，初定有四个不同的应用领域，因此对于各领域产业的就业人数都有极大的间接带动作用，预计在五年内带动本地及相关合作就业人数2000以上。我们以AI助力产学研发展，不断带动就业增长。</p><h3 id="引领教育">引领教育</h3><p>本项目团队培养了一批优秀的硕士、本科生。其中指导老师团队经验丰富，有过多项专利作为项目的技术支撑，核心团队中两名研究生在校成绩优异，通过该项目对自身科研能力、技术能力以及；多名本科生在校成绩优异，有着参与科研项目的经历，获得优秀奖学金等荣誉。对于本次项目，本团队拟申请多项专利及软件著作权。</p><p>项目团队注重产学研一体化。在校期间就积极鼓励学生参与各种竞赛，综合素质得到极大提升。本项目团队由两名研究生和六名本科生组成，通过该项目，既提升了研究生的领导力和专业能力，也使得本科生有了更好的机会接触到高新技术。团队做到了多学科交叉融合创新，“A+双一流学科”+“多领域产品创新”极大提升了团队整体的创新创业思维能力。本次创业大赛做到了“赛”“创”结合，对接相关企业，利用行业资源，实现高质量高效率孵化创新，持续推动实际AI产品落地，促进社会健康发展。</p><p>通过积极参与此次创业大赛，培养和提升了团队成员创新精神、创业意识和创新创业能力，充分体现了团队成员所学专业知识和技能在项目和相关创新创业活动中的转化与应用。</p><hr><h1 id="项目需求">项目需求</h1><h2 id="市场环境分析">市场环境分析</h2><p>当前，应用市场中已经存在诸如Prisma等应用图像风格迁移技术的APP，用户可以上传图像到这些APP来生成特定艺术风格滤镜的图像，然后进一步在社交平台上分享。但是这些软件都需要开通会员才能随意使用这些风格模板，并且风格迁移之后的图像除了用于社交分享目前还难以有其他的用途。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231848639.png" alt="Prisma风格迁移效果"></p><p>但是总体来说，图像风格迁移在其他的艺术创作和社会生产等市场的应用并不充分。因此，利用城市风格迁移模型生成不同风格的城市图像，在社交平台、艺术创作和社会生产等市场具有很大的应用潜力去挖掘。</p><h2 id="市场需求分析">市场需求分析</h2><h3 id="游戏制作">游戏制作</h3><p>在一款游戏的开发中，场景美术资源的设计与制作是重要且繁琐的，特别是城市场景的设计。如果将我们的城市风格迁移模型应用到游戏中的城市场景设计工作中，一定可以节约美术成本，节省开发周期。比如：在某款游戏的城市场景设计中，制作组希望城市总体呈现一个类似真实生活场景的风格，那么在原画设计中就可以利用我们的城市风格迁移模型，并让模型在真实城市场景数据集和游戏城市场景数据集上进行训练。那么制作组就可以很轻松地得到具有真实场景风格的游戏城市场景设计图，并用于后续的场景贴图或者场景3D建模。</p><p>此外，如果玩家在游玩过程中不喜欢某款游戏的城市风格，还可以启用内置在游戏中的城市风格迁移模型，在游戏中对城市场景的风格进行切换，比如中世界风格、漫画风格等等。总之，我们的城市风格迁移模型在游戏场景的设计中具有很大潜在市场。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231923138.png" alt="利用风格迁移技术，将绝地求生的场景风格迁移到堡垒之夜的场景中"></p><h2 id="社交互动">社交互动</h2><p>利用在真实城市场景和古风、卡通、艺术家等不同风格图像上训练的城市风格迁移模型，用户可以很轻松的获取带有不同风格的城市图像，然后在社交平台上分享。此外，当用户在城市中拍摄视频或者开直播时，配合高精度的人体检测技术，用户可以选择不同的风格来对背景中的城市场景进行单独迁移，增加其直播的趣味性和观看性。考虑到当下抖音等短视频直播平台的火爆，我们的城市风格迁移模型的潜在市场是很大的。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231944797.png" alt="直播背景风格迁移效果图"></p><h3 id="社会保障">社会保障</h3><p>基于CycleGAN的风格迁移算法在图像去噪上有着不错的表现，这当然也可以应用到城市场景中。当前各大城市的街道上遍布摄像头，但是这些摄像头的分辨率有高有低，甚至部分位置的摄像头受到损坏导致监控图像中噪音很多，还可能受到雨雾天气的影响而导致监控图像模糊不清。那么这个时候就可以利用我们的城市风格迁移模型，将低分辨率的城市监控图像转换成高分辨率的、将带噪音风格的城市监控图像转换为噪音少甚至不带噪音的，这可以为保障城市治安做出巨大贡献。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103231959094.png" alt="通过图像风格迁移对场景去雾的效果图"></p><h3 id="建筑规划">建筑规划</h3><p>CycleGAN在从草图生成含有丰富细节的对应真实图像的任务上具有不错的表现，因此我们希望可以将其扩展到建筑物设计草图的转换上。在城市建筑规划设计中，从设计图纸到真实的建筑物是一个漫长的过程。施工方可以利用我们的城市风格迁移模型，在图纸照片和已经建好建筑物图像数据集上进行训练，那么就可以把图纸上的建筑物草图转换成具有真实场景风格的城市建筑物，可以更好地指导建设的进行，这在城市的建设中具有很重要的意义。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103232014685.png" alt="利用风格迁移技术将草图转换成真实风格图像"></p><h2 id="政策分析">政策分析</h2><p>我国高度重视人工智能技术进步与行业发展，人工智能已上升为国家战略。当前，新一代人工智能正在全球范围内蓬勃兴起，它既是推进经济发展的新型引擎，又是引领未来社会的战略产业。为了在新一轮国际科技竞争中掌握主导权，我国加快人工智能行业布局与规划，先后出台了《新一代人工智能发展规划》《促进新一代人工智能产业发展三年行动计划（2018-2020年）》《关于促进人工智能和实体经济深度融合的指导意见》《关于“双一流”建设高校促进学科融合加快人工智能领域研究生培养的若干意见》等重要文件，进一步促进我国人工智能行业发展。</p><p>为加强人工智能领域标准化顶层设计，推动人工智能技术研发和标准制定，促进产业健康可持续发展，国家标准化管理委员会、中央网信办、国家发展改革委、科技部、工业和信息化部五部门已于2020年8月印发《国家新一代人工智能标准体系建设指南》，指南提出国家新一代人工智能标准体系总体要求、建设思路、建设内容等。人工智能标准体系结构主要包括“A基础共性”“B支撑技术与产品”“C基础软硬件平台”“D关键通用技术”“E关键领域技术”“F产品与服务”“G行业应用”“H安全/伦理”等八个部分。《国家新一代人工智能标准体系建设指南》指出：2021年，明确人工智能标准化顶层设计，研究标准体系建设和标准研制的总体规则，明确标准之间的关系，指导人工智能标准化工作的有序开展，完成关键通用技术、关键领域技术、伦理等20项以上重点标准的预研工作。标准化工作对人工智能及其产业发展具有基础性、支撑性、引领性的作用，既是推动人工智能行业创新发展的关键抓手，也是产业竞争的制高点。当前，我国出台了诸多人工智能相关的国家标准和行业标准，涵盖了云计算、人脸识别、指纹识别、智能语音、工业机器人等领域。</p><p>在如此需求背景下，使用MindSpore中TinyMS完成CycleGAN网络的训练实现风格迁移不仅具有实际价值，更具有积极意义。</p>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器视觉 </tag>
            
            <tag> 学生竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智航 —— 解决老年人出行难问题的智慧助行产品设计开发报告</title>
      <link href="/87ce7af/"/>
      <url>/87ce7af/</url>
      
        <content type="html"><![CDATA[<h1 id="摘要-2">摘要</h1><p>人口老龄化是许多国家普遍存在的社会现象，中国也不例外，一系列与之相关的老年问题也接踵而至。其中，对于老年人这一群体的生活出行问题就亟待改善。</p><p>本报告就老年人出行难问题提出优化方案——智慧导航卡套，其核心功能是语音识别、智慧导航和一键呼救功能等。我们放弃打字输入，是因为老年人大多数对打字系统不熟悉，打字输入使用会有困难；我们的导航形式包括语音导航和可视化屏幕，这样的设计是为了满足不同老年人的需求，有的老年人可能听力不太好，那么就可以通过看屏幕来明确要去的方向。</p><p>通过对当前老人产品市场的分析与创新，期望助力改善老人群体对于科技产品的使用体验，希望本产品可以有效解决老年人出行难问题，促进智慧城市、智慧养老体系的统筹构建。</p><h1 id="前期设计">前期设计</h1><h2 id="问题背景">问题背景</h2><p>地铁或公交车站离最后的目的地往往还有一些距离，初来此地的人们可能需要一些协助才能到达他们最终的目的地。能够熟练或较为熟练使用智能手机的中年人和年轻人可以依靠导航软件轻松得到帮助，但对于不太会用智能手机的老年人，这最后一公里可能成为他们出门的阻碍。</p><p>由于老龄群体规模不断扩大，为改善老年人出行体验，该问题亟待改善。</p><h2 id="设计目标">设计目标</h2><p>我们想要设计一款产品，来帮助不能熟练使用智能手机、不会使用手机上的导航产品、不太能看懂路标和读地图有困难的老人设计一款具有导航功能的助行产品。产品能够通过简单的操作理解用户的指令（比如了解用户想去哪），给出能被用户轻松理解的反馈，并能准确、安全地将用户带到目的地。</p><p>设计约束：便携性：产品应该便于携带，产品尺寸以不大于8cm*12cm为宜；考虑到老人群体的消费习惯，产品的硬件成本以600元为底线。</p><p>最终的设计目标参考如下：</p><ul><li>指令精确程度：95%指令正确；</li><li>指令识别精准度：准确识别准确度不低于80%；</li><li>定位精准度：10米以内；</li><li>最大反馈延迟：3秒；</li><li>稳定性：单次稳定工作时长下限为6小时；</li><li>规格：重量不大于1千克，尺寸不大于8cm*12cm。</li></ul><h2 id="设计过程">设计过程</h2><p>为了能让设计顺利完成并且满足大多数用户的需求，我们对于用户群体以及产品的使用场景的假设并不极端。我们假设的用户群体是不能熟练使用智能手机、不会使用手机上的导航产品、不太能看懂路标和读地图有困难的老人们，但同时他们也拥有着愿意去学习、去理解一个新产品的使用并解决自己的出行问题的主观意愿。</p><p>而于此同时我们假设的应用场景是在地面较为平坦而且GPS信号稳定的区域。这样的环境能保证我们产品功能正常发挥其功能。</p><p>我们设计的这款产品，系统上有以下功能：</p><ul><li>利用语音给用户播报导航内容；</li><li>将导航内容转换为图像的形式供用户查看；</li><li>利用GPS确定用户当前位置和行进方向；</li><li>提供按键让用户可以“一键呼救”；</li><li>提供超声波测距功能，当周围有用户没能注意到的障碍物时进行提示；</li><li>提供语音交互功能让用户能简单地告诉产品自己的目的地</li></ul><p>由于本产品以卡套为外部造型设计，所以在成本上的花销主要集中在核心部件的实现上。按键相关的交互内容会有很高的准确性，而语音交互内容的识别准确度或许会稍欠一筹，但产品会向用户再次确认语音输入的内容是否转换正确，以保证指令的识别准确度能够符合工程规范。</p><p>卡套的外部材质方面，我们设计为皮质，力求质感和耐用性能同时在产品上得到体现。核心部件通过主板、扬声器等组成，均选用可回收型材料，利用铝合金和卡套外部进行结合。电池方面我们选择了锂电池，它是当今最为普遍的电池种类，能保证成本在一定范围内。</p><p>DFX分析结果如下表。</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">特征</th><th>评估结果</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">可制造性（DFM）</td><td>高。因为产品设计中并没有选择较为新颖的、量产较为困难的材料或者部件，所以产品的各个部件应该都是可以被量产化的。</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">可装配性（DFA）</td><td>中等。除了将系统主体部分组装完成外，生产产品时还需要将主体和外部卡套紧密结合在一起，基本保证外部只有按键可进行交互，而使用过程中不需要在意主体系统是否会遗失。这导致了产品的装配过程会较为复杂。</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">可测试性（DFT）</td><td>中等。产品的各种功能都能有很多方式去进行测试，但是由于组装过程中已经将卡套整体封装完毕，所以如果产品出现问题会较难去探查出问题的原因。</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">可靠性（DFT）</td><td>高。产品的每个功能都正常运行时有高可靠性。</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">面向环保的设计（DFE）</td><td>高。产品所使用的材料除电池外都能较好地被回收，对环境没有影响。</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">可服务性（DFS）</td><td>中等。产品能和用户进行多种类型的交互来进行服务，但如果产品提供的所有交互方式都不能让用户满意，那么产品将无法提供更多的服务。</td></tr></tbody></table><h1 id="产品测试与分析">产品测试与分析</h1><h2 id="测试计划和结果">测试计划和结果</h2><p>1、测试计划：</p><ul><li>测试语音模块，即喇叭是否正常工作；</li><li>测试oled屏幕是否正常工作；</li><li>测试报警模块，即蜂鸣器和红色小灯是否正常工作；</li><li>测试短信收发功能是否正常工作；</li><li>整合语音模块和oled屏幕，并测试其是否正常工作；</li><li>整合报警模块和短信收发功能，并测试其是否正常工作。</li></ul><p>2、测试结果：</p><ul><li>语音模块能够清晰地发出指引信息以及路段情况；</li><li>oled屏幕能将图片清晰可见地显示出来；</li><li>报警模块能正常工作；</li><li>短信收发功能正常工作；</li><li>整合后，语音模块和oled屏幕能很好地配合在一起，即当语音说向左转时，图片会显示左转提示。<img src="https://cdn.jsdelivr.net/gh/asa-pic/pic_1/img/image-20220831232356292.png" alt="语音与可视化模块展示"></li><li>报警模块与短信收发功能能很好地配合<img src="https://cdn.jsdelivr.net/gh/asa-pic/pic_1/img/image-20220831233652247.png" alt="通信模块展示"></li></ul><h2 id="材料清单BOM">材料清单BOM</h2><p>零部件费用只包括最后设计中所包含的物品。详细的材料清单包括(可能的话)制造厂商、零件编号、零件描述、供应商、数量和成本。</p><p>本产品所需美科套件如表2.1。</p><table><thead><tr><th>零件</th><th>描述</th><th style="text-align:center">数量</th><th>零件编号</th></tr></thead><tbody><tr><td>MCookie-Core+板子</td><td>128KB的Flash，16KB的SRAM，可方便、灵活的与其他符合 Microduino/mCookie 接口规范的模块、传感器进行快速的连接和扩展；</td><td style="text-align:center">2</td><td>ATmega644PA/1284P</td></tr><tr><td>mCookie-OLED屏幕</td><td>mCookie-OLED 显示模块，屏幕0.96 吋大小，分辨率128*64像素点。采用IIC驱动，可以直接叠加在mCookie的大多数模块上，或接到mCookie-Hub/zh的IIC接口与核心连接通讯</td><td style="text-align:center">1</td><td>MCBS11</td></tr><tr><td>mCookie-BLEUPLOAD蓝牙模块</td><td>BLEUPLOAD是一种蓝牙透传模块，固定了串口与波特率</td><td style="text-align:center">1</td><td>MCBS11</td></tr><tr><td>MCookie-Module  AudioPro音频模块</td><td>mCookie-AudioPro是以VS1053为解码器，集成2.2W立体声功放，并且支持2.5mm立体声耳机接口的多功能音频模块，支持MIDI功能</td><td style="text-align:center">1</td><td>xxxxxx   （真是这个，没骗你）</td></tr><tr><td>MCookie-GPS模块</td><td>核心采用UBLOX NEO-6M模组，高灵敏度，更新速率最高可达5Hz，采用IPEX接口的迷你陶瓷天线，自带可充电后备电池</td><td style="text-align:center">1</td><td>xxxxxx</td></tr><tr><td>6.mCookie-Hub接线板</td><td>mCookie-Hub是为了配合Microduino 传感器系列制作的,可以扩展大量数字/模拟接口的传感器扩展板</td><td style="text-align:center">1</td><td>MCBH11</td></tr><tr><td>Sensor-Crash开关</td><td>Sensor-Crash是一种碰撞传感器，用来检测是否发生碰撞，也可称为碰撞信号传感器，可做按键开关、限位开关用</td><td style="text-align:center">1</td><td>MSDS11</td></tr><tr><td>喇叭</td><td>可与音频模块相连的喇叭</td><td style="text-align:center">1</td><td></td></tr><tr><td>Sensor-LED</td><td>Sensor-LED 直接控制的LED灯，有红、绿、黄三种型号</td><td style="text-align:center">1</td><td>MSLT63</td></tr><tr><td>10.Sensor-Buzzer蜂鸣器</td><td>Sensor-Buzzer是无源蜂鸣器，和电磁扬声器一样，需要高低变化不同频率的电压才能发声。频率越高则音调越高。</td><td style="text-align:center">1</td><td>MSDO11</td></tr><tr><td>Sensor-IO DuPont</td><td>杜邦线，接引脚用</td><td style="text-align:center">5个以上</td><td></td></tr><tr><td>乐高拼板</td><td>用以设计产品外壳，封装用</td><td style="text-align:center">1</td><td></td></tr></tbody></table><p>总成本：七千多（消息来源：徐sir）</p><h2 id="甘特图">甘特图</h2><p><img src="https://cdn.jsdelivr.net/gh/asa-pic/pic_1/img/image-20220831234122039.png" alt="甘特图"></p><h2 id="道德伦理方面的考虑">道德伦理方面的考虑</h2><ol><li>善待并尊重老年人：不能主观地按照年轻人地思维习惯去解释，而要考虑到老年人的习惯、是否适应等方面。因此在产品介绍和说明，以及产品的功能上都要与老年人所遇到的问题相贴切。</li><li>平等：平等是老年伦理必须遵循的基本原则。对待老年人，不分年龄、性别、民族、贫富、高矮,都要—视同仁。而我们设计的产品为卡套，价格、大小、便携等都符合了我们对有效服务老年人的期待。</li><li>以老年人为主体：一切以为老年人服务为准，在选择产品材料、实现产品功能、产品实用验证等方面都以老年人为主体，全方位考虑。为产品的工程特性设定要实现的目标，使其满足用户需求。</li></ol><h2 id="安全性">安全性</h2><ol><li>本智能设备内含高灵敏度电子元器件，跌落、焚烧、穿刺或碾压均会造成本设备损坏。塑料制成的本设备外壳在跌落或受力冲击时可能会破碎或破裂。请勿使用已损坏的本设备，如屏幕或外壳碎裂、明显渗液，因为可能导致受伤。请勿打开本设备内部和尝试自行维修本设备。拆卸本设备可能会造成损坏、导致其不再抗水并可能导致您受伤。</li><li>请勿尝试自行更换本设备电池，您可能会损坏电池，从而导致过热和人身伤害。电池必须单独回收或处理，不可混于生活垃圾。请勿焚烧电池。</li><li>某些情形下使用本设备会分散您的注意力，有可能造成危险（例如，避免横过马路时查看前进方向）。请遵守禁止或限制使用智能设备的规定。</li><li>地图、路线以及基于位置的功能均依赖数据服务。这些数据服务会随时变更，而且并非所有区域都可用，因此这些服务所提供的地图、路线或者基于位置的信息可能会不可用、不准确或不完整。某些“地图”功能要求使用“定位服务”。请将本设备上提供的信息与周围的环境比较并遵守路标，以解决任何偏差。使用本设备时，请始终遵守路标，遵守所在地区的法律和法规并运用常识。</li><li>本设备使用USB-A转USB-C连接线和快速充电器充电，请使用符合USB 2.或后续标准且符合适用的国家/地区法规及国际和地区安全性标准的电源适配器及连接线。其他适配器和连接线可能不满足适用的安全标准，而使用这样的适配器及连接线充电可能会有死亡或者受伤风险。</li><li>使用损坏的线缆或充电器，或者在潮湿环境下充电会导致火灾、电击、受伤或损坏本设备或其他财物。</li><li>长时间接触高温本设备可能会导致设备损坏或起火。</li><li>用高音量听信息会损坏听力。背景噪音和持续暴露在高音量下，会让声音听起来比实际音量小。</li><li>本智能设备使用正常的移动网络通信模块，正常使用符合射频暴露限制。为了减少射频暴露，可适当增加使用者和产品的距离，在较长时间段不适用的情况下建议不要随身携带。</li></ol><h1 id="结论">结论</h1><p>简言之，我们设计的产品致力于以一种老年人容易接受的方式帮助老年人更好能完成到达目的地最后可能需要的几百米步行。借助卡包这种外在形式让老年人更快地接受我们的产品。设计过程充分了解了老年人可能的障碍和主要诉求针对性的采用简单无感的语音交互方式，产品的功能也更加适用于老年人步行导航的特点，增加了超声波避障提醒功能和一键呼救模块。在具体的原型制作中也逐步发现问题解决问题，最终制作的原型较好地体现了我们的设计理念以及完成了设计要求。</p><blockquote><p>鸣谢：立鑫子、佳佳子、琦琦子、鑫康子、棋棋子</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于SDN网络架构的Ford-Fulkerson算法实践</title>
      <link href="/5c5a2704/"/>
      <url>/5c5a2704/</url>
      
        <content type="html"><![CDATA[<h1 id="项目要求-2">项目要求</h1><ol><li>利用网络中有限的流表测量网络中所有流的大小；</li><li>使用最大匹配算法求解测量方案；</li><li>将测量到的流大小在可视化平台上进行展示。</li></ol><h1 id="Ford-Fulkerson-算法">Ford-Fulkerson 算法</h1><h2 id="基本思想-2">基本思想</h2><p>最大流问题，一种组合最优化问题，就是要讨论如何充分利用装置的能力， 使得运输的流量最大，以取得最好的效果。而对于所有边的权重都非负的图来说，最大流问题需要解决的就是在每个边都对流量有所限制的前提下，最多能将多少流从起点输送到终点。</p><p>在图中有以下规则：除了源和终点以外，其他每个点的流入等于流出；所有边的流量都不超过运载值。</p><p>求出最大流的方法有很多。其中，Ford-Fulkerson 方法，即增广路方法， 简称 FF 方法是一种基础的求最大流方法。它的精髓就是加了一条反向边，加速了寻找最优路径的过程。哪怕一开始我们选择的路径是错误的，我们也可以通过后悔边不断去修正这个错误，以此达到最后正确的结果（把所有错误的情况修正了，就是正确的结果之一）。</p><p>其核心思路是：每次找出一条从源到汇的能够增加流的路径，调整流值和残留网络，不断调整直到没有增广路为止。简单来说就是，通过 DFS 或者 BFS 増广，直到不能増广为止。FF 方法的基础是：增广路定理——网络达到最大流， 当且仅当残留网络中没有增广路。</p><h2 id="基本步骤-2">基本步骤</h2><ol><li>给每条有向边初始化一条容量为 0 的反向边。并且初始化设置起点为已经访问过</li><li>开始从起点进行 DFS，对和顶点相连的边进行检查，如果下个顶点未被访问并且此条边仍有流量就走这条边，记录此边容量并与之前的记录进行比较（没有比较就直接记录），取其中容量最小值，并以此顶点为起点进行下一轮 DFS，即进入（1）。</li><li>当 DFS 进行不下去，也就是到达终点时，对沿路的所有边容量，全部减去（2）中记录的容量最小值，并且给每条边的反向边容量增加同样大小的容量，并且将（2）中记录的容量最小值进行累加。</li><li>当整个循环过程完成，说明以源为起点无法继续找到可行的能到达终点的增广路径，则算法结束。（3）中累加所得的最终值即为最大流的量。</li></ol><h2 id="示例-2">示例</h2><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103225704846.png" alt="示例拓扑图"></p><p>对上图，设置 1 和 5 分别为源点和终点，进行 FF 算法。</p><ol><li>以 sum 记录最大流的量，初始化 sum=0。以 flow 记录单次 DFS 中发现的最小容量，flow=0；</li><li>从 1 进行 DFS,先寻找到 1-&gt;2-&gt;3-&gt;5 这条路，flow=min(4,2,4),即 flow=2，让 sum 值加上 2，并且将 1-&gt;2 修改为 2，2-&gt;3 修改为 0，3-&gt;5 修改为 2，并且对应地增加反向边容量。</li><li>继续，接下来发现 1-&gt;2-&gt;4-&gt;5 这条路，flow=2,sum=4,同样减少正向边容量，增加反向边容量。</li><li>继续，接下来发现 1-&gt;3-&gt;5 这条路，flow=2，sum=6，同样减少正向边容量，增加反向边容量。</li><li>继续，接下来发现 1-&gt;3-&gt;2-&gt;4-&gt;5 这条路（这里走了反向边 3-&gt;2， 容量为 2），flow=1，sum=7，同样减少正向边容量，增加反向边容量。</li><li>此时图变为如下图，可以看出，此时没有正向路径能让 1 推送流到 5， 则算法结束，最大流大小为 7。</li></ol><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103225719323.png" alt="剩余网络图"></p><h1 id="算法实现">算法实现</h1><h2 id="实现思路">实现思路</h2><p>EK 算法作为 FF 算法的一个特例，是在 FF 方法基础上，通过 dijkstra 选择跳数最短路来作为优先选择的遍历路径，以此来降低发现最大流所需的时间。故而主要的代码包括 dijkstra 跳数最短路的选取和 FF 的调用两部分，除此之外，要实现要求的功能，还需要计算最大流中流量最大的路径以及最大流的流量，以及当反向边上发生“反悔”事件时，还需要记录抵消的路径和打印真实路径。</p><h2 id="代码实现">代码实现</h2><h3 id="dijkstra-发现跳数最短路">dijkstra 发现跳数最短路</h3><p>（1）节点信息的初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dijkstra</span>(<span class="params">self, src_mac, dst_mac, rest</span>): <span class="number">2.</span> <span class="number">3.</span> run = dst_mac <span class="comment">#从宿点开始找</span></span><br><span class="line">nodeinfo = &#123;&#125;</span><br><span class="line">    nodeinfo.setdefault(src_mac, &#123;&#125;)</span><br><span class="line">    nodeinfo.setdefault(dst_mac, &#123;&#125;)</span><br><span class="line">    <span class="comment">#此处的源点和宿点均指相对于所要找的路径</span></span><br><span class="line">    nodeinfo[src_mac].setdefault(<span class="string">&#x27;height&#x27;</span>, <span class="number">99999999</span>) <span class="comment">#源点距宿点的跳数设为无穷大</span></span><br><span class="line">    nodeinfo[src_mac].setdefault(<span class="string">&#x27;unchecked&#x27;</span>, <span class="number">1</span>) <span class="comment">#源点初始化为未标记</span></span><br><span class="line">    nodeinfo[src_mac].setdefault(<span class="string">&#x27;father&#x27;</span>, -<span class="number">1</span>) <span class="comment">#父节点为空</span></span><br><span class="line">    nodeinfo[dst_mac].setdefault(<span class="string">&#x27;height&#x27;</span>, <span class="number">0</span>) <span class="comment">#宿点离自己的跳数为 0</span></span><br><span class="line">    nodeinfo[dst_mac].setdefault(<span class="string">&#x27;unchecked&#x27;</span>, <span class="number">0</span>) <span class="comment">#宿点初始化为已标记</span></span><br><span class="line">    nodeinfo[dst_mac].setdefault(<span class="string">&#x27;father&#x27;</span>, -<span class="number">1</span>)<span class="comment">#宿点父节点为空</span></span><br></pre></td></tr></table></figure><p>（2）发现最短路</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> run != src_mac: </span><br><span class="line">    <span class="keyword">for</span> neighbor <span class="keyword">in</span> self.adjacent[run]:</span><br><span class="line">        nodeinfo.setdefault(neighbor, &#123;&#125;)</span><br><span class="line">        nodeinfo[neighbor].setdefault(<span class="string">&#x27;height&#x27;</span>, <span class="number">9999999</span>)</span><br><span class="line">        nodeinfo[neighbor].setdefault(<span class="string">&#x27;unchecked&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">        nodeinfo[neighbor].setdefault(<span class="string">&#x27;father&#x27;</span>, -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> self.links: </span><br><span class="line">            <span class="keyword">if</span> link[<span class="string">&#x27;src_dpid&#x27;</span>] == run <span class="keyword">and</span> link[<span class="string">&#x27;dst_dpid&#x27;</span>] == neighbor: </span><br><span class="line">                <span class="keyword">if</span> nodeinfo[neighbor][<span class="string">&#x27;height&#x27;</span>] &gt; nodeinfo[run][<span class="string">&#x27;height&#x27;</span>]+<span class="number">1</span> <span class="keyword">and</span> rest[link[<span class="string">&#x27;dst_dpid&#x27;</span>]][link[<span class="string">&#x27;src_dpid&#x27;</span>]] &gt; <span class="number">0</span>:<span class="comment">#防止成环，以及发现路径</span></span><br><span class="line">                    nodeinfo[neighbor][<span class="string">&#x27;height&#x27;</span>] = nodeinfo[run][<span class="string">&#x27;height&#x27;</span>]+<span class="number">1</span><span class="comment">#跳数加一</span></span><br><span class="line">                    nodeinfo[neighbor][<span class="string">&#x27;father&#x27;</span>] = run<span class="comment">#更新父节点</span></span><br><span class="line">                <span class="keyword">break</span> <span class="comment">#update 操作</span></span><br><span class="line">                <span class="comment">#寻找最短跳数</span></span><br><span class="line">        min_height = <span class="number">99999</span></span><br><span class="line">        <span class="keyword">for</span> new_run <span class="keyword">in</span> nodeinfo.keys(): </span><br><span class="line">            <span class="keyword">if</span> nodeinfo[new_run][<span class="string">&#x27;unchecked&#x27;</span>] <span class="keyword">and</span> nodeinfo[new_run][<span class="string">&#x27;height&#x27;</span>] &lt; min_height: </span><br><span class="line">                min_height = nodeinfo[new_run][<span class="string">&#x27;height&#x27;</span>]</span><br><span class="line">                run = new_run </span><br><span class="line">        <span class="keyword">if</span> nodeinfo[run][<span class="string">&#x27;unchecked&#x27;</span>]: </span><br><span class="line">            nodeinfo[run][<span class="string">&#x27;unchecked&#x27;</span>] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>（3）跳数最短路重建，并返回跳数最短路和该路径上的流量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> nodeinfo[src_mac][<span class="string">&#x27;unchecked&#x27;</span>]: <span class="comment">#到最后 src_mac 也没有被检查到，则说明已经没有增广路径了，返回值为空</span></span><br><span class="line">    <span class="keyword">return</span> [], <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>: <span class="comment">#有增广路径则按正序重建路径，并返回路径和路径上的流量</span></span><br><span class="line">    father = src_mac </span><br><span class="line">    path = []</span><br><span class="line">    <span class="keyword">while</span> father != dst_mac: </span><br><span class="line">        path.append(father)</span><br><span class="line">        father = nodeinfo[father][<span class="string">&#x27;father&#x27;</span>]</span><br><span class="line">    path.append(dst_mac)</span><br><span class="line">    path_bw = self.min_bw(path, rest) <span class="comment">#调用函数，求路径上的流量</span></span><br><span class="line">    <span class="keyword">return</span> path, path_bw</span><br></pre></td></tr></table></figure><h3 id="FF-算法">FF 算法</h3><p>（1）初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ford_fulkerson</span>(<span class="params">self, src_mac, dst_mac</span>): </span><br><span class="line">    flow = &#123;&#125;</span><br><span class="line">    rest = &#123;&#125;</span><br><span class="line">    cur_path = []</span><br><span class="line">    bw = <span class="number">0</span></span><br><span class="line">    wid_path = []</span><br><span class="line">    wid_bw = <span class="number">0</span></span><br><span class="line">    max_bw = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    rest = self.update_network([], <span class="number">0</span>, flow)</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> self.links: <span class="comment">#建立剩余网络的框架</span></span><br><span class="line">        flow.setdefault(link[<span class="string">&#x27;src_dpid&#x27;</span>], &#123;&#125;)</span><br><span class="line">        flow[link[<span class="string">&#x27;src_dpid&#x27;</span>]].setdefault(link[<span class="string">&#x27;dst_dpid&#x27;</span>], <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>（2） 循环增加流量，直到无法找到从源点到宿点的增广路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cur_path, bw = self.dijkstra(src_mac, dst_mac, rest)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(cur_path) == <span class="number">0</span>: </span><br><span class="line">        Break</span><br><span class="line">    <span class="comment">#无法找到从源点到宿点的增广路径时 cur_path 获取到的返回值为空，退出循环</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;available path:&#123;&#125; bw:&#123;&#125;Mbps&quot;</span>.<span class="built_in">format</span>(cur_path, bw)) <span class="comment">#打印参与到最大流的路径，注意，此时可能会发生 cancel，即反向推送</span></span><br><span class="line">    max_bw += bw <span class="comment">#求最大流</span></span><br><span class="line">    rest = self.update_network(cur_path, bw, flow)<span class="comment">#剩余网络更新</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> self.cancel_flag == <span class="number">0</span> <span class="keyword">and</span> wid_bw &lt; bw:<span class="comment">#如果全程没有发生反向推送，则此时的路径与现实情境下会发生的实际情况相同</span></span><br><span class="line">        wid_path = cur_path</span><br><span class="line">        wid_bw = bw </span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;max flow after detection:&#123;&#125;Mbps.&quot;</span>.<span class="built_in">format</span>(max_bw))<span class="comment">#打印最大流的流量</span></span><br></pre></td></tr></table></figure><p>（3）考虑到现实情境下，“反悔”现象不会发生，因此产生了路径抵消时需要 在总的路径上做一些修改，以得到最后的真实路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> self.cancel_flag == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Cancellations happened!&quot;</span>)</span><br><span class="line">    cur_path, bw = self.dijkstra(src_mac, dst_mac, flow)<span class="comment">#在最终的流量网络上重新运行 dijkstra 算法，找最短路来进行路径增广</span></span><br><span class="line">    wid_path = cur_path</span><br><span class="line">    wid_bw = bw</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(cur_path) != <span class="number">0</span>: </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Real-path:&#123;&#125; &#123;&#125;Mbps&quot;</span>.<span class="built_in">format</span>(cur_path, bw))</span><br><span class="line">            <span class="keyword">if</span> bw &gt; wid_bw:</span><br><span class="line">                wid_path = cur_path</span><br><span class="line">                wid_bw = bw</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cur_path)-<span class="number">1</span>): </span><br><span class="line">                flow[cur_path[i]][cur_path[i+<span class="number">1</span>]] -= bw <span class="comment">#更新流量网络</span></span><br><span class="line">                cur_path, bw = self.dijkstra(src_mac, dst_mac, flow) <span class="comment">#在更新后的流量网络上运行 dijkstra 寻找增广路径</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">self.cancel_flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> wid_path, wid_bw</span><br></pre></td></tr></table></figure><h3 id="剩余网络更新">剩余网络更新</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_network</span>(<span class="params">self, cur_path, cur_bw, flow</span>): </span><br><span class="line">    p = cur_path</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(p)-<span class="number">1</span>): </span><br><span class="line">        <span class="keyword">if</span> flow[p[i]][p[i+<span class="number">1</span>]] == <span class="number">0</span> <span class="keyword">and</span> flow[p[i+<span class="number">1</span>]][p[i]] == <span class="number">0</span>:<span class="comment">#尚未开始增加流量</span></span><br><span class="line">            flow[p[i]][p[i+<span class="number">1</span>]] = cur_bw<span class="comment">#将所选择的路径流量加入流网络</span></span><br><span class="line">        <span class="keyword">elif</span> flow[p[i+<span class="number">1</span>]][p[i]] &gt; <span class="number">0</span> <span class="keyword">and</span> flow[p[i]][p[i+<span class="number">1</span>]] == <span class="number">0</span>:<span class="comment">#边上正向的流量为0，有反向的流量</span></span><br><span class="line">            flow[p[i+<span class="number">1</span>]][p[i]] -= cur_bw<span class="comment">#发生流量抵消</span></span><br><span class="line">            self.cancel_flag = <span class="number">1</span><span class="comment">#流量抵消的标记位</span></span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            flow[p[i]][p[i+<span class="number">1</span>]] += cur_bw<span class="comment">#将所选择的路径上流量加入流网络</span></span><br><span class="line">    rest = deepcopy(flow)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> self.links:<span class="comment">#构建剩余网络</span></span><br><span class="line">        <span class="keyword">if</span> flow[link[<span class="string">&#x27;src_dpid&#x27;</span>]][link[<span class="string">&#x27;dst_dpid&#x27;</span>]] == <span class="number">0</span> <span class="keyword">and</span> flow[link[<span class="string">&#x27;dst_dpid&#x27;</span>]][link[<span class="string">&#x27;src_dpid&#x27;</span>]] == <span class="number">0</span>:<span class="comment">#边上没有流量，剩余容量即为边的带宽</span></span><br><span class="line">            rest[link[<span class="string">&#x27;src_dpid&#x27;</span>]][link[<span class="string">&#x27;dst_dpid&#x27;</span>]] = link[<span class="string">&#x27;bw&#x27;</span>]</span><br><span class="line">            rest[link[<span class="string">&#x27;dst_dpid&#x27;</span>]][link[<span class="string">&#x27;src_dpid&#x27;</span>]] = link[<span class="string">&#x27;bw&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> flow[link[<span class="string">&#x27;dst_dpid&#x27;</span>]][link[<span class="string">&#x27;src_dpid&#x27;</span>]] &gt; <span class="number">0</span> <span class="keyword">and</span> flow[link[<span class="string">&#x27;src_dpid&#x27;</span>]][link[<span class="string">&#x27;dst_dpid&#x27;</span>]] == <span class="number">0</span>:<span class="comment">#边上反向有流量、正向没有流量</span></span><br><span class="line">            rest[link[<span class="string">&#x27;src_dpid&#x27;</span>]][link[<span class="string">&#x27;dst_dpid&#x27;</span>]] = flow[link[<span class="string">&#x27;dst_dpid&#x27;</span>]][link[<span class="string">&#x27;src_dpid&#x27;</span>]]<span class="comment">#添加反向边</span></span><br><span class="line">            rest[link[<span class="string">&#x27;dst_dpid&#x27;</span>]][link[<span class="string">&#x27;src_dpid&#x27;</span>]] = link[<span class="string">&#x27;bw&#x27;</span>] - flow[link[<span class="string">&#x27;dst_dpid&#x27;</span>]][link[<span class="string">&#x27;src_dpid&#x27;</span>]]<span class="comment">#边上反向的剩余容量为边的容量减去流量</span></span><br><span class="line">    <span class="keyword">return</span> rest</span><br></pre></td></tr></table></figure><h3 id="读取邻接点">读取邻接点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_adjacent</span>(<span class="params">self, links</span>):</span><br><span class="line">    adjacent = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">        adjacent.setdefault(link[<span class="string">&#x27;src_dpid&#x27;</span>], [])</span><br><span class="line">        adjacent[link[<span class="string">&#x27;src_dpid&#x27;</span>]].append(link[<span class="string">&#x27;dst_dpid&#x27;</span>])</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> adjacent</span><br></pre></td></tr></table></figure><h3 id="找到路径上链路容量的最小值，即能够容纳的最大流量">找到路径上链路容量的最小值，即能够容纳的最大流量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">min_bw</span>(<span class="params">self, path, rest</span>): </span><br><span class="line">    bw = <span class="number">999999</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(path)-<span class="number">1</span>): </span><br><span class="line">        <span class="keyword">if</span> rest[path[i]][path[i+<span class="number">1</span>]] &lt; bw: </span><br><span class="line">            bw = rest[path[i]][path[i+<span class="number">1</span>]]</span><br><span class="line">    <span class="keyword">return</span> bw</span><br></pre></td></tr></table></figure><h3 id="对-packet-in-模块的修改">对 packet_in 模块的修改</h3><p>（1）将主机和交换机之间的链路加入拓扑网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> src <span class="keyword">not</span> <span class="keyword">in</span> self.hosts:</span><br><span class="line">    self.hosts.append(src)</span><br><span class="line">    fd = <span class="built_in">open</span>(<span class="string">&#x27;./topo24.json&#x27;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    topoinfo = json.load(fd)</span><br><span class="line">    host_id = <span class="built_in">int</span>(src.split(<span class="string">&#x27;:&#x27;</span>)[-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">for</span> edge <span class="keyword">in</span> topoinfo[<span class="string">&#x27;links&#x27;</span>]: </span><br><span class="line">        <span class="keyword">if</span> ([<span class="string">&#x27;h&#x27;</span>+<span class="built_in">str</span>(host_id), <span class="string">&#x27;s&#x27;</span>+<span class="built_in">str</span>(dpid)] == edge[<span class="string">&#x27;vertexs&#x27;</span>] <span class="keyword">or</span> [<span class="string">&#x27;s&#x27;</span>+<span class="built_in">str</span>(dpid), <span class="string">&#x27;h&#x27;</span>+<span class="built_in">str</span>(host_id)] == edge[<span class="string">&#x27;vertexs&#x27;</span>]):</span><br><span class="line">            self.links.append(&#123;<span class="string">&#x27;src_dpid&#x27;</span>:src, <span class="string">&#x27;dst_dpid&#x27;</span>:dpid, <span class="string">&#x27;dst_port_no&#x27;</span>:</span><br><span class="line">in_port, <span class="string">&#x27;delay&#x27;</span>:edge[<span class="string">&#x27;delay&#x27;</span>], <span class="string">&#x27;bw&#x27;</span>:edge[<span class="string">&#x27;bw&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line">            self.links.append(&#123;<span class="string">&#x27;src_dpid&#x27;</span>:dpid, <span class="string">&#x27;dst_dpid&#x27;</span>:src, <span class="string">&#x27;src_port_no&#x27;</span>:</span><br><span class="line">in_port, <span class="string">&#x27;delay&#x27;</span>:edge[<span class="string">&#x27;delay&#x27;</span>], <span class="string">&#x27;bw&#x27;</span>:edge[<span class="string">&#x27;bw&#x27;</span>]&#125;)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="配置流量最大的路径">配置流量最大的路径</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> dst <span class="keyword">in</span> self.host_mac_to: </span><br><span class="line">    self.pathes.setdefault(src, &#123;&#125;)</span><br><span class="line">    self.pathes[src].setdefault(dst, [])</span><br><span class="line">    self.pathes.setdefault(dst, &#123;&#125;)</span><br><span class="line">    self.pathes[dst].setdefault(src, [])<span class="comment">#路径初始化</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(self.pathes[src][dst]) == <span class="number">0</span>: </span><br><span class="line">        self.pathes[src][dst], max_bw = self.ford_fulkerson(src, dst)</span><br><span class="line">        self.pathes[dst][src] = self.pathes[src][dst][::-<span class="number">1</span>]</span><br><span class="line">        <span class="comment">#调用 ford_fulkerson 得到返回值作为流量最大的路径</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Widest path:&#123;&#125; &#123;&#125;Mbps&quot;</span>.<span class="built_in">format</span>(self.pathes[src][dst], max_bw))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;================================================================&quot;</span>)</span><br><span class="line">        <span class="comment">#读取正向和反向的端口信息，用于下发流表</span></span><br><span class="line">    next_dpid = self.pathes[src][dst][self.pathes[src][dst].index(dpid)+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> self.links:</span><br><span class="line">        <span class="keyword">if</span> link[<span class="string">&#x27;src_dpid&#x27;</span>] == dpid <span class="keyword">and</span> link[<span class="string">&#x27;dst_dpid&#x27;</span>] == next_dpid:</span><br><span class="line">            out_port = link[<span class="string">&#x27;src_port_no&#x27;</span>]</span><br><span class="line">            Break</span><br><span class="line">     <span class="comment">#流表配置</span></span><br><span class="line">    actions = [ofp_parser.OFPActionOutput(out_port)]</span><br><span class="line">    <span class="keyword">match</span> = ofp_parser.OFPMatch(in_port=in_port, eth_dst=dst, eth_src=src)</span><br><span class="line">    self.add_flow(datapath, <span class="number">1</span>,<span class="keyword">match</span>, actions)</span><br></pre></td></tr></table></figure><h1 id="成果展示-2">成果展示</h1><h2 id="拓扑的构建">拓扑的构建</h2><p>（1）mininet侧</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103225738246.png" alt="mininet侧拓扑构建"></p><p>（2）RYU 侧</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103225804296.png" alt="RYU侧拓扑连接"></p><p>（3）二十四节点网络拓扑可视化</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103225833446.png" alt="拓扑可视化"></p><h2 id="Ford-Fulkerson-算法实现">Ford-Fulkerson 算法实现</h2><p>（1）mininet 侧：连通性良好</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103225922775.png" alt="mininet侧连通性"></p><p>（2）最大流路径展示（以 h1 ping h8 为例）</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103225945953.png" alt="mininet侧带宽信息"></p><p>（3）ryu 侧</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103230004883.png" alt="RYU侧最大流路径配置"></p><p>（4）最大流路径可视化</p><p>（黄色路径为最大流路径，黑色路径为未经过路径）</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103230044990.png" alt="最大流路径可视化"></p>]]></content>
      
      
      <categories>
          
          <category> 实验实操 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> SDN </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能垃圾桶开发（二）——分类网模型训练</title>
      <link href="/36f24770/"/>
      <url>/36f24770/</url>
      
        <content type="html"><![CDATA[<p>分类网模型的实现主要是依靠Taurus(Hi3516DV300)套件实现。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103224013062.png" alt="Taurus(Hi3516DV300)套件"></p><h2 id="数据集收集">数据集收集</h2><p>本项目使用的<a href="https://aistudio.baidu.com/aistudio/datasetdetail/77996?qq-pf-to=pcqq.c2c">数据集</a>图片属性为（720，540，3），适用于有关垃圾分类相关场景的使用，覆盖了日常生活中绝大多数的垃圾类型，包含可回收垃圾、有害垃圾、厨余垃圾、其他垃圾四大垃圾。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103224043297.png" alt="数据集"></p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103224100044.png" alt="可回收垃圾-线示意图"></p><h2 id="环境搭建">环境搭建</h2><p>（一）安装Anaconda</p><p>在 linux 命令端输入</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.anaconda.com/archive/Anaconda3-5.2.0-Linux-x86_64.sh </span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash Anaconda3-5.2.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p>（二）配置环境</p><p>修改bashrc文件，路径进行替换，随后创建 conda 虚拟环境，并激活，conda create -n open-mmlab python=3.6，同样修改bashrc，linux开启自动激活。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103224123316.png" alt="配置环境"></p><p>（三）安装torch 和 torchversion<br>先查看CUDA 版本，随后通过 pip命令下载torch 和 torchversion。</p><p>（四）下载代码并安装对应的库<br>进入<a href="https://github.com/open-mmlab/mmclassification/releases/tag/v0.11.0">github仓库</a>下载代码，放到对应位置后，下载库pip install -e</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103224138471.png" alt="源代码下载"></p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103224153874.png" alt="安装库"></p><h2 id="模型训练">模型训练</h2><p>选用resnet18，分16类，训练参数如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#model settings</span></span><br><span class="line">model = <span class="built_in">dict</span>(</span><br><span class="line">    <span class="built_in">type</span>=<span class="string">&#x27;ImageClassifier&#x27;</span>,</span><br><span class="line">    backbone=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;ResNet&#x27;</span>,</span><br><span class="line">        depth=<span class="number">18</span>,</span><br><span class="line">        num_stages=<span class="number">4</span>,</span><br><span class="line">        out_indices=(<span class="number">3</span>,)</span><br><span class="line">        style=<span class="string">&#x27;pytorch&#x27;</span>),</span><br><span class="line">    neck=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;GlobalAveragePooling&#x27;</span>),</span><br><span class="line">    head=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;LinearClsHead&#x27;</span>,</span><br><span class="line">        num_classes=<span class="number">16</span>,</span><br><span class="line">        in_channels=<span class="number">512</span>,        </span><br><span class="line">        loss=<span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;CrossEntropyLoss&#x27;</span>,loss_weight=<span class="number">1.0</span>),</span><br><span class="line">        topk=(<span class="number">1</span>,<span class="number">5</span>),</span><br><span class="line">    ))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#optimizer</span></span><br><span class="line">optimizer = <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;SGD&#x27;</span>,Ir=<span class="number">0.01</span>,momentum=<span class="number">0.9</span>,weight_decay=<span class="number">0.001</span>)</span><br><span class="line">optimizer_config = <span class="built_in">dict</span>(grad_clip=<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#learning policy</span></span><br><span class="line">Ir_config = <span class="built_in">dict</span>(policy=<span class="string">&#x27;step&#x27;</span>,step=[<span class="number">25</span>,<span class="number">35</span>,<span class="number">45</span>])</span><br><span class="line">runner = <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;EpochBasedRunner,max_epochs=50)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dataset settings</span></span><br><span class="line">dataset_type =<span class="string">&#x27;ImageNet&#x27;</span></span><br><span class="line">img_norm_cfg = <span class="built_in">dict</span>(</span><br><span class="line">    mean=[<span class="number">127.5</span>,<span class="number">127.5</span>,<span class="number">127.51</span>,std=[<span class="number">127.5</span>,<span class="number">127.5</span>,<span class="number">127.51</span>,to rgb=<span class="literal">True</span>)</span><br><span class="line">train_pipeline = [</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;LoadlmageFromFile&#x27;</span>),</span><br><span class="line">    <span class="comment">#dict(type=&#x27;RandomResizedCrop&#x27;,size=224),</span></span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Resize&#x27;</span>,size=(<span class="number">256</span>,<span class="number">256</span>)),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;RandomFlip&#x27;</span>,flip_prob=<span class="number">0.5</span>,direction=<span class="string">&#x27;horizontal&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Normalize&#x27;</span>,**img_norm_cfg),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;ImageToTensor&#x27;</span>,keys=[<span class="string">&#x27;img&#x27;</span>]),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;ToTensor&#x27;</span>,keys=[<span class="string">&#x27;gt_label&#x27;</span>]),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Collect&#x27;</span>,keys=[<span class="string">&#x27;img&#x27;</span>,<span class="string">&#x27;gt_label&#x27;</span>]) </span><br><span class="line">]</span><br><span class="line">                                  </span><br><span class="line">test_pipeline = [</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;LoadlmageFromFile&#x27;</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Resize&#x27;</span>,size=(<span class="number">256</span>,<span class="number">256</span>)),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;CenterCrop&#x27;</span>,crop_size=<span class="number">224</span>),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Normalize&#x27;</span>,**img_norm_cfg),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;ImageToTensor&#x27;</span>,keys=[<span class="string">&#x27;img&#x27;</span>]),</span><br><span class="line">    <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;Collect&#x27;</span>,keys=[<span class="string">&#x27;img&#x27;</span>])</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">dict</span>(</span><br><span class="line">    samples_per_gpu=<span class="number">32</span>,</span><br><span class="line">    workers_per_gpu=<span class="number">1</span>,</span><br><span class="line">    train=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=dataset_type,</span><br><span class="line">        data_prefix=<span class="string">&#x27;/home/ubuntu/classify_dataset&#x27;</span>,</span><br><span class="line">        pipeline=train_pipeline),</span><br><span class="line">    val=<span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=dataset_type,</span><br></pre></td></tr></table></figure><p>调用以下语句使用1个GPU进行训练</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ./tools/dist_train.sh configs/resnet/resnet18_b32x8_imagenet.py --work-dir ./ckpt3</span><br></pre></td></tr></table></figure><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103224208621.png" alt="模型训练"></p><h2 id="网络模型转化">网络模型转化</h2><p>修改resnet_pytorch_2_caffe.py文件，并转换生成resnet18.caffemodel 和 resnet18.prototxt。修改.prototx 网络文件，并得到我们的网络模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>,<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">from</span> torchvision.models <span class="keyword">import</span> resnet</span><br><span class="line"><span class="keyword">import</span> pytorch to caffe</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> name==<span class="string">&#x27;_main_&#x27;</span>:</span><br><span class="line">    name=<span class="string">&#x27;resnet18&#x27;</span></span><br><span class="line">    resnet18=resnet.resnet18(num classes=<span class="number">16</span>)</span><br><span class="line">    checkpoint = torch.load(<span class="string">&quot;/home/ubuntu/mmclassification/ckpt3/latest.pth&quot;</span>)</span><br><span class="line">    new_sd = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> checkpoint[<span class="string">&#x27;state dict&#x27;</span>].items（）:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> k.endswith(<span class="string">&#x27;num batches tracked&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> k.startswith(backbone):</span><br><span class="line">                k_new = k.split(<span class="string">&#x27;backbone.&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> k.startswith(<span class="string">&#x27;head.&#x27;</span>):</span><br><span class="line">                k_new = k.split(<span class="string">&#x27;head.&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            new_sd[k new]=v</span><br><span class="line">    resnet18.load_state_dict(new_sd)</span><br><span class="line">    resnet18.<span class="built_in">eval</span>()</span><br><span class="line">    <span class="built_in">input</span>=torch.ones([<span class="number">1</span>,<span class="number">3</span>,<span class="number">224</span>,<span class="number">224</span>])</span><br><span class="line">    <span class="comment">#input=torch.ones([1,3,224,224])</span></span><br><span class="line">    pytorch_to_caffe.trans_net(resnet18,<span class="built_in">input</span>,name)</span><br><span class="line">    pytorch_to_caffe.save_prototxt(<span class="string">&#x27;&#123;&#125;.prototxt&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">    pytorch_to_caffe.save_caffemodel(<span class="string">&#x27;&#123;&#125;.caffemodel&#x27;</span>.<span class="built_in">format</span>(name))</span><br></pre></td></tr></table></figure><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103224224687.png" alt="网络模型可视化"></p><h2 id="模型量化">模型量化</h2><p>利用RuyiStudio生成wk文件：</p><ol><li>mean.txt 制作</li><li>imagelist.txt 制作</li><li>配置 Input_Setting</li><li>Mapper Setting 配置</li><li>Dynamic Parameters 配置</li></ol><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103224245296.png" alt="模型量化"></p><p>之后在板子上运行会出现下面错误：</p><div class="tip error"><p>[Level]:Error,[Func]:SAMPLE_COMM_SVP_NNIE_LoadModel [Line]:560</p><p>[Info]:Error,HI_MPI_SVP_NNIE_LoadModel failed!</p><p>[Level]:Error,[Func]:SAMPLE_SVP_NNIE_Yolov3 [Line]:3110</p></div><p>出现这个问题是因为仿真环境和板子上运行的环境不一样</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103224301324.png" alt="设置环境版本"></p><h2 id="识别控制">识别控制</h2><p>修改cnn_trash_classify.c文件，并且加入训练好的垃圾分类的wk文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(score &lt; THRESH_MIN)&#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SAMPLE_PRT(<span class="string">&quot;---trash item flag---num:%d,score:%d\n&quot;</span>,item-&gt;num,score);</span><br><span class="line"><span class="keyword">switch</span> (item-&gt;num)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0u</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3u</span>:   </span><br><span class="line">        trashName =<span class="string">&quot;Kitchen Waste&quot;</span>;</span><br><span class="line">        SAMPLE_PRT(<span class="string">&quot;---trash name---:%s\n&quot;</span>,trashName);</span><br><span class="line">        <span class="keyword">break</span>;    </span><br><span class="line">    <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6u</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7u</span>:</span><br><span class="line">        trashName =<span class="string">&quot;Hazardous Waste&quot;</span>;</span><br><span class="line">        SAMPLE_PRT(<span class="string">&quot;---trash name---:%s\n&quot;</span>,trashName);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8u</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9u</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10u</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11u</span>:</span><br><span class="line">        trashName =<span class="string">&quot;Recyclable Waste&quot;</span>;</span><br><span class="line">        SAMPLE_PRT(<span class="string">&quot;---trash name---:%s\n&quot;</span>,trashName);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12u</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">13u</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">14u</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">15u</span>:</span><br><span class="line">        trashName =<span class="string">&quot;Other Waste&quot;</span>;</span><br><span class="line">        SAMPLE_PRT(<span class="string">&quot;---trash name---:%s\n&quot;</span>,trashName);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        trashName =<span class="string">&quot;Unkown Waste&quot;</span>;</span><br><span class="line">        SAMPLE_PRT(<span class="string">&quot;---trash name---:%s\n&quot;</span>,trashName);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">UartTestSample(item-&gt;num);</span><br><span class="line"><span class="keyword">return</span> HI_SUCCESS:</span><br></pre></td></tr></table></figure><h2 id="板端部署与调试">板端部署与调试</h2><ol><li>执行 make clean &amp;&amp; make，对 hispark_taurus_nnie_sample 进行编译；</li><li>将 sample_nnie_main 这个可执行文件，拷贝到/home/hispark/code/HiSpark_Hi3516DV300_SDK_SPC021/osdrv/pub/rootfs_glibc/rot/目录下；</li><li>接下来需要制作文件系统，命令为cd /home/ubuntu/code/HiSpark_Hi3516DV300_SDK_SPC021./build.sh ext4</li><li>使用 HiTool 工具进行烧录</li></ol><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103224319272.png" alt="HiTool烧录"></p><h2 id="模型验证">模型验证</h2><p>分类效果良好。</p><div class="video"><video controls preload><source src='https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/video/%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB_x264.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><hr><blockquote><p>鸣谢：廉廉子、城城子、杰杰子、皓皓子</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器视觉 </tag>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能垃圾桶开发（一）——外设控制</title>
      <link href="/4dd1a6f1/"/>
      <url>/4dd1a6f1/</url>
      
        <content type="html"><![CDATA[<p>在人工智能课上拿到了Taurus &amp; Pegasus AI计算机视觉基础开发套件，我们将用它实现可以智能识别垃圾类别的垃圾桶吗，核心板Hi3516DV300主要用于垃圾识别并分类，Hi3861主要用于基础外设的控制。</p><hr><h1 id="Hi3861板子的开发">Hi3861板子的开发</h1><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103224348490.png" alt="Hi3861实物图"></p><details class="folding-tag" yellow><summary> OpenHarmony轻量系统开发入门资料 </summary>              <div class='content'>              <ul><li><a href="https://ost.51cto.com/posts/10086">源代码和环境搭建</a></li><li><a href="https://ost.51cto.com/posts/10087">代码编译和烧录</a></li><li><a href="https://ost.51cto.com/posts/944">程序编写示例</a></li></ul>              </div>            </details><h2 id="舵机驱动">舵机驱动</h2><h3 id="基本原理-2">基本原理</h3><p>微处理器产生的 <span class="bubble-content">PWM信号</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#FFB6C1;">脉冲宽度调制信号，可调节信号的占空比</span></span> 通过信号线进入舵机产生直流偏置电压，与舵机内部的基准电压作比较，电压差的正负输出到电机驱动芯片上，从而决定正反转。</p><p>高电平在一个周期（20ms）的持续时间对应的舵机角度可参考如下（以实际调节值为准）</p><table><thead><tr><th style="text-align:center">t / ms</th><th style="text-align:center">对应角度 / <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mo lspace="0em" rspace="0em">∘</mo></msup></mrow><annotation encoding="application/x-tex">^{\circ}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6741em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6741em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∘</span></span></span></span></span></span></span></span></span></span></span></span></th></tr></thead><tbody><tr><td style="text-align:center">0.5</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1.0</td><td style="text-align:center">45</td></tr><tr><td style="text-align:center">5.0</td><td style="text-align:center">90</td></tr><tr><td style="text-align:center">2.0</td><td style="text-align:center">135</td></tr><tr><td style="text-align:center">2.5</td><td style="text-align:center">180</td></tr></tbody></table><h3 id="注意点">注意点</h3><p>注意引脚的功能复用，由于引脚数量有限，往往有多个功能复用一个引脚，在使用引脚时要选择引脚的初始化。套件中舵机的型号为SG90，虽然板子自带有pwm的功能，但在测试过程中该功能无法使舵机工作。</p><p>我们可以根据pwm的逻辑直接使用引脚的GPIO功能来完成pwm信号的实现。实现逻辑就是先设置20ms的周期，然后根据所需角度调节GPIO输出高电平的时间，周期其余时间输出低电平即可。</p><p>另外还需要注意根据板子结构图选择合适的GPIO引脚。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103224409397.png" alt="Hi3861结构图"></p><p>根据上图还可以控制相应的LED灯的点亮。</p><h2 id="OLED屏幕显示">OLED屏幕显示</h2><p>套件中还提供了一块OLED屏，通过<a href="https://ost.51cto.com/posts/1145">基础教程</a>可以很容易的复现出来。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103224508147.png" alt="oled演示"></p><h2 id="成果展示-5">成果展示</h2><div class="video"><video controls preload><source src='https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/video/%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6%E6%BC%94%E7%A4%BA_x264.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div><h2 id="源代码">源代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;hi_types_base.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hi_gpio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hi_io.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hi_time.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iot_gpio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ohos_init.h&quot;</span>  <span class="comment">//在//utils/native/lite/include&quot;里，负责系统任务，如SYS_RUN</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cmsis_os2.h&quot;</span>  <span class="comment">//在//kernel/liteos_m/kal/cmsis&quot;里，负责线程，如osThreadAttr_t</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iot_i2c.h&quot;</span>    <span class="comment">//在 &quot;//base/iot_hardware/peripheral/interfaces/kits&quot;里，负责各种接口，如IoTGpioSetOutputVal</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iot_gpio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iot_errno.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iot_uart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;oled_ssd1306.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AHT20_BAUDRATE (400 * 1000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AHT20_I2C_IDX 13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*舵机线程*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">Servo_Task</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *arg)</span></span><br><span class="line">&#123;    </span><br><span class="line">(<span class="type">void</span>)arg;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter Servo_Task\n&quot;</span>);</span><br><span class="line"><span class="type">int</span> gpio_id[] = &#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="type">int</span> led_id[] = &#123;<span class="number">2</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">IoTGpioSetOutputVal(led_id[<span class="number">0</span>],HI_GPIO_VALUE1);</span><br><span class="line">set_angle(<span class="number">1800</span>,gpio_id[<span class="number">0</span>]);</span><br><span class="line">hi_udelay(<span class="number">1000000</span>);</span><br><span class="line">set_angle(<span class="number">2477</span>,gpio_id[<span class="number">0</span>]);</span><br><span class="line">IoTGpioSetOutputVal(led_id[<span class="number">0</span>],HI_GPIO_VALUE0);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2\n&quot;</span>);</span><br><span class="line">IoTGpioSetOutputVal(led_id[<span class="number">1</span>],HI_GPIO_VALUE1);</span><br><span class="line">set_angle(<span class="number">1700</span>,gpio_id[<span class="number">1</span>]);</span><br><span class="line">hi_udelay(<span class="number">1000000</span>);</span><br><span class="line">set_angle(<span class="number">2460</span>,gpio_id[<span class="number">1</span>]);</span><br><span class="line">IoTGpioSetOutputVal(led_id[<span class="number">1</span>],HI_GPIO_VALUE0);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3\n&quot;</span>);</span><br><span class="line">IoTGpioSetOutputVal(led_id[<span class="number">2</span>],HI_GPIO_VALUE1);</span><br><span class="line">set_angle(<span class="number">1500</span>,gpio_id[<span class="number">2</span>]);</span><br><span class="line">hi_udelay(<span class="number">1000000</span>);</span><br><span class="line">set_angle(<span class="number">2477</span>,gpio_id[<span class="number">2</span>]);</span><br><span class="line">IoTGpioSetOutputVal(led_id[<span class="number">2</span>],HI_GPIO_VALUE0);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;4\n&quot;</span>);</span><br><span class="line">IoTGpioSetOutputVal(led_id[<span class="number">3</span>],HI_GPIO_VALUE1);</span><br><span class="line">set_angle(<span class="number">1850</span>,gpio_id[<span class="number">3</span>]);</span><br><span class="line">hi_udelay(<span class="number">1000000</span>);</span><br><span class="line">set_angle(<span class="number">2477</span>,gpio_id[<span class="number">3</span>]);</span><br><span class="line">IoTGpioSetOutputVal(led_id[<span class="number">3</span>],HI_GPIO_VALUE0);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//惊喜</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">IoTGpioSetOutputVal(led_id[<span class="number">0</span>],HI_GPIO_VALUE1);</span><br><span class="line">set_angle(<span class="number">1800</span>,gpio_id[<span class="number">0</span>]);</span><br><span class="line">IoTGpioSetOutputVal(led_id[<span class="number">1</span>],HI_GPIO_VALUE1);</span><br><span class="line">set_angle(<span class="number">1850</span>,gpio_id[<span class="number">1</span>]);</span><br><span class="line">IoTGpioSetOutputVal(led_id[<span class="number">2</span>],HI_GPIO_VALUE1);</span><br><span class="line">set_angle(<span class="number">1500</span>,gpio_id[<span class="number">2</span>]);</span><br><span class="line">IoTGpioSetOutputVal(led_id[<span class="number">3</span>],HI_GPIO_VALUE1);</span><br><span class="line">set_angle(<span class="number">1850</span>,gpio_id[<span class="number">3</span>]);</span><br><span class="line">hi_udelay(<span class="number">100000</span>);</span><br><span class="line">set_angle(<span class="number">2477</span>,gpio_id[<span class="number">0</span>]);</span><br><span class="line">IoTGpioSetOutputVal(led_id[<span class="number">0</span>],HI_GPIO_VALUE0);</span><br><span class="line">set_angle(<span class="number">2460</span>,gpio_id[<span class="number">1</span>]);</span><br><span class="line">IoTGpioSetOutputVal(led_id[<span class="number">1</span>],HI_GPIO_VALUE0);</span><br><span class="line">set_angle(<span class="number">2477</span>,gpio_id[<span class="number">2</span>]);</span><br><span class="line">IoTGpioSetOutputVal(led_id[<span class="number">2</span>],HI_GPIO_VALUE0);</span><br><span class="line">set_angle(<span class="number">2477</span>,gpio_id[<span class="number">3</span>]);</span><br><span class="line">IoTGpioSetOutputVal(led_id[<span class="number">3</span>],HI_GPIO_VALUE0);</span><br><span class="line">hi_udelay(<span class="number">100000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置旋转角度*/</span></span><br><span class="line">hi_void <span class="title function_">set_angle</span><span class="params">(hi_u32 utime, <span class="type">char</span> gpio_id)</span></span><br><span class="line">&#123;</span><br><span class="line">IoTGpioSetOutputVal(gpio_id,HI_GPIO_VALUE1);</span><br><span class="line">    hi_udelay(utime);  <span class="comment">//单位为微秒</span></span><br><span class="line"></span><br><span class="line">IoTGpioSetOutputVal(gpio_id,HI_GPIO_VALUE0);</span><br><span class="line">    hi_udelay(<span class="number">20000</span>-utime);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*oled显示线程*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">Oled_Task</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter Oled_Task\n&quot;</span>);</span><br><span class="line">    (<span class="type">void</span>)arg;</span><br><span class="line">    OledInit();</span><br><span class="line">    OledFillScreen(<span class="number">0</span>);</span><br><span class="line">    IoTI2cInit(AHT20_I2C_IDX, AHT20_BAUDRATE);</span><br><span class="line">OledShowString(<span class="number">0</span>, <span class="number">2</span>, <span class="string">&quot;Pursue G-fashion&quot;</span>, <span class="number">1</span>);<span class="comment">/* 屏幕第0列2行显示1行 */</span></span><br><span class="line">OledShowString(<span class="number">5</span>, <span class="number">4</span>, <span class="string">&quot;Embrace G-life&quot;</span>, <span class="number">1</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*UART线程</span></span><br><span class="line"><span class="comment">static void* Uart_Task(const char* arg)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    unsigned int len = 0;</span></span><br><span class="line"><span class="comment">//unsigned char uartWriteBuff[] = &quot;hello uart!&quot;;</span></span><br><span class="line"><span class="comment">//unsigned int uartReadBuff = 0;</span></span><br><span class="line"><span class="comment">int Identification = 0;</span></span><br><span class="line"><span class="comment">    (void)arg;</span></span><br><span class="line"><span class="comment">    printf(&quot;Enter Uart_Task\n&quot;);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    IoTGpioInit(1); // 使用GPIO，都需要调用该接口</span></span><br><span class="line"><span class="comment">// 初始化UART配置，115200，数据bit为8,停止位1，奇偶校验为NONE，流控为NONE</span></span><br><span class="line"><span class="comment">    IotUartAttribute g_uart_cfg = &#123;115200, 8, 1, IOT_UART_PARITY_NONE, 0,0&#125;;</span></span><br><span class="line"><span class="comment">hi_io_set_func(1,HI_IO_FUNC_GPIO_1_UART1_RXD);</span></span><br><span class="line"><span class="comment">    IoTUartInit(1, &amp;g_uart_cfg);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    //UartWrite(WIFI_IOT_UART_IDX_2, (unsigned char *)uartWriteBuff, sizeof(uartWriteBuff));</span></span><br><span class="line"><span class="comment">printf(&quot;Uart reading...\n&quot;);</span></span><br><span class="line"><span class="comment">    while (1) &#123;</span></span><br><span class="line"><span class="comment">        IoTUartRead(1, Identification, sizeof(Identification));</span></span><br><span class="line"><span class="comment">        if (Identification != 0) &#123;</span></span><br><span class="line"><span class="comment">printf(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&quot;);</span></span><br><span class="line"><span class="comment">            printf(&quot;Uart read data:%d\n&quot;, Identification);</span></span><br><span class="line"><span class="comment">printf(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n&quot;);</span></span><br><span class="line"><span class="comment">hi_udelay(1200000);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else&#123;</span></span><br><span class="line"><span class="comment">usleep(100000);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return NULL;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*入口函数*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">duojiEntry</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*GPIO初始化*/</span></span><br><span class="line"><span class="type">int</span> GPIO[] = &#123;<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="type">char</span> *GPIO_func[] = &#123;<span class="string">&quot;HI_IO_FUNC_GPIO_2_GPIO&quot;</span>,<span class="string">&quot;HI_IO_FUNC_GPIO_6_GPIO&quot;</span>,\</span><br><span class="line"><span class="string">&quot;HI_IO_FUNC_GPIO_7_GPIO&quot;</span>,<span class="string">&quot;HI_IO_FUNC_GPIO_8_GPIO&quot;</span>,<span class="string">&quot;HI_IO_FUNC_GPIO_9_GPIO&quot;</span>,\</span><br><span class="line"><span class="string">&quot;HI_IO_FUNC_GPIO_10_GPIO&quot;</span>,<span class="string">&quot;HI_IO_FUNC_GPIO_11_GPIO&quot;</span>,<span class="string">&quot;HI_IO_FUNC_GPIO_12_GPIO&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">IoTGpioInit(GPIO[i]);</span><br><span class="line">hi_io_set_func(GPIO[i],GPIO_func[i]);</span><br><span class="line">IoTGpioSetDir(GPIO[i], HI_GPIO_DIR_OUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">osThreadAttr_t servo_attr; <span class="comment">//定义舵机线程</span></span><br><span class="line">    servo_attr.name = <span class="string">&quot;Servo_Task&quot;</span>;</span><br><span class="line">    servo_attr.attr_bits = <span class="number">0U</span>;</span><br><span class="line">    servo_attr.cb_mem = <span class="literal">NULL</span>;</span><br><span class="line">    servo_attr.cb_size = <span class="number">0U</span>;</span><br><span class="line">    servo_attr.stack_mem = <span class="literal">NULL</span>;</span><br><span class="line">    servo_attr.stack_size = <span class="number">1024</span>;</span><br><span class="line">    servo_attr.priority = osPriorityNormal;</span><br><span class="line"><span class="comment">//创建舵机线程并判断是否创建成功</span></span><br><span class="line"><span class="keyword">if</span> (osThreadNew((osThreadFunc_t)Servo_Task, <span class="literal">NULL</span>, &amp;servo_attr) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nSucceed to create Servo_Task!\n&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">osThreadAttr_t Oled_attr; <span class="comment">//定义oled显示线程</span></span><br><span class="line">    Oled_attr.name = <span class="string">&quot;Oled_Task&quot;</span>;</span><br><span class="line">    Oled_attr.attr_bits = <span class="number">0U</span>;</span><br><span class="line">    Oled_attr.cb_mem = <span class="literal">NULL</span>;</span><br><span class="line">    Oled_attr.cb_size = <span class="number">0U</span>;</span><br><span class="line">    Oled_attr.stack_mem = <span class="literal">NULL</span>;</span><br><span class="line">    Oled_attr.stack_size = <span class="number">4096</span>; <span class="comment">/* 任务大小4096 */</span></span><br><span class="line">    Oled_attr.priority = osPriorityNormal;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建oled显示线程并判断是否创建成功</span></span><br><span class="line">    <span class="keyword">if</span> (osThreadNew((osThreadFunc_t)Oled_Task, <span class="literal">NULL</span>, &amp;Oled_attr) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Succeed to create Oled_Task!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">osThreadAttr_t Uart_attr; //定义UART线程</span></span><br><span class="line"><span class="comment">    Uart_attr.name = &quot;Uart_Task&quot;;</span></span><br><span class="line"><span class="comment">    Uart_attr.attr_bits = 0U;</span></span><br><span class="line"><span class="comment">    Uart_attr.cb_mem = NULL;</span></span><br><span class="line"><span class="comment">    Uart_attr.cb_size = 0U;</span></span><br><span class="line"><span class="comment">    Uart_attr.stack_mem = NULL;</span></span><br><span class="line"><span class="comment">    Uart_attr.stack_size = 4096; // 堆栈大小</span></span><br><span class="line"><span class="comment">    Uart_attr.priority = osPriorityNormal; // 优先级</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">//创建UART线程并判断是否创建成功</span></span><br><span class="line"><span class="comment">    if (osThreadNew((osThreadFunc_t)Uart_Task, NULL, &amp;Uart_attr) != NULL) &#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;Succeed to create Uart_Task!\n&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">SYS_RUN(duojiEntry);</span><br></pre></td></tr></table></figure><p>BUILD.gn文件设置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">static_library(&quot;duoji&quot;) &#123;</span><br><span class="line">    sources = [</span><br><span class="line">        &quot;hal_iot_gpio_ex.c&quot;,</span><br><span class="line">        &quot;duoji.c&quot;,</span><br><span class="line">        &quot;oled_ssd1306.c&quot;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    include_dirs = [</span><br><span class="line">        &quot;//utils/native/lite/include&quot;,</span><br><span class="line">        &quot;//kernel/liteos_m/kal/cmsis&quot;,</span><br><span class="line">        &quot;//base/iot_hardware/peripheral/interfaces/kits&quot;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>辅助代码如下，与上面的文件放在同一个文件夹即可。</p><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">hal_iot_gpio_ex.c</button></li><li class="tab"><button type="button" data-href="#-2">oled_ssd1306.c</button></li><li class="tab"><button type="button" data-href="#-3">iot_gpio_ex.h</button></li><li class="tab"><button type="button" data-href="#-4">oled_fonts.h</button></li><li class="tab"><button type="button" data-href="#-5">oled_ssd1306.h</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iot_errno.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iot_gpio_ex.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hi_gpio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hi_io.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hi_task.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hi_types_base.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">IoSetPull</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> id, IotIoPull val)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (id &gt;= HI_GPIO_IDX_MAX) &#123;</span><br><span class="line">        <span class="keyword">return</span> IOT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hi_io_set_pull((hi_io_name)id, (hi_io_pull)val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">IoSetFunc</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> id, <span class="type">unsigned</span> <span class="type">char</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (id &gt;= HI_GPIO_IDX_MAX) &#123;</span><br><span class="line">        <span class="keyword">return</span> IOT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hi_io_set_func((hi_io_name)id, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">TaskMsleep</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> ms)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (ms &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> IOT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hi_sleep((hi_u32)ms);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ohos_types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iot_errno.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iot_gpio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iot_i2c.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iot_gpio_ex.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;oled_fonts.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;oled_ssd1306.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_I2C_IDX 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_WIDTH    (128)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_I2C_ADDR 0x78 <span class="comment">// 默认地址为 0x78</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_I2C_CMD 0x00 <span class="comment">// 0000 0000       写命令</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_I2C_DATA 0x40 <span class="comment">// 0100 0000(0x40) 写数据</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_I2C_BAUDRATE (400 * 1000) <span class="comment">// 400k</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELAY_100_MS (100 * 1000)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/** Pointer to the buffer storing data to send */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *sendBuf;</span><br><span class="line">    <span class="comment">/** Length of data to send */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span>  sendLen;</span><br><span class="line">    <span class="comment">/** Pointer to the buffer for storing data to receive */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *receiveBuf;</span><br><span class="line">    <span class="comment">/** Length of data received */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span>  receiveLen;</span><br><span class="line">&#125; IotI2cData;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">I2cWiteByte</span><span class="params">(<span class="type">uint8_t</span> regAddr, <span class="type">uint8_t</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> id = OLED_I2C_IDX;</span><br><span class="line">    <span class="type">uint8_t</span> buffer[] = &#123;regAddr, byte&#125;;</span><br><span class="line">    IotI2cData i2cData = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    i2cData.sendBuf = buffer;</span><br><span class="line">    i2cData.sendLen = <span class="keyword">sizeof</span>(buffer) / <span class="keyword">sizeof</span>(buffer[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> IoTI2cWrite(id, OLED_I2C_ADDR, i2cData.sendBuf, i2cData.sendLen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Write a command byte to OLED device.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param cmd the commnad byte to be writen.</span></span><br><span class="line"><span class="comment"> * @return Returns &#123;@link IOT_SUCCESS&#125; if the operation is successful;</span></span><br><span class="line"><span class="comment"> * returns an error code defined in &#123;@link wifiiot_errno.h&#125; otherwise.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">WriteCmd</span><span class="params">(<span class="type">uint8_t</span> cmd)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> I2cWiteByte(OLED_I2C_CMD, cmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Write a data byte to OLED device.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param cmd the data byte to be writen.</span></span><br><span class="line"><span class="comment"> * @return Returns &#123;@link IOT_SUCCESS&#125; if the operation is successful;</span></span><br><span class="line"><span class="comment"> * returns an error code defined in &#123;@link wifiiot_errno.h&#125; otherwise.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">WriteData</span><span class="params">(<span class="type">uint8_t</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> I2cWiteByte(OLED_I2C_DATA, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief ssd1306 OLED Initialize.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">OledInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">uint8_t</span> initCmds[] = &#123;</span><br><span class="line">        <span class="number">0xAE</span>, <span class="comment">// --display off</span></span><br><span class="line">        <span class="number">0x00</span>, <span class="comment">// ---set low column address</span></span><br><span class="line">        <span class="number">0x10</span>, <span class="comment">// ---set high column address</span></span><br><span class="line">        <span class="number">0x40</span>, <span class="comment">// --set start line address</span></span><br><span class="line">        <span class="number">0xB0</span>, <span class="comment">// --set page address</span></span><br><span class="line">        <span class="number">0x81</span>, <span class="comment">// contract control</span></span><br><span class="line">        <span class="number">0xFF</span>, <span class="comment">// --128</span></span><br><span class="line">        <span class="number">0xA1</span>, <span class="comment">// set segment remap</span></span><br><span class="line">        <span class="number">0xA6</span>, <span class="comment">// --normal / reverse</span></span><br><span class="line">        <span class="number">0xA8</span>, <span class="comment">// --set multiplex ratio(1 to 64)</span></span><br><span class="line">        <span class="number">0x3F</span>, <span class="comment">// --1/32 duty</span></span><br><span class="line">        <span class="number">0xC8</span>, <span class="comment">// Com scan direction</span></span><br><span class="line">        <span class="number">0xD3</span>, <span class="comment">// -set display offset</span></span><br><span class="line">        <span class="number">0x00</span>,</span><br><span class="line">        <span class="number">0xD5</span>, <span class="comment">// set osc division</span></span><br><span class="line">        <span class="number">0x80</span>,</span><br><span class="line">        <span class="number">0xD8</span>, <span class="comment">// set area color mode off</span></span><br><span class="line">        <span class="number">0x05</span>,</span><br><span class="line">        <span class="number">0xD9</span>, <span class="comment">// Set Pre-Charge Period</span></span><br><span class="line">        <span class="number">0xF1</span>,</span><br><span class="line">        <span class="number">0xDA</span>, <span class="comment">// set com pin configuartion</span></span><br><span class="line">        <span class="number">0x12</span>,</span><br><span class="line">        <span class="number">0xDB</span>, <span class="comment">// set Vcomh</span></span><br><span class="line">        <span class="number">0x30</span>,</span><br><span class="line">        <span class="number">0x8D</span>, <span class="comment">// set charge pump enable</span></span><br><span class="line">        <span class="number">0x14</span>,</span><br><span class="line">        <span class="number">0xAF</span>, <span class="comment">// --turn on oled panel</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    IoTGpioInit(<span class="number">13</span>); <span class="comment">/* 初始化gpio13 */</span></span><br><span class="line">    IoSetFunc(<span class="number">13</span>, <span class="number">6</span>); <span class="comment">/* gpio13使用6功能 */</span></span><br><span class="line">    IoTGpioInit(<span class="number">14</span>); <span class="comment">/* 初始化gpio14 */</span></span><br><span class="line">    IoSetFunc(<span class="number">14</span>, <span class="number">6</span>); <span class="comment">/* gpio14使用6功能 */</span></span><br><span class="line"></span><br><span class="line">    IoTI2cInit(<span class="number">0</span>, OLED_I2C_BAUDRATE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE(initCmds); i++) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> status = WriteCmd(initCmds[i]);</span><br><span class="line">        <span class="keyword">if</span> (status != IOT_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> status;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> IOT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">OledSetPosition</span><span class="params">(<span class="type">uint8_t</span> x, <span class="type">uint8_t</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    WriteCmd(<span class="number">0xb0</span> + y);</span><br><span class="line">    WriteCmd(((x &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>) | <span class="number">0x10</span>); <span class="comment">/* 在0xf0右移4位，与0x10或，实现了写数据 */</span></span><br><span class="line">    WriteCmd(x &amp; <span class="number">0x0f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 全屏填充 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OledFillScreen</span><span class="params">(<span class="type">uint8_t</span> fillData)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint8_t</span> m = <span class="number">0</span>; m &lt; <span class="number">8</span>; m++) &#123; <span class="comment">/* 循环8次实现横屏填充 */</span></span><br><span class="line">        WriteCmd(<span class="number">0xb0</span> + m);</span><br><span class="line">        WriteCmd(<span class="number">0x00</span>);</span><br><span class="line">        WriteCmd(<span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint8_t</span> n = <span class="number">0</span>; n &lt; <span class="number">128</span>; n++) &#123; <span class="comment">/* 循环128次实现竖屏填充 */</span></span><br><span class="line">            WriteData(fillData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 8*16 typeface</span></span><br><span class="line"><span class="comment"> * @param x: write positon start from x axis</span></span><br><span class="line"><span class="comment"> * @param y: write positon start from y axis</span></span><br><span class="line"><span class="comment"> * @param ch: write data</span></span><br><span class="line"><span class="comment"> * @param font: selected font</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OledShowChar</span><span class="params">(<span class="type">uint8_t</span> x, <span class="type">uint8_t</span> y, <span class="type">uint8_t</span> ch, Font font)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> c = ch - <span class="string">&#x27; &#x27;</span>; <span class="comment">// 得到偏移后的值</span></span><br><span class="line">    <span class="type">uint8_t</span> b = x;</span><br><span class="line">    <span class="type">uint8_t</span> d = y;</span><br><span class="line">    <span class="keyword">if</span> (b &gt; OLED_WIDTH - <span class="number">1</span>) &#123;</span><br><span class="line">        b = <span class="number">0</span>;</span><br><span class="line">        d = d + <span class="number">2</span>; <span class="comment">/* 得到偏移后的值2 */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (font == FONT8_X16) &#123;</span><br><span class="line">        OledSetPosition(b, d);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123; <span class="comment">/* 循环8次实现横屏填充 */</span></span><br><span class="line">            WriteData(g_f8X16[c * <span class="number">16</span> + i]); <span class="comment">/* 循环16次实现横屏填充 */</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        OledSetPosition(b, d + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123; <span class="comment">/* 循环8次实现横屏填充 */</span></span><br><span class="line">            WriteData(g_f8X16[c * <span class="number">16</span> + i + <span class="number">8</span>]); <span class="comment">/* 循环16次实现横屏填充8列 */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        OledSetPosition(b, d);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint8_t</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123; <span class="comment">/* 循环6次实现横屏填充 */</span></span><br><span class="line">            WriteData(g_f6X8[c][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">OledShowString</span><span class="params">(<span class="type">uint8_t</span> x, <span class="type">uint8_t</span> y, <span class="type">const</span> <span class="type">char</span>* str, Font font)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint8_t</span> b = x;</span><br><span class="line">    <span class="type">uint8_t</span> d = y;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;param is NULL,Please check!!!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (str[j]) &#123;</span><br><span class="line">        OledShowChar(b, d, str[j], font);</span><br><span class="line">        b += <span class="number">8</span>; <span class="comment">/* 循环8次实现横屏填充 */</span></span><br><span class="line">        <span class="keyword">if</span> (b &gt; <span class="number">120</span>) &#123; <span class="comment">/* 循环120次实现横屏填充 */</span></span><br><span class="line">            b = <span class="number">0</span>;</span><br><span class="line">            d += <span class="number">2</span>; <span class="comment">/* 循环2次实现横屏填充 */</span></span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> IOT_GPIO_EX_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOT_GPIO_EX_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Enumerates GPIO pull-up or pull-down settings.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    <span class="comment">/** No pull */</span></span><br><span class="line">    IOT_IO_PULL_NONE,</span><br><span class="line">    <span class="comment">/** Pull-up */</span></span><br><span class="line">    IOT_IO_PULL_UP,</span><br><span class="line">    <span class="comment">/** Pull-down */</span></span><br><span class="line">    IOT_IO_PULL_DOWN,</span><br><span class="line">    <span class="comment">/** Maximum value */</span></span><br><span class="line">    IOT_IO_PULL_MAX,</span><br><span class="line">&#125; IotIoPull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ingroup iot_io</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * GPIO pin ID. CNcomment:IO硬件管脚编号。CNend</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_NAME_GPIO_0, <span class="comment">/* &lt;GPIO0 */</span></span><br><span class="line">    IOT_IO_NAME_GPIO_1, <span class="comment">/* &lt;GPIO1 */</span></span><br><span class="line">    IOT_IO_NAME_GPIO_2, <span class="comment">/* &lt;GPIO2 */</span></span><br><span class="line">    IOT_IO_NAME_GPIO_3, <span class="comment">/* &lt;GPIO3 */</span></span><br><span class="line">    IOT_IO_NAME_GPIO_4, <span class="comment">/* &lt;GPIO4 */</span></span><br><span class="line">    IOT_IO_NAME_GPIO_5, <span class="comment">/* &lt;GPIO5 */</span></span><br><span class="line">    IOT_IO_NAME_GPIO_6, <span class="comment">/* &lt;GPIO6 */</span></span><br><span class="line">    IOT_IO_NAME_GPIO_7, <span class="comment">/* &lt;GPIO7 */</span></span><br><span class="line">    IOT_IO_NAME_GPIO_8, <span class="comment">/* &lt;GPIO8 */</span></span><br><span class="line">    IOT_IO_NAME_GPIO_9, <span class="comment">/* &lt;GPIO9 */</span></span><br><span class="line">    IOT_IO_NAME_GPIO_10, <span class="comment">/* &lt;GPIO10 */</span></span><br><span class="line">    IOT_IO_NAME_GPIO_11, <span class="comment">/* &lt;GPIO11 */</span></span><br><span class="line">    IOT_IO_NAME_GPIO_12, <span class="comment">/* &lt;GPIO12 */</span></span><br><span class="line">    IOT_IO_NAME_GPIO_13, <span class="comment">/* &lt;GPIO13 */</span></span><br><span class="line">    IOT_IO_NAME_GPIO_14, <span class="comment">/* &lt;GPIO14 */</span></span><br><span class="line">    IOT_IO_NAME_SFC_CSN, <span class="comment">/* &lt;SFC_CSN */</span></span><br><span class="line">    IOT_IO_NAME_SFC_IO1, <span class="comment">/* &lt;SFC_IO1 */</span></span><br><span class="line">    IOT_IO_NAME_SFC_IO2, <span class="comment">/* &lt;SFC_IO2 */</span></span><br><span class="line">    IOT_IO_NAME_SFC_IO0, <span class="comment">/* &lt;SFC_IO0 */</span></span><br><span class="line">    IOT_IO_NAME_SFC_CLK, <span class="comment">/* &lt;SFC_CLK */</span></span><br><span class="line">    IOT_IO_NAME_SFC_IO3, <span class="comment">/* &lt;SFC_IO3 */</span></span><br><span class="line">    IOT_IO_NAME_MAX,</span><br><span class="line">&#125; IotIoName;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ingroup iot_io</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * GPIO_0 pin function.CNcomment:GPIO_0管脚功能。CNend</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_GPIO_0_GPIO,</span><br><span class="line">    IOT_IO_FUNC_GPIO_0_UART1_TXD = <span class="number">2</span>,</span><br><span class="line">    IOT_IO_FUNC_GPIO_0_SPI1_CK,</span><br><span class="line">    IOT_IO_FUNC_GPIO_0_JTAG_TDO,</span><br><span class="line">    IOT_IO_FUNC_GPIO_0_PWM3_OUT,</span><br><span class="line">    IOT_IO_FUNC_GPIO_0_I2C1_SDA,</span><br><span class="line">&#125; IotIoFuncGpio0;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* GPIO_1 pin function.CNcomment:GPIO_1管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_GPIO_1_GPIO,</span><br><span class="line">    IOT_IO_FUNC_GPIO_1_UART1_RXD = <span class="number">2</span>,</span><br><span class="line">    IOT_IO_FUNC_GPIO_1_SPI1_RXD,</span><br><span class="line">    IOT_IO_FUNC_GPIO_1_JTAG_TCK,</span><br><span class="line">    IOT_IO_FUNC_GPIO_1_PWM4_OUT,</span><br><span class="line">    IOT_IO_FUNC_GPIO_1_I2C1_SCL,</span><br><span class="line">    IOT_IO_FUNC_GPIO_1_BT_FREQ,</span><br><span class="line">&#125; IotIoFuncGpio1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* GPIO_2 pin function.CNcomment:GPIO_2管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_GPIO_2_GPIO,</span><br><span class="line">    IOT_IO_FUNC_GPIO_2_UART1_RTS_N = <span class="number">2</span>,</span><br><span class="line">    IOT_IO_FUNC_GPIO_2_SPI1_TXD,</span><br><span class="line">    IOT_IO_FUNC_GPIO_2_JTAG_TRSTN,</span><br><span class="line">    IOT_IO_FUNC_GPIO_2_PWM2_OUT,</span><br><span class="line">    IOT_IO_FUNC_GPIO_2_SSI_CLK = <span class="number">7</span>,</span><br><span class="line">&#125; IotIoFuncGpio2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* GPIO_3 pin function.CNcomment:GPIO_3管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_GPIO_3_GPIO,</span><br><span class="line">    IOT_IO_FUNC_GPIO_3_UART0_TXD,</span><br><span class="line">    IOT_IO_FUNC_GPIO_3_UART1_CTS_N,</span><br><span class="line">    IOT_IO_FUNC_GPIO_3_SPI1_CSN,</span><br><span class="line">    IOT_IO_FUNC_GPIO_3_JTAG_TDI,</span><br><span class="line">    IOT_IO_FUNC_GPIO_3_PWM5_OUT,</span><br><span class="line">    IOT_IO_FUNC_GPIO_3_I2C1_SDA,</span><br><span class="line">    IOT_IO_FUNC_GPIO_3_SSI_DATA,</span><br><span class="line">&#125; IotIoFuncGpio3;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* GPIO_4 pin function.CNcomment:GPIO_4管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_GPIO_4_GPIO,</span><br><span class="line">    IOT_IO_FUNC_GPIO_4_UART0_RXD = <span class="number">2</span>,</span><br><span class="line">    IOT_IO_FUNC_GPIO_4_JTAG_TMS = <span class="number">4</span>,</span><br><span class="line">    IOT_IO_FUNC_GPIO_4_PWM1_OUT,</span><br><span class="line">    IOT_IO_FUNC_GPIO_4_I2C1_SCL,</span><br><span class="line">&#125; IotIoFuncGpio4;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* GPIO_5 pin function.CNcomment:GPIO_5管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_GPIO_5_GPIO,</span><br><span class="line">    IOT_IO_FUNC_GPIO_5_UART1_RXD = <span class="number">2</span>,</span><br><span class="line">    IOT_IO_FUNC_GPIO_5_SPI0_CSN,</span><br><span class="line">    IOT_IO_FUNC_GPIO_5_PWM2_OUT = <span class="number">5</span>,</span><br><span class="line">    IOT_IO_FUNC_GPIO_5_I2S0_MCLK,</span><br><span class="line">    IOT_IO_FUNC_GPIO_5_BT_STATUS,</span><br><span class="line">&#125; IotIoFuncGpio5;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* GPIO_6 pin function.CNcomment:GPIO_6管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_GPIO_6_GPIO,</span><br><span class="line">    IOT_IO_FUNC_GPIO_6_UART1_TXD = <span class="number">2</span>,</span><br><span class="line">    IOT_IO_FUNC_GPIO_6_SPI0_CK,</span><br><span class="line">    IOT_IO_FUNC_GPIO_6_PWM3_OUT = <span class="number">5</span>,</span><br><span class="line">    IOT_IO_FUNC_GPIO_6_I2S0_TX,</span><br><span class="line">    IOT_IO_FUNC_GPIO_6_COEX_SWITCH,</span><br><span class="line">&#125; IotIoFuncGpio6;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* GPIO_7 pin function.CNcomment:GPIO_7管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_GPIO_7_GPIO,</span><br><span class="line">    IOT_IO_FUNC_GPIO_7_UART1_CTS_N = <span class="number">2</span>,</span><br><span class="line">    IOT_IO_FUNC_GPIO_7_SPI0_RXD,</span><br><span class="line">    IOT_IO_FUNC_GPIO_7_PWM0_OUT = <span class="number">5</span>,</span><br><span class="line">    IOT_IO_FUNC_GPIO_7_I2S0_BCLK,</span><br><span class="line">    IOT_IO_FUNC_GPIO_7_BT_ACTIVE,</span><br><span class="line">&#125; IotIoFuncGpio7;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* GPIO_8 pin function.CNcomment:GPIO_8管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_GPIO_8_GPIO,</span><br><span class="line">    IOT_IO_FUNC_GPIO_8_UART1_RTS_N = <span class="number">2</span>,</span><br><span class="line">    IOT_IO_FUNC_GPIO_8_SPI0_TXD,</span><br><span class="line">    IOT_IO_FUNC_GPIO_8_PWM1_OUT = <span class="number">5</span>,</span><br><span class="line">    IOT_IO_FUNC_GPIO_8_I2S0_WS,</span><br><span class="line">    IOT_IO_FUNC_GPIO_8_WLAN_ACTIVE,</span><br><span class="line">&#125; IotIoFuncGpio8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* GPIO_9 pin function.CNcomment:GPIO_9管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_GPIO_9_GPIO,</span><br><span class="line">    IOT_IO_FUNC_GPIO_9_I2C0_SCL,</span><br><span class="line">    IOT_IO_FUNC_GPIO_9_UART2_RTS_N,</span><br><span class="line">    IOT_IO_FUNC_GPIO_9_SDIO_D2,</span><br><span class="line">    IOT_IO_FUNC_GPIO_9_SPI0_TXD,</span><br><span class="line">    IOT_IO_FUNC_GPIO_9_PWM0_OUT,</span><br><span class="line">    IOT_IO_FUNC_GPIO_9_I2S0_MCLK = <span class="number">7</span>,</span><br><span class="line">&#125; IotIoFuncGpio9;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* GPIO_10 pin function.CNcomment:GPIO_10管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_GPIO_10_GPIO,</span><br><span class="line">    IOT_IO_FUNC_GPIO_10_I2C0_SDA,</span><br><span class="line">    IOT_IO_FUNC_GPIO_10_UART2_CTS_N,</span><br><span class="line">    IOT_IO_FUNC_GPIO_10_SDIO_D3,</span><br><span class="line">    IOT_IO_FUNC_GPIO_10_SPI0_CK,</span><br><span class="line">    IOT_IO_FUNC_GPIO_10_PWM1_OUT,</span><br><span class="line">    IOT_IO_FUNC_GPIO_10_I2S0_TX = <span class="number">7</span>,</span><br><span class="line">&#125; IotIoFuncGpio10;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* GPIO_11 pin function.CNcomment:GPIO_11管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_GPIO_11_GPIO,</span><br><span class="line">    IOT_IO_FUNC_GPIO_11_UART2_TXD = <span class="number">2</span>,</span><br><span class="line">    IOT_IO_FUNC_GPIO_11_SDIO_CMD,</span><br><span class="line">    IOT_IO_FUNC_GPIO_11_SPI0_RXD,</span><br><span class="line">    IOT_IO_FUNC_GPIO_11_PWM2_OUT,</span><br><span class="line">    IOT_IO_FUNC_GPIO_11_RF_TX_EN_EXT,</span><br><span class="line">    IOT_IO_FUNC_GPIO_11_I2S0_RX,</span><br><span class="line">&#125; IotIoFuncGpio11;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* GPIO_12 pin function.CNcomment:GPIO_12管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_GPIO_12_GPIO,</span><br><span class="line">    IOT_IO_FUNC_GPIO_12_UART2_RXD = <span class="number">2</span>,</span><br><span class="line">    IOT_IO_FUNC_GPIO_12_SDIO_CLK,</span><br><span class="line">    IOT_IO_FUNC_GPIO_12_SPI0_CSN,</span><br><span class="line">    IOT_IO_FUNC_GPIO_12_PWM3_OUT,</span><br><span class="line">    IOT_IO_FUNC_GPIO_12_RF_RX_EN_EXT,</span><br><span class="line">    IOT_IO_FUNC_GPIO_12_I2S0_BCLK,</span><br><span class="line">&#125; IotIoFuncGpio12;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* GPIO_13 pin function.CNcomment:GPIO_13管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_GPIO_13_SSI_DATA,</span><br><span class="line">    IOT_IO_FUNC_GPIO_13_UART0_TXD,</span><br><span class="line">    IOT_IO_FUNC_GPIO_13_UART2_RTS_N,</span><br><span class="line">    IOT_IO_FUNC_GPIO_13_SDIO_D0,</span><br><span class="line">    IOT_IO_FUNC_GPIO_13_GPIO,</span><br><span class="line">    IOT_IO_FUNC_GPIO_13_PWM4_OUT,</span><br><span class="line">    IOT_IO_FUNC_GPIO_13_I2C0_SDA,</span><br><span class="line">    IOT_IO_FUNC_GPIO_13_I2S0_WS,</span><br><span class="line">&#125; IotIoFuncGpio13;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* GPIO_14 pin function.CNcomment:GPIO_14管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_GPIO_14_SSI_CLK,</span><br><span class="line">    IOT_IO_FUNC_GPIO_14_UART0_RXD,</span><br><span class="line">    IOT_IO_FUNC_GPIO_14_UART2_CTS_N,</span><br><span class="line">    IOT_IO_FUNC_GPIO_14_SDIO_D1,</span><br><span class="line">    IOT_IO_FUNC_GPIO_14_GPIO,</span><br><span class="line">    IOT_IO_FUNC_GPIO_14_PWM5_OUT,</span><br><span class="line">    IOT_IO_FUNC_GPIO_14_I2C0_SCL,</span><br><span class="line">&#125; IotIoFuncGpio14;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* SFC_CSN pin function.CNcomment:SFC_CSN管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_SFC_CSN_SFC_CSN,</span><br><span class="line">    IOT_IO_FUNC_SFC_CSN_SDIO_D2,</span><br><span class="line">    IOT_IO_FUNC_SFC_CSN_GPIO9,</span><br><span class="line">    IOT_IO_FUNC_SFC_CSN_SPI0_TXD = <span class="number">4</span>,</span><br><span class="line">&#125; IotIoFuncSfcCsn;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* SFC_DO pin function.CNcomment:SFC_DO管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_SFC_IO_1_SFC_DO,</span><br><span class="line">    IOT_IO_FUNC_SFC_IO_1_SDIO_D3,</span><br><span class="line">    IOT_IO_FUNC_SFC_IO_1_GPIO10,</span><br><span class="line">    IOT_IO_FUNC_SFC_IO_1_SPI0_CK = <span class="number">4</span>,</span><br><span class="line">&#125; IotIoFuncSfcIo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* SFC_WPN pin function.CNcomment:SFC_WPN管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_SFC_IO_2_SFC_WPN,</span><br><span class="line">    IOT_IO_FUNC_SFC_IO_2_SDIO_CMD,</span><br><span class="line">    IOT_IO_FUNC_SFC_IO_2_GPIO11,</span><br><span class="line">    IOT_IO_FUNC_SFC_IO_2_RF_TX_EN_EXT,</span><br><span class="line">    IOT_IO_FUNC_SFC_IO_2_SPI0_RXD,</span><br><span class="line">&#125; IotIoFuncSfcIo2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* SFC_DI pin function.CNcomment:SFC_DI管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_SFC_IO_0_SFC_DI,</span><br><span class="line">    IOT_IO_FUNC_SFC_IO_0_SDIO_CLK,</span><br><span class="line">    IOT_IO_FUNC_SFC_IO_0_GPIO12,</span><br><span class="line">    IOT_IO_FUNC_SFC_IO_0_RF_RX_EN_EXT,</span><br><span class="line">    IOT_IO_FUNC_SFC_IO_0_SPI0_CSN,</span><br><span class="line">&#125; IotIoFuncSfcIo0;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* SFC_CLK pin function.CNcomment:SFC_CLK管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_SFC_CLK_SFC_CLK,</span><br><span class="line">    IOT_IO_FUNC_SFC_CLK_SDIO_D0,</span><br><span class="line">    IOT_IO_FUNC_SFC_CLK_GPIO13,</span><br><span class="line">    IOT_IO_FUNC_SFC_CLK_SSI_DATA = <span class="number">4</span>,</span><br><span class="line">&#125; IotIoFuncSfcClk;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* SFC_HOLDN pin function.CNcomment:SFC_HOLDN管脚功能。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_FUNC_SFC_IO_3_SFC_HOLDN,</span><br><span class="line">    IOT_IO_FUNC_SFC_IO_3_SDIO_D1,</span><br><span class="line">    IOT_IO_FUNC_SFC_IO_3_GPIO14,</span><br><span class="line">    IOT_IO_FUNC_SFC_IO_3_SSI_CLK = <span class="number">4</span>,</span><br><span class="line">&#125; IotIoFuncSfcIo3;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ingroup iot_io</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* I/O drive capability.CNcomment:IO驱动能力。CNend</span></span><br><span class="line"><span class="comment">* Note: The HI_IO_NAME_GPIO_0~HI_IO_NAME_GPIO_11 and HI_IO_NAME_GPIO_13~HI_IO_NAME_GPIO_14 driver capabilities are</span></span><br><span class="line"><span class="comment">*       optional.The value range is HI_IO_DRIVER_STRENGTH_0~HI_IO_DRIVER_STRENGTH_3, and the other I/O ranges are</span></span><br><span class="line"><span class="comment">*       HI_IO_DRIVER_STRENGTH_0~HI_IO_DRIVER_STRENGTH_7.CNcomment:注意:HI_IO_NAME_GPIO_0~HI_IO_NAME_GPIO_11、</span></span><br><span class="line"><span class="comment">*       HI_IO_NAME_GPIO_13~HI_IO_NAME_GPIO_14驱动能力可选范围是HI_IO_DRIVER_STRENGTH_0~HI_IO_DRIVER_STRENGTH_3，</span></span><br><span class="line"><span class="comment">*       其余IO范围是HI_IO_DRIVER_STRENGTH_0~HI_IO_DRIVER_STRENGTH_7。CNend</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    IOT_IO_DRIVER_STRENGTH_0 = <span class="number">0</span>,   <span class="comment">/* &lt;Drive strength level 0 (highest).CNcomment:驱动能力0级，驱动能力最高CNend */</span></span><br><span class="line">    IOT_IO_DRIVER_STRENGTH_1,   <span class="comment">/* &lt;Drive strength level 1.CNcomment:驱动能力1级CNend */</span></span><br><span class="line">    IOT_IO_DRIVER_STRENGTH_2,   <span class="comment">/* &lt;Drive strength level 2.CNcomment:驱动能力2级CNend */</span></span><br><span class="line">    IOT_IO_DRIVER_STRENGTH_3,   <span class="comment">/* &lt;Drive strength level 3.CNcomment:驱动能力3级CNend */</span></span><br><span class="line">    IOT_IO_DRIVER_STRENGTH_4,   <span class="comment">/* &lt;Drive strength level 4.CNcomment:驱动能力4级CNend */</span></span><br><span class="line">    IOT_IO_DRIVER_STRENGTH_5,   <span class="comment">/* &lt;Drive strength level 5.CNcomment:驱动能力5级CNend */</span></span><br><span class="line">    IOT_IO_DRIVER_STRENGTH_6,   <span class="comment">/* &lt;Drive strength level 6.CNcomment:驱动能力6级CNend */</span></span><br><span class="line">    IOT_IO_DRIVER_STRENGTH_7,   <span class="comment">/* &lt;Drive strength level 7 (lowest).CNcomment:驱动能力7级，驱动能力最低CNend */</span></span><br><span class="line">    IOT_IO_DRIVER_STRENGTH_MAX,</span><br><span class="line">&#125; IotIoDriverStrength;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">IoSetPull</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> id, IotIoPull val)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">IoSetFunc</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> id, <span class="type">unsigned</span> <span class="type">char</span> val)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">TaskMsleep</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> ms)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">/** @&#125; */</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> OLED_FONTS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_FONTS_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************6*8的点阵************************************/</span></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> g_f6X8[][<span class="number">6</span>] = &#123;</span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span> &#125;, <span class="comment">// sp</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x2f</span>, <span class="number">0x00</span>, <span class="number">0x00</span> &#125;, <span class="comment">// !</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span> &#125;, <span class="comment">// &quot;</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x14</span>, <span class="number">0x7f</span>, <span class="number">0x14</span>, <span class="number">0x7f</span>, <span class="number">0x14</span> &#125;, <span class="comment">// #</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x24</span>, <span class="number">0x2a</span>, <span class="number">0x7f</span>, <span class="number">0x2a</span>, <span class="number">0x12</span> &#125;, <span class="comment">// $</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x62</span>, <span class="number">0x64</span>, <span class="number">0x08</span>, <span class="number">0x13</span>, <span class="number">0x23</span> &#125;, <span class="comment">// %</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x36</span>, <span class="number">0x49</span>, <span class="number">0x55</span>, <span class="number">0x22</span>, <span class="number">0x50</span> &#125;, <span class="comment">// &amp;</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span> &#125;, <span class="comment">// &#x27;</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1c</span>, <span class="number">0x22</span>, <span class="number">0x41</span>, <span class="number">0x00</span> &#125;, <span class="comment">// (</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x22</span>, <span class="number">0x1c</span>, <span class="number">0x00</span> &#125;, <span class="comment">// )</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x14</span>, <span class="number">0x08</span>, <span class="number">0x3E</span>, <span class="number">0x08</span>, <span class="number">0x14</span> &#125;, <span class="comment">// *</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x3E</span>, <span class="number">0x08</span>, <span class="number">0x08</span> &#125;, <span class="comment">// +</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA0</span>, <span class="number">0x60</span>, <span class="number">0x00</span> &#125;, <span class="comment">// ,</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x08</span> &#125;, <span class="comment">// -</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x60</span>, <span class="number">0x60</span>, <span class="number">0x00</span>, <span class="number">0x00</span> &#125;, <span class="comment">// .</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x10</span>, <span class="number">0x08</span>, <span class="number">0x04</span>, <span class="number">0x02</span> &#125;, <span class="comment">// /</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x3E</span>, <span class="number">0x51</span>, <span class="number">0x49</span>, <span class="number">0x45</span>, <span class="number">0x3E</span> &#125;, <span class="comment">// 0</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x42</span>, <span class="number">0x7F</span>, <span class="number">0x40</span>, <span class="number">0x00</span> &#125;, <span class="comment">// 1</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x42</span>, <span class="number">0x61</span>, <span class="number">0x51</span>, <span class="number">0x49</span>, <span class="number">0x46</span> &#125;, <span class="comment">// 2</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x21</span>, <span class="number">0x41</span>, <span class="number">0x45</span>, <span class="number">0x4B</span>, <span class="number">0x31</span> &#125;, <span class="comment">// 3</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x18</span>, <span class="number">0x14</span>, <span class="number">0x12</span>, <span class="number">0x7F</span>, <span class="number">0x10</span> &#125;, <span class="comment">// 4</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x27</span>, <span class="number">0x45</span>, <span class="number">0x45</span>, <span class="number">0x45</span>, <span class="number">0x39</span> &#125;, <span class="comment">// 5</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x3C</span>, <span class="number">0x4A</span>, <span class="number">0x49</span>, <span class="number">0x49</span>, <span class="number">0x30</span> &#125;, <span class="comment">// 6</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x71</span>, <span class="number">0x09</span>, <span class="number">0x05</span>, <span class="number">0x03</span> &#125;, <span class="comment">// 7</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x36</span>, <span class="number">0x49</span>, <span class="number">0x49</span>, <span class="number">0x49</span>, <span class="number">0x36</span> &#125;, <span class="comment">// 8</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x49</span>, <span class="number">0x49</span>, <span class="number">0x29</span>, <span class="number">0x1E</span> &#125;, <span class="comment">// 9</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x36</span>, <span class="number">0x36</span>, <span class="number">0x00</span>, <span class="number">0x00</span> &#125;, <span class="comment">// :</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x56</span>, <span class="number">0x36</span>, <span class="number">0x00</span>, <span class="number">0x00</span> &#125;, <span class="comment">// ;号</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x14</span>, <span class="number">0x22</span>, <span class="number">0x41</span>, <span class="number">0x00</span> &#125;, <span class="comment">// &lt;</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x14</span> &#125;, <span class="comment">// =</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x22</span>, <span class="number">0x14</span>, <span class="number">0x08</span> &#125;, <span class="comment">// &gt;</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x51</span>, <span class="number">0x09</span>, <span class="number">0x06</span> &#125;, <span class="comment">// ?</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x32</span>, <span class="number">0x49</span>, <span class="number">0x59</span>, <span class="number">0x51</span>, <span class="number">0x3E</span> &#125;, <span class="comment">// @</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x7C</span>, <span class="number">0x12</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x7C</span> &#125;, <span class="comment">// A</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0x49</span>, <span class="number">0x49</span>, <span class="number">0x49</span>, <span class="number">0x36</span> &#125;, <span class="comment">// B</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x3E</span>, <span class="number">0x41</span>, <span class="number">0x41</span>, <span class="number">0x41</span>, <span class="number">0x22</span> &#125;, <span class="comment">// C</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0x41</span>, <span class="number">0x41</span>, <span class="number">0x22</span>, <span class="number">0x1C</span> &#125;, <span class="comment">// D</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0x49</span>, <span class="number">0x49</span>, <span class="number">0x49</span>, <span class="number">0x41</span> &#125;, <span class="comment">// E</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0x09</span>, <span class="number">0x09</span>, <span class="number">0x09</span>, <span class="number">0x01</span> &#125;, <span class="comment">// F</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x3E</span>, <span class="number">0x41</span>, <span class="number">0x49</span>, <span class="number">0x49</span>, <span class="number">0x7A</span> &#125;, <span class="comment">// G</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x7F</span> &#125;, <span class="comment">// H</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x7F</span>, <span class="number">0x41</span>, <span class="number">0x00</span> &#125;, <span class="comment">// I</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x41</span>, <span class="number">0x3F</span>, <span class="number">0x01</span> &#125;, <span class="comment">// J</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0x08</span>, <span class="number">0x14</span>, <span class="number">0x22</span>, <span class="number">0x41</span> &#125;, <span class="comment">// K</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x40</span> &#125;, <span class="comment">// L</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x7F</span> &#125;, <span class="comment">// M</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x7F</span> &#125;, <span class="comment">// N</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x3E</span>, <span class="number">0x41</span>, <span class="number">0x41</span>, <span class="number">0x41</span>, <span class="number">0x3E</span> &#125;, <span class="comment">// O</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0x09</span>, <span class="number">0x09</span>, <span class="number">0x09</span>, <span class="number">0x06</span> &#125;, <span class="comment">// P</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x3E</span>, <span class="number">0x41</span>, <span class="number">0x51</span>, <span class="number">0x21</span>, <span class="number">0x5E</span> &#125;, <span class="comment">// Q</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0x09</span>, <span class="number">0x19</span>, <span class="number">0x29</span>, <span class="number">0x46</span> &#125;, <span class="comment">// R</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x49</span>, <span class="number">0x49</span>, <span class="number">0x49</span>, <span class="number">0x31</span> &#125;, <span class="comment">// S</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x7F</span>, <span class="number">0x01</span>, <span class="number">0x01</span> &#125;, <span class="comment">// T</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x3F</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x3F</span> &#125;, <span class="comment">// U</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x1F</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x20</span>, <span class="number">0x1F</span> &#125;, <span class="comment">// V</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x3F</span>, <span class="number">0x40</span>, <span class="number">0x38</span>, <span class="number">0x40</span>, <span class="number">0x3F</span> &#125;, <span class="comment">// W</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x63</span>, <span class="number">0x14</span>, <span class="number">0x08</span>, <span class="number">0x14</span>, <span class="number">0x63</span> &#125;, <span class="comment">// X</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x70</span>, <span class="number">0x08</span>, <span class="number">0x07</span> &#125;, <span class="comment">// Y</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x61</span>, <span class="number">0x51</span>, <span class="number">0x49</span>, <span class="number">0x45</span>, <span class="number">0x43</span> &#125;, <span class="comment">// Z</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0x41</span>, <span class="number">0x41</span>, <span class="number">0x00</span> &#125;, <span class="comment">// [</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x55</span>, <span class="number">0x2A</span>, <span class="number">0x55</span>, <span class="number">0x2A</span>, <span class="number">0x55</span> &#125;, <span class="comment">// 55</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x41</span>, <span class="number">0x7F</span>, <span class="number">0x00</span> &#125;, <span class="comment">// ]</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span> &#125;, <span class="comment">// ^</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x40</span> &#125;, <span class="comment">// _</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x00</span> &#125;, <span class="comment">// &#x27;</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x54</span>, <span class="number">0x54</span>, <span class="number">0x54</span>, <span class="number">0x78</span> &#125;, <span class="comment">// a</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0x48</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x38</span> &#125;, <span class="comment">// b</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x38</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x20</span> &#125;, <span class="comment">// c</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x38</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x48</span>, <span class="number">0x7F</span> &#125;, <span class="comment">// d</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x38</span>, <span class="number">0x54</span>, <span class="number">0x54</span>, <span class="number">0x54</span>, <span class="number">0x18</span> &#125;, <span class="comment">// e</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x7E</span>, <span class="number">0x09</span>, <span class="number">0x01</span>, <span class="number">0x02</span> &#125;, <span class="comment">// f</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x18</span>, <span class="number">0xA4</span>, <span class="number">0xA4</span>, <span class="number">0xA4</span>, <span class="number">0x7C</span> &#125;, <span class="comment">// g</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0x08</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x78</span> &#125;, <span class="comment">// h</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x44</span>, <span class="number">0x7D</span>, <span class="number">0x40</span>, <span class="number">0x00</span> &#125;, <span class="comment">// i</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x84</span>, <span class="number">0x7D</span>, <span class="number">0x00</span> &#125;, <span class="comment">// j</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0x10</span>, <span class="number">0x28</span>, <span class="number">0x44</span>, <span class="number">0x00</span> &#125;, <span class="comment">// k</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x7F</span>, <span class="number">0x40</span>, <span class="number">0x00</span> &#125;, <span class="comment">// l</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x7C</span>, <span class="number">0x04</span>, <span class="number">0x18</span>, <span class="number">0x04</span>, <span class="number">0x78</span> &#125;, <span class="comment">// m</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x7C</span>, <span class="number">0x08</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x78</span> &#125;, <span class="comment">// n</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x38</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x44</span>, <span class="number">0x38</span> &#125;, <span class="comment">// o</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0xFC</span>, <span class="number">0x24</span>, <span class="number">0x24</span>, <span class="number">0x24</span>, <span class="number">0x18</span> &#125;, <span class="comment">// p</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x18</span>, <span class="number">0x24</span>, <span class="number">0x24</span>, <span class="number">0x18</span>, <span class="number">0xFC</span> &#125;, <span class="comment">// q</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x7C</span>, <span class="number">0x08</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x08</span> &#125;, <span class="comment">// r</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0x54</span>, <span class="number">0x54</span>, <span class="number">0x54</span>, <span class="number">0x20</span> &#125;, <span class="comment">// s</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x3F</span>, <span class="number">0x44</span>, <span class="number">0x40</span>, <span class="number">0x20</span> &#125;, <span class="comment">// t</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x3C</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x20</span>, <span class="number">0x7C</span> &#125;, <span class="comment">// u</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x1C</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x20</span>, <span class="number">0x1C</span> &#125;, <span class="comment">// v</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x3C</span>, <span class="number">0x40</span>, <span class="number">0x30</span>, <span class="number">0x40</span>, <span class="number">0x3C</span> &#125;, <span class="comment">// w</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x44</span>, <span class="number">0x28</span>, <span class="number">0x10</span>, <span class="number">0x28</span>, <span class="number">0x44</span> &#125;, <span class="comment">// x</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x1C</span>, <span class="number">0xA0</span>, <span class="number">0xA0</span>, <span class="number">0xA0</span>, <span class="number">0x7C</span> &#125;, <span class="comment">// y</span></span><br><span class="line">    &#123; <span class="number">0x00</span>, <span class="number">0x44</span>, <span class="number">0x64</span>, <span class="number">0x54</span>, <span class="number">0x4C</span>, <span class="number">0x44</span> &#125;, <span class="comment">// z</span></span><br><span class="line">    &#123; <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x14</span> &#125;, <span class="comment">// horiz lines</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/****************************************8*16的点阵************************************/</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> g_f8X16[] = &#123;</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// 0</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x33</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// ! 1</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x0C</span>, <span class="number">0x06</span>, <span class="number">0x10</span>, <span class="number">0x0C</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// &quot; 2</span></span><br><span class="line">    <span class="number">0x40</span>, <span class="number">0xC0</span>, <span class="number">0x78</span>, <span class="number">0x40</span>, <span class="number">0xC0</span>, <span class="number">0x78</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x3F</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x3F</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="comment">// # 3</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x88</span>, <span class="number">0xFC</span>, <span class="number">0x08</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x18</span>, <span class="number">0x20</span>, <span class="number">0xFF</span>, <span class="number">0x21</span>, <span class="number">0x1E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// $ 4</span></span><br><span class="line">    <span class="number">0xF0</span>, <span class="number">0x08</span>, <span class="number">0xF0</span>, <span class="number">0x00</span>, <span class="number">0xE0</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x21</span>, <span class="number">0x1C</span>, <span class="number">0x03</span>, <span class="number">0x1E</span>, <span class="number">0x21</span>, <span class="number">0x1E</span>, <span class="number">0x00</span>, <span class="comment">// % 5</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF0</span>, <span class="number">0x08</span>, <span class="number">0x88</span>, <span class="number">0x70</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1E</span>, <span class="number">0x21</span>, <span class="number">0x23</span>, <span class="number">0x24</span>, <span class="number">0x19</span>, <span class="number">0x27</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="comment">// &amp; 6</span></span><br><span class="line">    <span class="number">0x10</span>, <span class="number">0x16</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// &#x27; 7</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xE0</span>, <span class="number">0x18</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x18</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="comment">// ( 8</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x18</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x20</span>, <span class="number">0x18</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// ) 9</span></span><br><span class="line">    <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0xF0</span>, <span class="number">0x80</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x0F</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="comment">// * 10</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x1F</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="comment">// + 11</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0xB0</span>, <span class="number">0x70</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// , 12</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="comment">// - 13</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x30</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// . 14</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x60</span>, <span class="number">0x18</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x60</span>, <span class="number">0x18</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// / 15</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xE0</span>, <span class="number">0x10</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x10</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="comment">// 0 16</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x10</span>, <span class="number">0xF8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// 1 17</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x88</span>, <span class="number">0x70</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x30</span>, <span class="number">0x28</span>, <span class="number">0x24</span>, <span class="number">0x22</span>, <span class="number">0x21</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="comment">// 2 18</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x30</span>, <span class="number">0x08</span>, <span class="number">0x88</span>, <span class="number">0x88</span>, <span class="number">0x48</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x18</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x11</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="comment">// 3 19</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC0</span>, <span class="number">0x20</span>, <span class="number">0x10</span>, <span class="number">0xF8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x04</span>, <span class="number">0x24</span>, <span class="number">0x24</span>, <span class="number">0x3F</span>, <span class="number">0x24</span>, <span class="number">0x00</span>, <span class="comment">// 4 20</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0x08</span>, <span class="number">0x88</span>, <span class="number">0x88</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x19</span>, <span class="number">0x21</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x11</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="comment">// 5 21</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xE0</span>, <span class="number">0x10</span>, <span class="number">0x88</span>, <span class="number">0x88</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x11</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x11</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="comment">// 6 22</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x38</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0xC8</span>, <span class="number">0x38</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// 7 23</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x88</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x88</span>, <span class="number">0x70</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1C</span>, <span class="number">0x22</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x22</span>, <span class="number">0x1C</span>, <span class="number">0x00</span>, <span class="comment">// 8 24</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xE0</span>, <span class="number">0x10</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x31</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x11</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="comment">// 9 25</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x30</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// : 26</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x60</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// ;号 27</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x40</span>, <span class="number">0x20</span>, <span class="number">0x10</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="comment">// &lt; 28</span></span><br><span class="line">    <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="comment">// = 29</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x10</span>, <span class="number">0x08</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="comment">// &gt; 30</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0xF0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// ? 31</span></span><br><span class="line">    <span class="number">0xC0</span>, <span class="number">0x30</span>, <span class="number">0xC8</span>, <span class="number">0x28</span>, <span class="number">0xE8</span>, <span class="number">0x10</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x18</span>, <span class="number">0x27</span>, <span class="number">0x24</span>, <span class="number">0x23</span>, <span class="number">0x14</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="comment">// @ 32</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC0</span>, <span class="number">0x38</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x3C</span>, <span class="number">0x23</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x27</span>, <span class="number">0x38</span>, <span class="number">0x20</span>, <span class="comment">// A 33</span></span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x88</span>, <span class="number">0x88</span>, <span class="number">0x88</span>, <span class="number">0x70</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x11</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="comment">// B 34</span></span><br><span class="line">    <span class="number">0xC0</span>, <span class="number">0x30</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x38</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x18</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x10</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="comment">// C 35</span></span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x10</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="comment">// D 36</span></span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x88</span>, <span class="number">0x88</span>, <span class="number">0xE8</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x23</span>, <span class="number">0x20</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="comment">// E 37</span></span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x88</span>, <span class="number">0x88</span>, <span class="number">0xE8</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// F 38</span></span><br><span class="line">    <span class="number">0xC0</span>, <span class="number">0x30</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x38</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x18</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x22</span>, <span class="number">0x1E</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="comment">// G 39</span></span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x08</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="comment">// H 40</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// I 41</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x7F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// J 42</span></span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x88</span>, <span class="number">0xC0</span>, <span class="number">0x28</span>, <span class="number">0x18</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="number">0x01</span>, <span class="number">0x26</span>, <span class="number">0x38</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="comment">// K 43</span></span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="comment">// L 44</span></span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0xF8</span>, <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF8</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x00</span>, <span class="number">0x3F</span>, <span class="number">0x00</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="comment">// M 45</span></span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x30</span>, <span class="number">0xC0</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x08</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x18</span>, <span class="number">0x3F</span>, <span class="number">0x00</span>, <span class="comment">// N 46</span></span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x10</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x10</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="comment">// O 47</span></span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0xF0</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// P 48</span></span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x10</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0xE0</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x18</span>, <span class="number">0x24</span>, <span class="number">0x24</span>, <span class="number">0x38</span>, <span class="number">0x50</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="comment">// Q 49</span></span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x88</span>, <span class="number">0x88</span>, <span class="number">0x88</span>, <span class="number">0x88</span>, <span class="number">0x70</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x0C</span>, <span class="number">0x30</span>, <span class="number">0x20</span>, <span class="comment">// R 50</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x88</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x38</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x38</span>, <span class="number">0x20</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x22</span>, <span class="number">0x1C</span>, <span class="number">0x00</span>, <span class="comment">// S 51</span></span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// T 52</span></span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x1F</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x1F</span>, <span class="number">0x00</span>, <span class="comment">// U 53</span></span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x78</span>, <span class="number">0x88</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC8</span>, <span class="number">0x38</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x38</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// V 54</span></span><br><span class="line">    <span class="number">0xF8</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x3C</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x3C</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="comment">// W 55</span></span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x18</span>, <span class="number">0x68</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x68</span>, <span class="number">0x18</span>, <span class="number">0x08</span>, <span class="number">0x20</span>, <span class="number">0x30</span>, <span class="number">0x2C</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x2C</span>, <span class="number">0x30</span>, <span class="number">0x20</span>, <span class="comment">// X 56</span></span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x38</span>, <span class="number">0xC8</span>, <span class="number">0x00</span>, <span class="number">0xC8</span>, <span class="number">0x38</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// Y 57</span></span><br><span class="line">    <span class="number">0x10</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0xC8</span>, <span class="number">0x38</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x38</span>, <span class="number">0x26</span>, <span class="number">0x21</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="comment">// Z 58</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFE</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="comment">// [ 59</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x30</span>, <span class="number">0xC0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x06</span>, <span class="number">0x38</span>, <span class="number">0xC0</span>, <span class="number">0x00</span>, <span class="comment">// \ 60</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0xFE</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x7F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// ] 61</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// ^ 62</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="comment">// _ 63</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// ` 64</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x19</span>, <span class="number">0x24</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="comment">// a 65</span></span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3F</span>, <span class="number">0x11</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x11</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="comment">// b 66</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x11</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="comment">// c 67</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x88</span>, <span class="number">0xF8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x11</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x10</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="comment">// d 68</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1F</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="comment">// e 69</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0xF0</span>, <span class="number">0x88</span>, <span class="number">0x88</span>, <span class="number">0x88</span>, <span class="number">0x18</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// f 70</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6B</span>, <span class="number">0x94</span>, <span class="number">0x94</span>, <span class="number">0x94</span>, <span class="number">0x93</span>, <span class="number">0x60</span>, <span class="number">0x00</span>, <span class="comment">// g 71</span></span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x21</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="comment">// h 72</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x98</span>, <span class="number">0x98</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// i 73</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x98</span>, <span class="number">0x98</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC0</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x7F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// j 74</span></span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x24</span>, <span class="number">0x02</span>, <span class="number">0x2D</span>, <span class="number">0x30</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="comment">// k 75</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0xF8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// l 76</span></span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x3F</span>, <span class="comment">// m 77</span></span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x21</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="comment">// n 78</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1F</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x1F</span>, <span class="number">0x00</span>, <span class="comment">// o 79</span></span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0xFF</span>, <span class="number">0xA1</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x11</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="comment">// p 80</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x11</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0xA0</span>, <span class="number">0xFF</span>, <span class="number">0x80</span>, <span class="comment">// q 81</span></span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x3F</span>, <span class="number">0x21</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="comment">// r 82</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x33</span>, <span class="number">0x24</span>, <span class="number">0x24</span>, <span class="number">0x24</span>, <span class="number">0x24</span>, <span class="number">0x19</span>, <span class="number">0x00</span>, <span class="comment">// s 83</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0xE0</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1F</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// t 84</span></span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1F</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x20</span>, <span class="number">0x10</span>, <span class="number">0x3F</span>, <span class="number">0x20</span>, <span class="comment">// u 85</span></span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x0E</span>, <span class="number">0x30</span>, <span class="number">0x08</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="comment">// v 86</span></span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x0F</span>, <span class="number">0x30</span>, <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x0C</span>, <span class="number">0x30</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="comment">// w 87</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x31</span>, <span class="number">0x2E</span>, <span class="number">0x0E</span>, <span class="number">0x31</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="comment">// x 88</span></span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x81</span>, <span class="number">0x8E</span>, <span class="number">0x70</span>, <span class="number">0x18</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="comment">// y 89</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x21</span>, <span class="number">0x30</span>, <span class="number">0x2C</span>, <span class="number">0x22</span>, <span class="number">0x21</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="comment">// z 90</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x7C</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3F</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="comment">// &#123; 91</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// | 92</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x7C</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x40</span>, <span class="number">0x3F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// &#125; 93</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="comment">// ~ 94</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-5"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> OLED_SSD1306_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_SSD1306_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief ssd1306 OLED Initialize.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">OledInit</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Set cursor position</span></span><br><span class="line"><span class="comment"> * @param x the horizontal posistion of cursor</span></span><br><span class="line"><span class="comment"> * @param y the vertical position of cursor</span></span><br><span class="line"><span class="comment"> * @return Returns &#123;@link WIFI_IOT_SUCCESS&#125; if the operation is successful;</span></span><br><span class="line"><span class="comment"> * returns an error code defined in &#123;@link wifiiot_errno.h&#125; otherwise.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OledSetPosition</span><span class="params">(<span class="type">uint8_t</span> x, <span class="type">uint8_t</span> y)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">OledFillScreen</span><span class="params">(<span class="type">uint8_t</span> fillData)</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Font</span> &#123;</span></span><br><span class="line">    FONT6_X8 = <span class="number">1</span>,</span><br><span class="line">    FONT8_X16</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> <span class="title">Font</span> <span class="title">Font</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">OledShowChar</span><span class="params">(<span class="type">uint8_t</span> x, <span class="type">uint8_t</span> y, <span class="type">uint8_t</span> ch, Font font)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OledShowString</span><span class="params">(<span class="type">uint8_t</span> x, <span class="type">uint8_t</span> y, <span class="type">const</span> <span class="type">char</span>* str, Font font)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// OLED_SSD1306_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h1 id="Hi3516DV300板子开发">Hi3516DV300板子开发</h1><div class="note blue icon modern"><p>由于篇幅问题，点击<a href="https://asa-world.cn/36f24770/">这里</a>阅读分类网模型的训练。</p></div>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器视觉 </tag>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用SDN网络架构的dijkstra算法实践</title>
      <link href="/39935ec6/"/>
      <url>/39935ec6/</url>
      
        <content type="html"><![CDATA[<h1 id="项目要求-4">项目要求</h1><ol><li>使用 Dijkstra 算法（dial 实现）计算任意两点间的最短路；</li><li>使用最短路由配置任意两点间的通信业务；</li><li>将所有业务在可视化平台上进行展示。</li></ol><h1 id="Dijkstra-算法原理">Dijkstra 算法原理</h1><h2 id="基本思想-4">基本思想</h2><p>Dijkstra 算法使用了广度优先搜索解决赋权有向图或者无向图的单源最短路径问题，采用的是一种贪心的策略，构造一个循环，每次循环都增加一个顶点到最短路径树上，所选择的顶点即为在所有与树邻接的顶点中和源点最近的顶点， 其中就隐含了广度优先搜索的思想，逐步地发展最短路径树，直到它覆盖所有顶点。其中，记录每一个顶点的前继节点可以实现最短路的重建，对距离的更新可以保证现有路径为当前最优解。</p><h2 id="基本步骤-3">基本步骤</h2><ol><li>初始化：使用 d(i)来表示顶点 i 的距离标记，初始化为无穷大；使用 p(i)来表示顶点 i 在最短路径树上的前继点，初始化为 null；使用 S 表示最短路径树上的顶点集合，初始化时加入源点 s，同时将 s 点的距离标记初始化为 0， 前继点为 null</li><li>对 s 点做更新，更新操作为：对需要更新的点 i 的所有邻接点，如果 i 点到源点的距离和 i 点到邻接点的权重之和小于邻接点到源点的的距离，由贪心算法求局部最优解的要求，将该邻接点到源点的距离标记更新为 i 点到源点的距离和 i 点到邻接点的权重之和，此时邻接点的前继点为 i。</li><li>循环扩张最小路径树，直到所有顶点都在该树上，循环内的操作为： 找出已经永久标记的顶点集合和未被标记的顶点集合之间的权重最小割边，将该割边上未被探索的顶点加入已被标记的顶点集合，同时更新对该顶点做更新，更新操作如（2）。</li><li>以上方法为单源多宿最短路的求解，若要求解单源单宿最短路，可以增加一个判断模块，当宿点被永久标记时终止循环。永久标记条件：当一点的所 有入度的另一端都已经被永久标记时，该点即可被永久标记。</li></ol><h2 id="示例-3">示例</h2><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103223348508.png" alt="示例拓扑图"></p><p>上图是一个无向有权图，若源点为 a，最小路径树的生成过程为：</p><ol><li>a-&gt;b:0+1&lt; ∞ ; a −&gt; c: 0 + 6 &lt; ∞. 所以 d[b] = 1, d[c] = 6，前继点为 a,进入 while 循环，选择最小割边，将 b 加入最小路径树，更新 b；</li><li>对 b 的邻接点做更新，1+2 &lt; d[d] ，1+5 &lt; d[e] ，所以d[d]  = d[b] + w[b,d] = 3，d[e] = d[b] +w[b,e] = 6 ，将 d,e 的前继点设为 b，进入下一次循环，选择最小割边， 将 d 加入最小路径树，更新 d；</li><li>一直进行如上的循环，直到所有顶点都在最短路径树上。</li></ol><h1 id="算法实现-2">算法实现</h1><h2 id="引进新的数据结构——桶">引进新的数据结构——桶</h2><h3 id="特殊之处">特殊之处</h3><p>根据距离值的最大值留出足够数量的桶，桶的标记即为距离值，根据顶点的距离标记将顶点加入不同的桶中，执行 FindMin 操作时直接从 标记最小的桶读起，节约了比较的时间。同时，距离标记更新后要将顶点转移到 新的桶里面，</p><h3 id="桶的数量">桶的数量</h3><p>令 C 表示边权的最大值，则距离的最大值为 nC，同时还有 一个距离为无穷大的桶，所以总共需要 nC+1 个桶。</p><h3 id="缺陷">缺陷</h3><p>nC 数量级的桶太消耗空间了，有大量的桶一直闲置。</p><h3 id="改进：循环桶">改进：循环桶</h3><p>由于边界点的距离标记不会超过 d[i]+C（i 为当前标记点，C 为权重最大值）， 对顶点 x 的标号为 d[x]mod(C+1)，最多需要 C+1 个桶。</p><p>对于同一个桶里面的实际上距离标记不相同的点不必做额外处理，因为第一次永久标记的节点距离标记肯定是最短的，该永久标记点的邻接点不可能在同一个桶中（边权重值最大为 C，桶的编号为距离标记对 C+1 取余后的值），除非两个邻接点和该点之间的边权值相同，即使如此，选其中的任意一个也没有问题。 考虑是否标记邻接点时只需要判断邻接点是否已经被永久标记，是则不再标记， 否则永久标记。</p><p>每永久标记一次，桶的头部都要往后一个桶移动，并且保证改变桶的头部之 前先把头部桶里面的所有节点清除出桶，然后永久标记。</p><h2 id="实现方式比较-2">实现方式比较</h2><h3 id="数组（队列）实现">数组（队列）实现</h3><p>此方法为最通用的算法实现方法，也是对读者来说最容易理解的一种实现方法。核心思想为用一个数据结构来维护所有的边界点，相当于所有边界边被分成不同的小集合，与同一个边界点相关联的那些边只记录一个最小值。相比与直接简单粗暴地每次都搜索所有边再筛选后进行更新距离的 Dijkstra 的最直接实现算法，此算法的运行时间从 O(nm) 优化到了 O(n*n+m)。</p><h3 id="堆实现">堆实现</h3><p>此方法逻辑上和 1 类似，只是用堆来维护 V-X 集合。堆本身可以利用 Python 中的 heapq 模块较为简单地实现各种操作，如存储时就给元素进行排序，在调用弹出元素时会自行选择最大或最小的元素进行弹出。距离值更新后要将元素先从堆中删除，再插入。这减少了算法中的代码编写和算法的复杂度。此方法下总 RT 为 O(mlogn)。</p><h3 id="桶实现">桶实现</h3><p>此方法逻辑上和 1 类似，只是用桶来维护 V-X 集合。对普通桶，令 C 表示边权的最大值，则桶的数目上限为 nC+1。此时 RT 为 O(m+nC)。循环桶则是减小了桶的用量，但是 RT 不变。因为每个桶被检查的数目依旧会增大。从多次实验的结果来看，此方法在 RT 上实际上优于方法2。</p><p>最终，我们选择使用循环桶来实现 Dijkstra 算法。</p><h2 id="循环桶实现-dijkstra-算法">循环桶实现 dijkstra 算法</h2><h3 id="步骤">步骤</h3><ol><li>初始化桶，把源节点加入到桶中。</li><li>弹出最小距离标记节点。</li><li>将最小距离标记节点永久标记。</li><li>将永久标记节点的所有邻接节点入桶。</li><li>重复 bcd 操作，直到所有桶空，算法结束。</li></ol><h3 id="示例-4">示例</h3><p>上图为一个有向有权图。若源点为 1 号点，则最短路径树的生成过程为</p><ol><li>首先初始化循环桶，由于最大边权重为 15，所以 C 为 15。将点 1 放入桶内， 因为此时将点 1 的距离设为了 0，因此放入桶头（初始化时设置桶头为第一个桶），如图 2.5 所示。</li></ol><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103223410578.png" alt="桶状态示意图"></p><ol start="2"><li>进入循环，弹出最小距离标记节点。此时先从桶头开始搜索，按顺序寻找第 一个不为空的桶。在此范例中顺序为顺时针。找到该桶后开始弹出此桶内的元素。 在此范例中弹出的元素是 1 号；</li><li>之后开始检索，首先判断 1 号是否已经被永久标记，判断结果为 1 号未被永 久标记，则此时将 1 号永久标记。标记的同时永久记录此时的记录值，不再更改。</li><li>标记后搜索与 1 号相连的节点，将相应节点按照此时对应的距离对 16 取余后 的结果加入桶中。在本例中，加入 2 号（入 1 桶），再加入 3 号（入 12 桶）。如图 2.6 所示；</li><li>此时一轮循环已经结束，开始进行下一轮循环。桶头开始按顺时针方向移动， 直到找到下一个非空桶。在本例中它会发现 1 桶。开始清空此时的 1 桶。如图 2.7 所示；</li><li>2 号点被弹出，判断后进行永久标记并开始搜索和 2 号点相连的点。只要点未被永久标记，就按照 d 中规则将它们按照对应的距离值入相应的桶。需要注意的是，此时桶内会有两个 3 号点，因为它的距离值被更新过。但由于优先被弹出并且标记的 3 号点对应的距离一定更小，所以这种加入方式等效于让 3 号点移动到了能更快被弹出的桶内。见图 2.8；</li><li>重复上述过程，直到整个桶内无空桶，理论上整个图就完成了遍历，按照永久标记时记录的距离值可生成最小生成树。</li></ol><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103223542219.png" alt="桶状态示意图"></p><h2 id="代码实现-4">代码实现</h2><h3 id="dijkstra-算法的实现">dijkstra 算法的实现</h3><p>（1）初始化，将距离标记置为 99999，前继节点为空，源主机的距离标记赋为 0 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dijkstra</span>(<span class="params">self,src_dpid,dst_dpid,src_port,dst_port</span>): <span class="number">2.</span> c = <span class="number">29</span></span><br><span class="line">    adjacent = self.get_adjacent(self.links)</span><br><span class="line">    buckets = BucketSet(c+<span class="number">1</span>)</span><br><span class="line">    node_s = (<span class="number">0</span>,src_dpid)</span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> self.switches: </span><br><span class="line">        d[u] = <span class="number">99999</span></span><br><span class="line">    d[src_dpid] = <span class="number">0</span></span><br><span class="line">    pre = &#123;&#125;</span><br></pre></td></tr></table></figure><p>（2）用循环桶来维护未标记点的集合，其中循环桶是自定义的一个类，需在前面中引用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> BucketSet <span class="keyword">import</span> BucketSet</span><br></pre></td></tr></table></figure><p>实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">buckets.add_thing(node_s)</span><br><span class="line">flag = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> buckets.SetEmpty() <span class="keyword">and</span> flag == <span class="number">1</span>: </span><br><span class="line">    min_list = buckets.pop_min() <span class="comment">#将桶中距离标记最小的点加入最短路径列表，实际上就是将已标记集合和未标记集合之间的最短割边加入最短路径树，此时还未永久标记，即 find_min 操作</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> <span class="built_in">len</span>(min_list) == <span class="number">0</span>: </span><br><span class="line">            min_node = min_list.pop() <span class="comment">#取出该点，与目的主机的进行比对，如果已经探测到目的主机，则跳出循环</span></span><br><span class="line">            <span class="keyword">if</span>(min_node[<span class="number">1</span>] == dst_dpid): </span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">                <span class="keyword">break</span> </span><br><span class="line">            <span class="keyword">for</span> u <span class="keyword">in</span> self.switches: <span class="comment">#取该点的邻接点，进行距离标记的更新，如果该点的下一点的距离标记比该点的距离标记和两点之间权值之和大，则将该点设为下一点的前继节点，将该点的距离标记和两点之间权值之和设为新的距离标记，即 update 操作</span></span><br><span class="line">                <span class="keyword">if</span>(u <span class="keyword">in</span> adjacent[min_node[<span class="number">1</span>]]):</span><br><span class="line">                    <span class="keyword">for</span> link <span class="keyword">in</span> self.links: </span><br><span class="line">                        <span class="keyword">if</span> (link[<span class="string">&#x27;src_dpid&#x27;</span>] == min_node[<span class="number">1</span>]) <span class="keyword">and</span> (link[<span class="string">&#x27;dst_dpid&#x27;</span>]== u): <span class="comment">#如果要寻找的最短路之间仅有一条边，这条边的权重即为最短路的权重</span></span><br><span class="line">                            delay = link[<span class="string">&#x27;delay&#x27;</span>]</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span>(d[min_node[<span class="number">1</span>]]+delay &lt; d[u]): <span class="comment">#update 操作，权值更新</span></span><br><span class="line">                        pre[u] = min_node[<span class="number">1</span>] <span class="comment">#前继节点更新</span></span><br><span class="line">                        d[u] = d[min_node[<span class="number">1</span>]] + delay <span class="comment">#距离标记更新</span></span><br><span class="line">                        buckets.add_thing((d[u],u)) <span class="comment">#将 u 点的邻接点加入桶中</span></span><br></pre></td></tr></table></figure><p>（3）重建最短路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getpath = []</span><br><span class="line">s = dst_dpid</span><br><span class="line"><span class="keyword">while</span> s != src_dpid: <span class="comment">#从目的主机到源主机，将最短路径上的点加入 getpath 列表</span></span><br><span class="line">    getpath.append(s)</span><br><span class="line">    s = pre[s]</span><br><span class="line">    getpath.append(src_dpid)</span><br><span class="line">    getpath.reverse()<span class="comment">#由于上面的操作存储的最短路径是反向的，需要使用 reverse 函数将列表中的序列进行反向</span></span><br><span class="line"></span><br><span class="line">    self.minpath = getpath<span class="comment">#得到最终的最短路</span></span><br></pre></td></tr></table></figure><p>（4）提供 ryu 配置最短路所需的端口信息，使流表的下发能够一步到位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ryu_path = []</span><br><span class="line">in_port = src_port<span class="comment">#从源主机到与它相连的交换机的端口号</span></span><br><span class="line"><span class="keyword">for</span> s1,s2 <span class="keyword">in</span> <span class="built_in">zip</span>(getpath[:-<span class="number">1</span>],getpath[<span class="number">1</span>:]):<span class="comment">#分别获得从源交换机到主机的路径上的各个出端口和各个入端口</span></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> self.links: </span><br><span class="line">        <span class="keyword">if</span> (link[<span class="string">&#x27;src_dpid&#x27;</span>] == s1) <span class="keyword">and</span> (link[<span class="string">&#x27;dst_dpid&#x27;</span>] == s2):</span><br><span class="line">            out_port = link[<span class="string">&#x27;src_port_no&#x27;</span>]</span><br><span class="line">            ryu_path.append((s1,in_port,out_port))</span><br><span class="line">            in_port = link[<span class="string">&#x27;dst_port_no&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> s2 == dst_dpid: </span><br><span class="line">                ryu_path.append((s2,in_port,dst_port))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="keyword">return</span> ryu_path</span><br></pre></td></tr></table></figure><p>（5）求最短路径上的时延</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_delay</span>(<span class="params">self,path,links</span>): </span><br><span class="line">    delay = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(path)-<span class="number">1</span>): </span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> links: </span><br><span class="line">            <span class="keyword">if</span> (link[<span class="string">&#x27;src_dpid&#x27;</span>] == path[j]) <span class="keyword">and</span> (link[<span class="string">&#x27;dst_dpid&#x27;</span>] == path[j+<span class="number">1</span>]): </span><br><span class="line">                delay += link[<span class="string">&#x27;delay&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> delay</span><br></pre></td></tr></table></figure><p>（6）获取邻接点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_adjacent</span>(<span class="params">self,links</span>): </span><br><span class="line">    adjacent = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> switch <span class="keyword">in</span> self.switches:</span><br><span class="line">        adjacent.setdefault(switch,[]) <span class="comment">#邻接点列表初始化 </span></span><br><span class="line">    <span class="keyword">for</span> switch <span class="keyword">in</span> self.switches: </span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">            <span class="keyword">if</span> link[<span class="string">&#x27;src_dpid&#x27;</span>] == switch:</span><br><span class="line">                adjacent[switch].append(link[<span class="string">&#x27;dst_dpid&#x27;</span>]) <span class="comment">#以交换机作为 key，以邻接交换机作为 value </span></span><br><span class="line">    <span class="keyword">return</span> adjacent</span><br></pre></td></tr></table></figure><h3 id="桶类的实现">桶类的实现</h3><p>（1）首先创建循环桶类，并对一些基础变量进行初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BucketSet</span>(<span class="title class_ inherited__">object</span>): </span><br><span class="line">    header_loc = <span class="number">0</span> <span class="comment">#初始化桶头指针</span></span><br><span class="line">    things_number = <span class="number">0</span> <span class="comment">#初始化循环桶中节点的数目</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）定义用于初始化的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,buc_num</span>): </span><br><span class="line">    self.bucket_num = buc_num <span class="comment">#初始化小桶数目</span></span><br><span class="line">    self.buckets = [<span class="literal">None</span>]*buc_num <span class="comment">#初始化循环桶整体，它由指定数目的小桶组成</span></span><br><span class="line">    self.init_buckets(buc_num)</span><br><span class="line">    self.header = self.buckets[<span class="number">0</span>] <span class="comment">#初始化头桶</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_buckets</span>(<span class="params">self,bucket_num</span>):<span class="comment"># 利用小桶类的初始化函树进行初始化</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bucket_num): </span><br><span class="line">        self.buckets[i] = BucketSet.Bucket(i)</span><br></pre></td></tr></table></figure><p>（3）定义用于使头桶指针后移的函数。因为每次对桶的元素取出都是针对头桶， 所以在头桶空后需要调用此函数实现对后续桶的搜索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">move_header</span>(<span class="params">self</span>):<span class="comment"># 头桶指针后移一位</span></span><br><span class="line">    self.header_loc = ((self.header_loc + <span class="number">1</span> )% self.bucket_num)<span class="comment"># 因为是循环桶所以需要用取余操作保证尾部和头部的衔接</span></span><br><span class="line">    self.header = self.buckets[self.header_loc]</span><br></pre></td></tr></table></figure><p>（4）定义用于计算入桶的节点应该去哪个桶的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Length_cal</span>(<span class="params">self,length</span>): </span><br><span class="line">    <span class="keyword">return</span> (length % self.bucket_num) <span class="comment">#因为是循环桶所以需要用取余保证所得数字的正确</span></span><br></pre></td></tr></table></figure><p>（5）定义用于处理节点加入桶的函数，作为和外部的关键接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_thing</span>(<span class="params">self,thing</span>): </span><br><span class="line">    length = thing[<span class="number">0</span>] <span class="comment">#输入此函数的节点数据中，第一项为它到 src 的距离</span></span><br><span class="line">    <span class="built_in">id</span> = self.Length_cal(length) <span class="comment">#计算该节点该去哪个桶</span></span><br><span class="line">    self.buckets[<span class="built_in">id</span>].add_thing(thing) <span class="comment">#把节点加入对应的桶</span></span><br><span class="line">    self.things_number += <span class="number">1</span> <span class="comment">#节点数加一</span></span><br></pre></td></tr></table></figure><p>（6）定义判断函数，用于判断整个循环桶是否全空，也就是确定整个 Dijkstra 算法何时结束</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">SetEmpty</span>(<span class="params">self</span>): </span><br><span class="line">    <span class="keyword">return</span> self.things_number == <span class="number">0</span></span><br></pre></td></tr></table></figure><p>（7）定义用于弹出桶中需要被永久标记的最短距离点的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pop_min</span>(<span class="params">self</span>): </span><br><span class="line">    <span class="keyword">while</span> self.header.is_empty(): <span class="comment">#寻找非空桶</span></span><br><span class="line">        self.move_header()</span><br><span class="line">        min_lists = self.header.pop_out() <span class="comment">#将头桶内节点弹出</span></span><br><span class="line">        self.things_number = self.things_number - <span class="built_in">len</span>(min_lists) <span class="comment">#节点数减少</span></span><br><span class="line">    <span class="keyword">return</span> </span><br></pre></td></tr></table></figure><p>（8）在循环桶类内部定义桶类，即用于组成循环桶的小桶。依旧从初始化函数开始定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bucket</span>(<span class="title class_ inherited__">object</span>): </span><br><span class="line">    things_amount = <span class="number">0</span> <span class="comment">#计数，记录每个小桶内节点数目</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,bucketId</span>): <span class="comment">#初始化小桶，利用 list()，每个桶有对应的编号，从 0 到 C</span></span><br><span class="line">        self.bucket = <span class="built_in">list</span>()</span><br><span class="line">        self.<span class="built_in">id</span> = bucketId</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（9）定义往小桶内加入节点的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_thing</span>(<span class="params">self,thing</span>): </span><br><span class="line">    self.bucket.append(thing) <span class="comment">#加入节点，利用 list()性质</span></span><br><span class="line">    self.things_amount += <span class="number">1</span> <span class="comment">#计数加</span></span><br></pre></td></tr></table></figure><p>（10）定义弹出小桶内节点数据的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pop_out</span>(<span class="params">self</span>):</span><br><span class="line">    things = self.bucket.copy() <span class="comment">#things 记录了桶内现有节点</span></span><br><span class="line">    self.bucket.clear() <span class="comment">#清空桶</span></span><br><span class="line">    self.things_amount = <span class="number">0</span> <span class="comment">#计数清 0</span></span><br><span class="line">    <span class="keyword">return</span> thing</span><br></pre></td></tr></table></figure><p>（11）定义判断小桶是否为空的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>): </span><br><span class="line">    <span class="keyword">return</span> self.things_amount == <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="RYU通信-2">RYU通信</h3><p>（1）初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Kruskaltest</span>(app_manager.RyuApp): </span><br><span class="line">    OFP_VERSIONS=[ofproto_v1_3.OFP_VERSION]<span class="comment">#确定控制器的 openflow 版本</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,*args,**kwargs</span>): </span><br><span class="line">        <span class="built_in">super</span>(Kruskaltest,self).__init__(*args,**kwargs)<span class="comment">#继承自己，方便后面的初始化步骤</span></span><br><span class="line">        self.mac_to_port=&#123;&#125;<span class="comment">#arp 列表初始化</span></span><br><span class="line">        self.topology_api_app=self</span><br><span class="line">        self.sleep_interval = <span class="number">0.5</span><span class="comment">#程序暂停的时间为 0.5 秒，以使 mininet 和 ryu 的拓扑建立保持同步，防止链路丢失</span></span><br><span class="line">        self.switches = []<span class="comment">#交换机列表初始化</span></span><br><span class="line">        self.links = []<span class="comment">#链路信息初始化</span></span><br><span class="line">        self.mst_links = []<span class="comment">#最小生成树上的链路初始化</span></span><br><span class="line">        self.pathes = &#123;&#125;<span class="comment">#路径初始化</span></span><br><span class="line">        self.banport = &#123;&#125;<span class="comment">#被禁止的端口初始化</span></span><br></pre></td></tr></table></figure><p>（2）流表配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@set_ev_cls(<span class="params">ofp_event.EventOFPSwitchFeatures,CONFIG_DISPATCHER</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">switch_features_handler</span>(<span class="params">self,ev</span>): </span><br><span class="line">        datapath=ev.msg.datapath</span><br><span class="line">        ofproto=datapath.ofproto</span><br><span class="line">        ofp_parser=datapath.ofproto_parser</span><br><span class="line">        <span class="keyword">match</span>=ofp_parser.OFPMatch()</span><br><span class="line">        actions=[ofp_parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,ofproto.OFPCML_NO_BUF</span><br><span class="line">FER)]</span><br><span class="line">        self.add_flow(datapath,<span class="number">0</span>,<span class="keyword">match</span>,actions)<span class="comment">#配置缺省流表，match 域为空，对每一个交换机都添加该流表，当交换机无法处理收到的数据包时，执行 actions，把数据包向控制器转发</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_flow</span>(<span class="params">self,datapath,priority,<span class="keyword">match</span>,actions</span>):<span class="comment">#控制器向交换机发流表的方法</span></span><br><span class="line">        ofproto=datapath.ofproto </span><br><span class="line">        ofp_parser=datapath.ofproto_parser</span><br><span class="line">        inst=[ofp_parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,actions)]<span class="comment">#收到后立即执行 actions</span></span><br><span class="line">        <span class="comment">#以上内容为流表信息的获取</span></span><br><span class="line">        mod=ofp_parser.OFPFlowMod(datapath=datapath,priority=priority,<span class="keyword">match</span>=<span class="keyword">match</span>,instructions=inst)<span class="comment">#流表内容定义，第一个为流表从哪一个交换机发送过来，第二个为权重，第三个为匹配域，当收到的数据包和匹配域匹配上时执行 instructions         </span></span><br><span class="line">        datapath.send_msg(mod)<span class="comment">#发送流表</span></span><br></pre></td></tr></table></figure><p>（3）拓扑发现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@set_ev_cls(<span class="params">event.EventSwitchEnter,[CONFIG_DISPATCHER,MAIN_DISPATCHER]</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">switch_enter_handler</span>(<span class="params">self,ev</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;==================================&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;switch entered...&#x27;</span>)</span><br><span class="line">        self.switches,self.links = self.get_topology() <span class="comment">#通过后面的 get_topology 方法来获取交换机和链路信息</span></span><br><span class="line">        self.banport = self.find_banport(self.links[:]) <span class="comment">#找到被禁止的端口，因为洪泛时不能有圈，否则会陷入死循环</span></span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> self.mst_links:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(link[<span class="string">&#x27;src_dpid&#x27;</span>],link[<span class="string">&#x27;dst_dpid&#x27;</span>]))<span class="comment">#打印最小生成树</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;==================================&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        time.sleep(self.sleep_interval) <span class="comment">#ryu 每发现一个交换机之后都要暂停一段时间，让mininetd 建立拓扑的速度能跟上，否则会造成链路丢失</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_topology</span>(<span class="params">self</span>): </span><br><span class="line">        switch_list = get_switch(self.topology_api_app,<span class="literal">None</span>)</span><br><span class="line">        switches = [switch.dp.<span class="built_in">id</span> <span class="keyword">for</span> switch <span class="keyword">in</span> switch_list]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;switches:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(switches)) <span class="comment">#得到并打印交换机列表</span></span><br><span class="line">        <span class="keyword">for</span> switch <span class="keyword">in</span> switches: </span><br><span class="line">            self.banport.setdefault(switch,[]) <span class="comment">#初始化被禁止的端口列表</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;------------------------------------&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;banport first_list is&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.banport))</span><br><span class="line">        link_list = get_link(self.topology_api_app,<span class="literal">None</span>)</span><br><span class="line">        links = [&#123;<span class="string">&#x27;src_dpid&#x27;</span>:link.src.dpid,<span class="string">&#x27;src_port_no&#x27;</span>:link.src.port_no, <span class="number">12.</span> <span class="string">&#x27;dst_dpid&#x27;</span>:link.dst.dpid,<span class="string">&#x27;dst_port_no&#x27;</span>:link.dst.port_no&#125;</span><br><span class="line">                 <span class="keyword">for</span> link <span class="keyword">in</span> link_list]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;the getted link_list is&#123;&#125;&quot;</span>.<span class="built_in">format</span>(links)) <span class="comment">#得到并打印链路信息，其中包含了源交换机的 dpid 和对应的端口号以及目的交换机的 dpid 和对应的端口号</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#file = open(&quot;./topo24.json&quot;,&quot;r&quot;)</span></span><br><span class="line">        file = <span class="built_in">open</span>(<span class="string">&quot;./topo7.json&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="comment">#由于原来的 24 个交换机拓扑太大，故用 7 个交换机来作为测试，读取 topo7.json 里的信息</span></span><br><span class="line">        topoinfo = json.load(file)</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">             <span class="keyword">for</span> edge <span class="keyword">in</span> topoinfo[<span class="string">&#x27;links&#x27;</span>]: </span><br><span class="line">                    <span class="keyword">if</span>([<span class="string">&quot;s&quot;</span>+<span class="built_in">str</span>(link[<span class="string">&quot;src_dpid&quot;</span>]),<span class="string">&quot;s&quot;</span>+<span class="built_in">str</span>(link[<span class="string">&quot;dst_dpid&quot;</span>])] == edge[<span class="string">&quot;vertexs&quot;</span>] <span class="keyword">or</span> [<span class="string">&quot;s&quot;</span>+<span class="built_in">str</span>(link[<span class="string">&quot;dst_dpid&quot;</span>]),<span class="string">&quot;s&quot;</span>+<span class="built_in">str</span>(link[<span class="string">&quot;src_dpid&quot;</span>])] == edge[<span class="string">&quot;vertexs&quot;</span>]):</span><br><span class="line">                        link[<span class="string">&#x27;delay&#x27;</span>] = edge[<span class="string">&#x27;delay&#x27;</span>]</span><br><span class="line">                        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>（4）ryu 配置最短路</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">configure_path</span>(<span class="params">self,path,src,dst,datapath</span>): </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;configure the shortest path&quot;</span>)</span><br><span class="line">    path_print=src</span><br><span class="line">    <span class="keyword">for</span> switch,in_port,out_port <span class="keyword">in</span> path: <span class="comment">#下发流表</span></span><br><span class="line">        ofp_parser=datapath.ofproto_parser </span><br><span class="line">        <span class="keyword">match</span>=ofp_parser.OFPMatch(in_port=in_port,eth_src=src,eth_dst=dst)</span><br><span class="line">        actions=[ofp_parser.OFPActionOutput(out_port)]</span><br><span class="line">        self.add_flow(datapath,<span class="number">1</span>,<span class="keyword">match</span>,actions)</span><br><span class="line">        path_print+=<span class="string">&quot;--&gt;&#123;&#125;-[&#123;&#125;]-&#123;&#125;&quot;</span>.<span class="built_in">format</span>(in_port,switch,out_port) <span class="comment">#更新打印的最短路序列</span></span><br><span class="line">    delay = self.sum_delay(self.minpath,self.links)</span><br><span class="line">    path_print+=<span class="string">&quot;--&gt;&quot;</span>+dst</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;the shortest path is:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(path_print),<span class="string">&#x27;delay:&#x27;</span>,delay)</span><br></pre></td></tr></table></figure><p>（5）对 packetin 的修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path=self.dijkstra(src_switch,dst_switch,first_port,final_port) <span class="comment">#调用dijkstra，获取配置的路径信息</span></span><br><span class="line">self.configure_path(path,src,dst,datapath) <span class="comment">#配置最短路</span></span><br></pre></td></tr></table></figure><h1 id="成果展示-4">成果展示</h1><h2 id="拓扑的构建-2">拓扑的构建</h2><p>（1）mininet 侧</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103223609396.png" alt="拓扑构建"></p><p>（2）RYU 侧</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103223630662.png" alt="RYU侧拓扑发现"></p><p>（3）二十四节点网络拓扑可视化</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103223649765.png" alt="拓扑示意图"></p><h2 id="Dijkstra-算法实现">Dijkstra 算法实现</h2><p>（1）mininet 侧：连通性良好</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103223900092.png" alt="pingall情况"></p><p>（2）时延现象（以 h1 ping h19 为例）</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103223803112.png" alt="mininet 侧时延信息"></p><p>（3）ryu 侧</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103223933169.png" alt="RYU 侧最短路输出"></p><p>（4）最短路可视化 （黄色路径为最短路，黑色路径为未经过路径）</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103223948401.png" alt="最短路可视化"></p>]]></content>
      
      
      <categories>
          
          <category> 实验实操 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> SDN </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于SDN网络架构的DFS算法实践</title>
      <link href="/e9c4a133/"/>
      <url>/e9c4a133/</url>
      
        <content type="html"><![CDATA[<h1 id="项目要求">项目要求</h1><ol><li>在 Mininet 上搭建一个 7 个节点网络（拓扑给定），每个网络节点下挂一 个主机；</li><li>使用 Ryu 连接 Mininet 中的交换机；</li><li>并将拓扑读出来进行可视化展示；</li><li>在 Ryu 上实现深度优先遍历算法，并找出任意两个主机间的最短路和最长路；</li><li>使用最长路来配置任意两个主机间的通信连接；</li><li>将配置通的业务在可视化平台上进行展示 。</li></ol><h1 id="DFS算法原理">DFS算法原理</h1><h2 id="基本思想">基本思想</h2><p>深度优先搜索 DFS（Depth First Search）是从初始结点开始扩展，扩展顺 序总是先扩展最新产生的结点。这就使得搜索沿着状态空间某条单一的路径进行 下去，直到最后的结点不能产生新结点或者找到目标结点为止。当搜索到不能产 生新的结点的时候，就沿着结点产生顺序的反方向寻找可以产生新结点的结点， 并扩展它，形成另一条搜索路径。</p><h2 id="基本步骤">基本步骤</h2><ol><li>从初始结点开始，将待扩展结点依次放到栈中。</li><li>如果栈空，即所有待扩展结点已全部扩展完毕，则问题无解，退出。</li><li>取栈中最新加入的结点，即栈顶结点出栈，并用相应的扩展原则扩展出所有的子结点，并按顺序将这些结点放入栈中。若没有子结点产生，则转（2）。</li><li>如果某个子结点为目标结点，则找到问题的解（这不一定是最优解）， 结束。如果要求得问题的最优解，或者所有解，则转（2），继续搜索新的目标结点。</li></ol><h2 id="示例">示例</h2><p>下图是一个无向图，如果我们从 A 点发起深度优先搜索（以下的访问次序并 不是唯一的，第二个点既可以是 B 也可以是 C,D），则我们可能得到如下的一个 访问过程：A-&gt;B-&gt;E（没有路了！回溯到 A)-&gt;C-&gt;F-&gt;H-&gt;G-&gt;D（没有路，最终 回溯到 A,A 也没有未访问的相邻节点，本次搜索结束）</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103225430116.png" alt="示例拓扑图"></p><h2 id="DFS-与-BFS-比较">DFS 与 BFS 比较</h2><ul><li><strong>遍历方式</strong>不同：DFS 的方式则是从一条路一直走到底后再回退，再走到底 而 BFS 遍历方式是围绕着根结点一圈一圈（level by level）向外遍历。</li><li><strong>数据结构</strong>不同：DFS 常借助栈的方式来实现，而 BFS 常借助队列的方式实 基于深度优先遍历算法框架的主机最长路连接配置项目实验报告 第 3 页 现。</li><li><strong>具体应用</strong>不同：DFS 比较适合判断图中是否有环，寻找两个节点之间的路径，有向无环图（DAG）的拓扑排序，寻找所有强连通片（SCC），无向图中寻找 割点和桥等； BFS 则比较适合判断二分图，以及用于实现寻找最小生成树（MST），如在 BFS 基础上的 Kruskal 算法以及寻找最短路径问题（如 Dijkstra算法）</li></ul><h1 id="代码分析">代码分析</h1><h2 id="DFS-算法实现">DFS 算法实现</h2><h3 id="可行实现方式">可行实现方式</h3><ul><li>自己建立堆栈以代替系统栈，从而进行 DFS</li><li>利用系统栈以及循环实现递归，从而进行 DFS</li></ul><h3 id="实现方式比较">实现方式比较</h3><p>DFS 是一个递归算法，就算额外建立堆栈，本质上处理数据的规则和利用的 空间大小是依旧不变的。它的空间复杂度无论选择哪种方式，都是 O ( N ) （N 为节点数）。而 DFS 计算路径几乎是遍历全图输出路径，因此其耗费的时间受存 储拓扑信息的结构决定。 因此 DFS 选择两种实现方式在效率上没有差异。但就代码长度来说，第二种实现方式更为简洁明了并且简短。因此在实现的过程中本文选择第二种方法。</p><h3 id="变量说明">变量说明</h3><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">u</td><td style="text-align:center">当前检索的交换机</td></tr><tr><td style="text-align:center">i</td><td style="text-align:center">与 u 有相连边的邻接交换机</td></tr><tr><td style="text-align:center">dst</td><td style="text-align:center">目标终点主机对应的交换机</td></tr><tr><td style="text-align:center">visited</td><td style="text-align:center">用于标记交换机的变量</td></tr><tr><td style="text-align:center">cur_path</td><td style="text-align:center">i 和 u 之间的路径，一个边</td></tr><tr><td style="text-align:center">allpaths</td><td style="text-align:center">所有可行路径的集合</td></tr></tbody></table><h3 id="DFS实现">DFS实现</h3><p>（一）获得邻居节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获得邻居节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_adjacent</span>(<span class="params">self,links</span>):</span><br><span class="line">    adjacent = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> switch <span class="keyword">in</span> self.switches: </span><br><span class="line">        adjacent.setdefault(switch,[]) <span class="comment">#初始化字典</span></span><br><span class="line">        <span class="keyword">for</span> switch <span class="keyword">in</span> self.switches: </span><br><span class="line">            <span class="keyword">for</span> link <span class="keyword">in</span> links: </span><br><span class="line">                <span class="keyword">if</span> link[<span class="string">&#x27;src_dpid&#x27;</span>] == switch:</span><br><span class="line">                    adjacent[switch].append(link[<span class="string">&#x27;dst_dpid&#x27;</span>]) <span class="comment">#作为源交换机时添加目的交换机</span></span><br></pre></td></tr></table></figure><p>（二）使用 DFS 寻找源宿全部路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">DFS</span>(<span class="params">self,u,dst,visited,cur_path,allpaths</span>): <span class="comment">#根据传过来的源主机和目的主机来探索最短路，采用递归方法</span></span><br><span class="line">    adjacent = self.get_adjacent(self.links)</span><br><span class="line">    <span class="keyword">if</span> u ==dst: </span><br><span class="line">        allpaths.append(cur_path.copy())</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> adjacent[u]: </span><br><span class="line">            <span class="keyword">if</span> visited[i] == <span class="number">0</span>: </span><br><span class="line">                visited[i] = <span class="number">1</span></span><br><span class="line">                cur_path.append(i)</span><br><span class="line">                self.DFS(i,dst,visited,cur_path,allpaths)</span><br><span class="line">                cur_path.pop()</span><br><span class="line">                visited[i] = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>（三）计算路径上的时延</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_delay</span>(<span class="params">self,all_path,links</span>): </span><br><span class="line">    sum_delay = [<span class="number">0</span>]*<span class="built_in">len</span>(all_path) <span class="comment">#时延列表初始化</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(all_path)): <span class="comment">#分别计算每一条路径上的时延并储存在 sum_delay 列表中，作为返回值返回</span></span><br><span class="line">        path = all_path[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(path)-<span class="number">1</span>): </span><br><span class="line">            <span class="keyword">for</span> link <span class="keyword">in</span> links: </span><br><span class="line">                <span class="keyword">if</span> (link[<span class="string">&#x27;src_dpid&#x27;</span>] == path[j]) <span class="keyword">and</span> (link[<span class="string">&#x27;dst_dpid&#x27;</span>] == path[j+<span class="number">1</span>]): </span><br><span class="line">                    sum_delay[i] += <span class="built_in">int</span>(link[<span class="string">&#x27;delay&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> sum_dela</span><br></pre></td></tr></table></figure><p>（四）给全部路径加上时延属性，并找出最短和最长路</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search_path</span>(<span class="params">self,src,dst,src_port,dst_port</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Calculating all the path of &#123;&#125;:&#123;&#125; -&gt; &#123;&#125;:&#123;&#125;...&#x27;</span>.<span class="built_in">format</span>(src,src_port,dst,dst_port))</span><br><span class="line">    visited = &#123;&#125; <span class="comment">#标记，判断是否已经被加入路径</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> self.switches: </span><br><span class="line">        visited[s] = <span class="number">0</span></span><br><span class="line">    visited[src] = <span class="number">1</span> <span class="comment">#将源主机标记为已被探索</span></span><br><span class="line">        </span><br><span class="line">    cur_path = []</span><br><span class="line">    cur_path.append(src) <span class="comment">#将源主机加入路径</span></span><br><span class="line">    all_paths = []</span><br><span class="line">        </span><br><span class="line">    self.DFS(src,dst,visited,cur_path,all_paths) <span class="comment">#调用 DFS，发现从 src 到 dst 的全部路径并存储在 all_paths 中         </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;find &#123;&#125; paths&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(all_paths))) <span class="comment">#路径的数量</span></span><br><span class="line">        </span><br><span class="line">    sum_delay = self.sum_delay(all_paths,self.links) <span class="comment">#计算出所有路径的时延，交换机和主机之间的时延存储在 links 列表中</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> path <span class="keyword">in</span> all_paths: </span><br><span class="line">        <span class="built_in">print</span>(path,sum_delay[k]) <span class="comment">#打印各条路径的时延信息</span></span><br><span class="line">        k = k+<span class="number">1</span></span><br><span class="line">        <span class="comment">#计算时延最长路和时延最短路</span></span><br><span class="line">    <span class="built_in">max</span> = <span class="number">0</span></span><br><span class="line">    <span class="built_in">min</span> = <span class="number">100000</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sum_delay)): </span><br><span class="line">        <span class="keyword">if</span> sum_delay[i] &gt; <span class="built_in">max</span>: </span><br><span class="line">            max_i = i</span><br><span class="line">            <span class="built_in">max</span> = sum_delay[i]</span><br><span class="line">        <span class="keyword">if</span> sum_delay[i] &lt; <span class="built_in">min</span>: </span><br><span class="line">            min_i = i</span><br><span class="line">            <span class="built_in">min</span> = sum_delay[i]</span><br><span class="line">    <span class="comment">#打印时延最短路和时延最长路</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;the shortest path :&#x27;</span>,all_paths[min_i],<span class="string">&#x27;delay:&#x27;</span>,sum_delay[min_i])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;the longest path :&#x27;</span>,all_paths[max_i],<span class="string">&#x27;delay:&#x27;</span>,sum_delay[max_i])</span><br><span class="line">    <span class="comment">#要求配置的是时延最长路，因此用下列代码将最长路的主机、交换机和端口信息存入 ryu_path，返回给调用函数</span></span><br><span class="line">    path = all_paths[max_i]</span><br><span class="line">    ryu_path = []</span><br><span class="line">    in_port = src_port</span><br><span class="line">    <span class="keyword">for</span> s1,s2 <span class="keyword">in</span> <span class="built_in">zip</span>(path[:-<span class="number">1</span>],path[<span class="number">1</span>:]):</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> self.links:</span><br><span class="line">    <span class="comment">#从原图的 links 列表中得到对应交换机的端口信息，从目的主机到源主机读取出端口，从源主机到目的主机读取入端口，其中 s1 是从目的主机一侧开始往源主机一侧推进，s2 是从源主机一侧开始往目的主机一侧推进。</span></span><br><span class="line">            <span class="keyword">if</span> link[<span class="string">&#x27;src_dpid&#x27;</span>] == s1 <span class="keyword">and</span> link[<span class="string">&#x27;dst_dpid&#x27;</span>] == s2: </span><br><span class="line">                out_port = link[<span class="string">&#x27;dst_port_no&#x27;</span>]</span><br><span class="line">                ryu_path.append((s1,in_port,out_port))</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> self.links: </span><br><span class="line">            <span class="keyword">if</span> link[<span class="string">&#x27;src_dpid&#x27;</span>] == s2 <span class="keyword">and</span> link[<span class="string">&#x27;dst_dpid&#x27;</span>] == s1: </span><br><span class="line">                in_port = link[<span class="string">&#x27;src_port_no&#x27;</span>]</span><br><span class="line">                ryu_path.append((dst,in_port,dst_port))</span><br><span class="line">    <span class="keyword">return</span> ryu_path <span class="comment">#返回最长路上的主机和所有交换机以及对应的端口信息，以便配置的时候调用</span></span><br></pre></td></tr></table></figure><h3 id="RYU通信实现">RYU通信实现</h3><p>（一）初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Kruskaltest</span>(app_manager.RyuApp): </span><br><span class="line">    OFP_VERSIONS=[ofproto_v1_3.OFP_VERSION] <span class="comment">#确定控制器的 openflow 版本</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,*args,**kwargs</span>): <span class="number">7.</span> <span class="built_in">super</span>(Kruskaltest,self).__init__(*args,**kwargs)<span class="comment">#继承自己，方便后面的初始化步骤</span></span><br><span class="line">    self.mac_to_port=&#123;&#125; <span class="comment">#arp 列表初始化</span></span><br><span class="line">    self.topology_api_app=self</span><br><span class="line">    self.sleep_interval = <span class="number">0.5</span> <span class="comment">#程序暂停的时间为 0.5 秒，以使 mininet 和 ryu 的拓扑建立保持同步，防止链路丢失</span></span><br><span class="line">    self.switches = [] <span class="comment">#交换机列表初始化</span></span><br><span class="line">    self.links = [] <span class="comment">#链路信息初始化</span></span><br><span class="line">    self.mst_links = [] <span class="comment">#最小生成树上的链路初始化</span></span><br><span class="line">    self.pathes = &#123;&#125; <span class="comment">#路径初始化</span></span><br><span class="line">    self.banport = &#123;&#125; <span class="comment">#被禁止的端口初始化</span></span><br></pre></td></tr></table></figure><p>（二）流表配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@set_ev_cls(<span class="params">ofp_event.EventOFPSwitchFeatures,CONFIG_DISPATCHER</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">switch_features_handler</span>(<span class="params">self,ev</span>):</span><br><span class="line">        datapath=ev.msg.datapath</span><br><span class="line">        ofproto=datapath.ofproto </span><br><span class="line">        ofp_parser=datapath.ofproto_parser </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">match</span>=ofp_parser.OFPMatch()</span><br><span class="line">        actions=[ofp_parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,ofproto.OFPCML_NO_BUFFER)]</span><br><span class="line">        self.add_flow(datapath,<span class="number">0</span>,<span class="keyword">match</span>,actions)<span class="comment">#配置缺省流表，match 域为空，对每一个交换机都添加该流表，当交换机无法处理收到的数据包时，执行 actions，把数据包向控制器转发</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_flow</span>(<span class="params">self,datapath,priority,<span class="keyword">match</span>,actions</span>):<span class="comment">#控制器向交换机发流表的方法</span></span><br><span class="line">        ofproto=datapath.ofproto </span><br><span class="line">        ofp_parser=datapath.ofproto_parser </span><br><span class="line">        inst=[ofp_parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,actions)]<span class="comment">#收到后立即执行 actions</span></span><br><span class="line"><span class="comment">#以上内容为流表信息的获取</span></span><br><span class="line">        mod=ofp_parser.OFPFlowMod(datapath=datapath,priority=priority,<span class="keyword">match</span>=<span class="keyword">match</span>,instructions=inst)<span class="comment">#流表内容定义，第一个为流表从哪一个交换机发送过来，第二个为权重，第三个为匹配域，当收到的数据包和匹配域匹配上时执行 instructions </span></span><br><span class="line">    datapath.send_msg(mod)<span class="comment">#发送流表</span></span><br></pre></td></tr></table></figure><p>（三）拓扑发现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@set_ev_cls(<span class="params">event.EventSwitchEnter,[CONFIG_DISPATCHER,MAIN_DISPATCHER]</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">switch_enter_handler</span>(<span class="params">self,ev</span>): </span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;==================================&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;switch entered...&#x27;</span>)</span><br><span class="line">        self.switches,self.links = self.get_topology() <span class="comment">#通过后面的 get_topology 方法来获取交换机和链路信息</span></span><br><span class="line">        self.banport = self.find_banport(self.links[:]) <span class="comment">#找到被禁止的端口，因为洪泛时不能有圈，否则会陷入死循环</span></span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> self.mst_links: </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(link[<span class="string">&#x27;src_dpid&#x27;</span>],link[<span class="string">&#x27;dst_dpid&#x27;</span>])) <span class="comment">#打印最小生成树</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;==================================&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        time.sleep(self.sleep_interval) <span class="comment">#ryu 每发现一个交换机之后都要暂停一段时间，让mininetd 建立拓扑的速度能跟上，否则会造成链路丢失</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_topology</span>(<span class="params">self</span>): </span><br><span class="line">    switch_list = get_switch(self.topology_api_app,<span class="literal">None</span>)</span><br><span class="line">    switches = [switch.dp.<span class="built_in">id</span> <span class="keyword">for</span> switch <span class="keyword">in</span> switch_list]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;switches:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(switches)) <span class="comment">#得到并打印交换机列表</span></span><br><span class="line">    <span class="keyword">for</span> switch <span class="keyword">in</span> switches: </span><br><span class="line">        self.banport.setdefault(switch,[]) <span class="comment">#初始化被禁止的端口列表</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------------------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;banport first_list is&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.banport))</span><br><span class="line">    link_list = get_link(self.topology_api_app,<span class="literal">None</span>)</span><br><span class="line">    links = [&#123;<span class="string">&#x27;src_dpid&#x27;</span>:link.src.dpid,<span class="string">&#x27;src_port_no&#x27;</span>:link.src.port_no,<span class="string">&#x27;dst_dpid&#x27;</span>:link.dst.dpid,<span class="string">&#x27;dst_port_no&#x27;</span>:link.dst.port_no&#125;<span class="keyword">for</span> link <span class="keyword">in</span> link_list]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;the getted link_list is&#123;&#125;&quot;</span>.<span class="built_in">format</span>(links)) <span class="comment">#得到并打印链路信息，其中包含了源交换机的 dpid 和对应的端口号以及目的交换机的 dpid 和对应的端口号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#file = open(&quot;./topo24.json&quot;,&quot;r&quot;)</span></span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&quot;./topo7.json&quot;</span>,<span class="string">&quot;r&quot;</span>)<span class="comment">#由于原来的 24 个交换机拓扑太大，故用 7 个交换机来作为测试，读取 topo7.json 里的信息</span></span><br><span class="line">    topoinfo = json.load(file)</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> links: </span><br><span class="line">        <span class="keyword">for</span> edge <span class="keyword">in</span> topoinfo[<span class="string">&#x27;links&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span>([<span class="string">&quot;s&quot;</span>+<span class="built_in">str</span>(link[<span class="string">&quot;src_dpid&quot;</span>]),<span class="string">&quot;s&quot;</span>+<span class="built_in">str</span>(link[<span class="string">&quot;dst_dpid&quot;</span>])] == edge[<span class="string">&quot;vertexs&quot;</span>] <span class="keyword">or</span> [<span class="string">&quot;s&quot;</span>+<span class="built_in">str</span>(link[<span class="string">&quot;dst_dpid&quot;</span>]),<span class="string">&quot;s&quot;</span>+<span class="built_in">str</span>(link[<span class="string">&quot;src_dpid&quot;</span>])] == edge[<span class="string">&quot;vertexs&quot;</span>]):</span><br><span class="line">                link[<span class="string">&#x27;delay&#x27;</span>] = edge[<span class="string">&#x27;delay&#x27;</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>（四）DFS最长路配置</p><blockquote><p>配置思路 : 将需要配置的路径存储在 path 中，其中有源主机和目的主机的 mac 地址、 路径上的交换机号和对应的端口，将对应流表下发。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">configure_path</span>(<span class="params">self,path,src,dst,datapath</span>): <span class="comment">#路径配置函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;configure the longgest path&quot;</span>)</span><br><span class="line">    path_print=src <span class="comment">#将源主机的 mac 地址加入到打印序列中</span></span><br><span class="line">    <span class="keyword">for</span> switch,in_port,out_port <span class="keyword">in</span> path: <span class="comment">#向对应的交换机下发流表指导通信</span></span><br><span class="line">        ofp_parser=datapath.ofproto_parser</span><br><span class="line">        <span class="keyword">match</span>=ofp_parser.OFPMatch(in_port=in_port,eth_src=src,eth_dst=dst)</span><br><span class="line">        actions=[ofp_parser.OFPActionOutput(out_port)]</span><br><span class="line">        self.add_flow(datapath,<span class="number">1</span>,<span class="keyword">match</span>,actions)</span><br><span class="line">        path_print+=<span class="string">&quot;--&gt;&#123;&#125;-&#123;&#125;-&#123;&#125;&quot;</span>.<span class="built_in">format</span>(in_port,switch,out_port)<span class="comment">#将路径上的进入端</span></span><br><span class="line">口、交换机和输出端口加入打印序列</span><br><span class="line">    path_print+=<span class="string">&quot;--&quot;</span>+dst<span class="comment">#将目的主机的 mac 地址加入打印序列</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;the longgest path is:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(path_print))<span class="comment">#打印最长路</span></span><br></pre></td></tr></table></figure><p>（五）控制器对数据包的处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@set_ev_cls(<span class="params">ofp_event.EventOFPPacketIn,MAIN_DISPATCHER</span>)</span><span class="comment">#监视器，当有 packetin 消息进来时，执行下面的代码</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">packet_in_handler</span>(<span class="params">self,ev</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;==========================================================&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;it has entered packet_in_handler func&#x27;</span>)</span><br><span class="line">        msg=ev.msg</span><br><span class="line">        datapath=msg.datapaths </span><br><span class="line">        ofproto=datapath.ofproto </span><br><span class="line">        ofp_parser=datapath.ofproto_parser </span><br><span class="line">        dpid=datapath.<span class="built_in">id</span> <span class="comment">#id from switch</span></span><br><span class="line">        <span class="comment">#以上是对收到的数据包进行解析</span></span><br><span class="line">        self.mac_to_port.setdefault(dpid,&#123;&#125;)</span><br><span class="line">        <span class="comment"># 对控制器里面的 mac_to_port 列表初始化</span></span><br><span class="line">        pkt=packet.Packet(msg.data)<span class="comment">#读取需要传输的数据</span></span><br><span class="line">        eth=pkt.get_protocol(ethernet.ethernet)<span class="comment">#读取以太网地址的数据包，里面包含了 src 和dst 以及 ethertype 等信息</span></span><br><span class="line">        in_port=msg.<span class="keyword">match</span>[<span class="string">&#x27;in_port&#x27;</span>] <span class="comment">#读取匹配域中的进入交换机的端口号</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;in_port is &quot;</span>,in_port)</span><br><span class="line">        src = eth.src <span class="number">21.</span> self.mac_to_port[dpid][src]=in_port<span class="comment">#将源交换机的 MAC 地址和源交换机进入该交换机的端口号对应起来</span></span><br><span class="line">        dst=eth.dst <span class="comment">#目的主机的 MAC 地址</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;the src is &#x27;</span>, src)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;the dst is &#x27;</span>, dst)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;the dpid is &#x27;</span>, dpid)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;self.mac_to_port:&quot;</span>, self.mac_to_port)</span><br><span class="line">        pathes=&#123;&#125;<span class="comment">#路径初始化</span></span><br><span class="line">        <span class="keyword">if</span> dst <span class="keyword">in</span> self.mac_to_port[dpid]: <span class="comment">#如果目的主机的 MAC 地址已经在控制器的 mac_to_port列表里面有记录，直接下发流表</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;dst mac is known&#x27;</span>)</span><br><span class="line">            out_port=self.mac_to_port[dpid][dst]</span><br><span class="line">            actions=[ofp_parser.OFPActionOutput(out_port)]</span><br><span class="line">            <span class="keyword">match</span>=ofp_parser.OFPMatch(in_port=in_port,eth_dst=dst,eth_src=src)</span><br><span class="line">            <span class="comment">#以上为对流表内容的定义</span></span><br><span class="line">            self.add_flow(datapath,<span class="number">1</span>,<span class="keyword">match</span>,actions)<span class="comment">#权值为 1，表示优先级先于缺省流表</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;add flow&quot;</span>)</span><br><span class="line">            self.pathes.setdefault(src,&#123;&#125;)</span><br><span class="line">            self.pathes[src].setdefault(dst,[]) <span class="comment">#对从这个主机开始的路径做初始化</span></span><br><span class="line">            self.pathes[src][dst].append(dpid)<span class="comment">#往路径上添加交换机</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;path appending:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.pathes[src][dst]))<span class="comment">#打印路径上的交换机</span></span><br><span class="line">        <span class="keyword">else</span>:<span class="comment">#如果控制器的 mac_to_port 列表里面没有目的主机的 mac 地址，执行以下代码</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;dst mac is unknown&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;the dpid is &#x27;</span>,dpid)</span><br><span class="line">            actions=[]<span class="comment">#actions 初始化</span></span><br><span class="line">            <span class="keyword">for</span> port <span class="keyword">in</span> datapath.ports:<span class="comment">#对于向控制器发送 packetin 消息的交换机中的每一个端口，执行下面的代码</span></span><br><span class="line">                <span class="keyword">if</span>(port <span class="keyword">not</span> <span class="keyword">in</span> self.banport[dpid]) <span class="keyword">and</span> (port != in_port):<span class="comment">#如果端口不是禁止端口并且不是数据包进入的端口，将端口加入执行洪泛操作的端口列表里面</span></span><br><span class="line">                    actions.append(ofp_parser.OFPActionOutput(port))</span><br><span class="line">        out=ofp_parser.OFPPacketOut(datapath=datapath,buffer_id=msg.buffer_id,in_port=in_port,actions=actions,data=msg.data)<span class="comment">#向出端口发送的数据包内容</span></span><br><span class="line">        datapath.send_msg(out)<span class="comment">#发送数据包</span></span><br></pre></td></tr></table></figure><p>新定义一个字典列表来存储主机和交换机之间的链路信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> dst <span class="keyword">in</span> self.mac_to_port[dpid]:<span class="comment">#目的主机地址在 mac_to_port 表中</span></span><br><span class="line">    <span class="keyword">if</span> src <span class="keyword">not</span> <span class="keyword">in</span> self.host_mac_to.keys(): </span><br><span class="line">        self.host_mac_to[src]=(dpid,in_port)<span class="comment">#若源主机地址不在 host_mac_to 表中,则在该表中增加这一项</span></span><br><span class="line">    <span class="keyword">if</span> dst,src <span class="keyword">in</span> self.host_mac_to.keys():<span class="comment">#如果目的主机和源主机 mac 地址在host_mac_to 表中，则读取主机和交换机之间的链路</span></span><br><span class="line">        src_switch=self.host_mac_to[src][<span class="number">0</span>]</span><br><span class="line">        first_port=self.host_mac_to[src][<span class="number">1</span>]</span><br><span class="line">        dst_switch=self.host_mac_to[dst][<span class="number">0</span>]</span><br><span class="line">        final_port=self.host_mac_to[dst][<span class="number">1</span>]</span><br><span class="line">        path=self.search_path(src_switch,dst_switch,first_port,final_port)<span class="comment">#寻找路径</span></span><br><span class="line">        self.configure_path(path,src,dst,datapath)<span class="comment">#配置路径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#发流表</span></span><br><span class="line">        out_port=self.mac_to_port[dpid][dst]</span><br><span class="line">        actions=[ofp_parser.OFPActionOutput(out_port)]</span><br><span class="line">        <span class="keyword">match</span>=ofp_parser.OFPMatch(in_port=in_port,eth_dst=dst,eth_src=src)</span><br><span class="line">        self.add_flow(datapath,<span class="number">1</span>,<span class="keyword">match</span>,actions)</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">if</span> src <span class="keyword">not</span> <span class="keyword">in</span> self.host_mac_to.keys(): </span><br><span class="line">            self.host_mac_to[src]=(dpid,in_port)</span><br><span class="line">        actions=[]</span><br><span class="line">        <span class="keyword">for</span> port <span class="keyword">in</span> datapath.ports: </span><br><span class="line">            <span class="keyword">if</span>(port <span class="keyword">not</span> <span class="keyword">in</span> self.banport[dpid]) <span class="keyword">and</span> (port != in_port): </span><br><span class="line">                actions.append(ofp_parser.OFPActionOutput(port))</span><br></pre></td></tr></table></figure><h1 id="成果展示">成果展示</h1><h2 id="拓扑构建">拓扑构建</h2><p>（一）mininet侧</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103225454759.png" alt="mininet拓扑构建信息"></p><p>（二）RYU侧</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103225510126.png" alt="RYU侧拓扑发现"></p><p>（三）七节点拓扑可视化</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103225525767.png" alt="拓扑示意图"></p><h2 id="DFS算法实现">DFS算法实现</h2><p>（一）mininet侧 —— 连通性良好</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103225538716.png" alt="mininet侧连通性良好"></p><p>以 h2 ping h7 示例</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103225553983.png" alt="ping测试"></p><p>（二）RYU侧</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103225615811.png" alt="RYU侧连通性测试"></p><p>（三）最短路和最长路可视化</p><p>（蓝色路径为最长路，黄色路径为最短路，绿色路径为重合的路径，黑色路径为未经过路径）</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103225633115.png" alt="拓扑可视化"></p>]]></content>
      
      
      <categories>
          
          <category> 实验实操 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> SDN </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于SDN网络架构的Kruskal算法实践</title>
      <link href="/fd05d161/"/>
      <url>/fd05d161/</url>
      
        <content type="html"><![CDATA[<h1 id="项目要求-3">项目要求</h1><ol><li>配置一个广播通信业务，假设主机0 向所有其它主机进行广播。</li><li>使用Kruskal 算法计算广播使用的最小生成树。</li><li>将广播业务在可视化平台上进行展示。</li></ol><h1 id="基本原理">基本原理</h1><h2 id="Kruskal-算法">Kruskal 算法</h2><h3 id="最小生成树概念">最小生成树概念</h3><p>引入一个实际问题：要在n 个城市中建立一个通信网络，则连通这n 个城市需要布置n-1 一条通信线路，这个时候我们需要考虑如何在成本最低的情况下建立这个通信网？</p><p>将问题抽象出来，即n 个城市就是图上的n 个顶点，然后，边表示两个城市的通信线路，每条边上的权重就是我们搭建这条线路所需要的成本，所以现在我们有n 个顶点的连通网可以建立不同的生成树，每一颗生成树都可以作为一个通信网，当我们构造这个连通网所花的成本最小时，搭建该连通网的生成树，就称为最小生成树。</p><p>具体概念：在一给定的无向图G = (V, E) 中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span> 代表连接顶点u 与顶点v 的边，而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\omega (u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>代表此边的权重，若存在 t 为 E 的子集且为无循环图，使得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>t</mi></mrow><mrow></mrow></msubsup><mi>ω</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\omega (t) = \sum_{(u,v)\in t}^{} \omega (u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2247em;vertical-align:-0.4747em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.5029em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">u</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mclose mtight">)</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4747em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\omega (t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span> 最小，则此T 为G 的最小生成树（最小权重生成树）。</p><h3 id="基本思想-3">基本思想</h3><p>将所有边按照权值的大小进行升序排序，然后从小到大一一判断，条件为：如果这个边不会与之前选择的所有边组成回路，就可以作为最小生成树的一部分；反之，舍去。直到具有n 个顶点的连通网筛选出来n-1 条边为止。筛选出来的边和所有的顶点构成此连通网的最小生成树。</p><h3 id="关键点">关键点</h3><p>Kruskal 算法基本分为排序和成环检测两大环节，其中排序算法发展多年，已经将其复杂度压榨到了很小，尤其对于非线性时间比较类排序，其时间复杂度更是不能突破nlogn。</p><p>因此，kruskal 算法的关键点在于成环检测算法的优化。</p><p>最直接的实现方式是将图用邻接链表存储，调用广度优先算法（Breadth First Search，BFS）,如果遍历到向相同的点，则说明有环，否则说明无环。引入新的数据结构——UNION-FIND，主要操作是UNION（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">C_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">C_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>）:将集合<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">C_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">C_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>合并为一个集合，并用FIND（x）返回元素x 所在集合的名字，记为leader。若一条边的两顶点的leader 不同，说明该边是一条割边，即不会成环。</p><h2 id="拓扑可视化">拓扑可视化</h2><h3 id="可视化思路">可视化思路</h3><p>利用mininet 的net 操作打印出所读取的拓扑的网络节点关系信息，并且修改mininet 文件中的相关代码使得net 操作打印出的信息能直接进入用于存储信息的txt 文件中。之后利用python 中的networkx 库读取txt 文件内容并且利用Matplotlib 的绘图功能即可画出相应的拓扑图。</p><h3 id="NetworkX-原理">NetworkX 原理</h3><p>NetworkX 是一款python 的软件包，它内置了常用的图和网络分析算法。但是在本项目中我们只使用它的创建简单图（有向图或无向图）的功能，再导入Matplotlib 的绘图接口绘出所需拓扑图的图像。</p><h1 id="代码实现-2">代码实现</h1><h2 id="拓扑建立">拓扑建立</h2><h3 id="主体代码">主体代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;topo24.json&quot;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> load_f:</span><br><span class="line">    topoinfo=json.load(load_f)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, topoinfo[<span class="string">&quot;host_no&quot;</span>]+<span class="number">1</span>):</span><br><span class="line">        self.addHost(<span class="string">&quot;h&quot;</span>+<span class="built_in">str</span>(h))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, topoinfo[<span class="string">&quot;switch_no&quot;</span>]+<span class="number">1</span>):</span><br><span class="line">        self.addSwitch(<span class="string">&quot;s&quot;</span>+<span class="built_in">str</span>(s))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">17</span>):</span><br><span class="line">        self.addLink(topoinfo[<span class="string">&quot;links&quot;</span>][i][<span class="string">&quot;vertexs&quot;</span>][<span class="number">0</span>],topoinfo[<span class="string">&quot;links&quot;</span>][i][<span class="string">&quot;vertexs&quot;</span>][<span class="number">1</span>],delay=<span class="built_in">str</span>(topoinfo[<span class="string">&quot;links&quot;</span>][i][<span class="string">&quot;delay&quot;</span>])+<span class="string">&#x27;ms&#x27;</span>,bw=<span class="built_in">int</span>(topoinfo[<span class="string">&quot;links&quot;</span>][i][<span class="string">&quot;bw&quot;</span>]))</span><br></pre></td></tr></table></figure><p>读取topo24.json 文件里的信息，存入topoinfo 中。通过addHost 读取并存储主机信息，通过addSwitch 读取并存储交换机信息，通过addLink 读取交换机和主机之间以及交换机之间的连接信息和时延带宽信息。</p><h3 id="库函数说明">库函数说明</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mininet.topo <span class="keyword">import</span> Topo <span class="comment">#该类里面包含了addHost、addSwitch 和addLink 方法</span></span><br><span class="line"><span class="keyword">from</span> mininet.net <span class="keyword">import</span> Mininet <span class="comment">#该类提供了实现控制台pingall 等命令的方法、将搭建好的拓扑连接到Ryu 控制器的方法以及给拓扑中的主机和交换机分配MAC 地址以及IP 地址的方法</span></span><br><span class="line"><span class="keyword">from</span> mininet.node <span class="keyword">import</span> CPULimitedHost <span class="comment">#给控制器和交换机之间的接口设置IP 地址，并且对虚拟主机的CPU 划定带宽</span></span><br><span class="line"><span class="keyword">from</span> mininet.link <span class="keyword">import</span> TCLink <span class="comment">#引用TClink 类，设置虚拟链路的带宽和时延</span></span><br><span class="line"><span class="keyword">from</span> mininet.util <span class="keyword">import</span> dumpNodeConnections <span class="comment">#引用dumpNodeConnections 方法，断开和某一个节点的连接</span></span><br><span class="line"><span class="keyword">from</span> mininet.log <span class="keyword">import</span> setLogLevel <span class="comment">#引用setLogLevel，输出mininet 运行的状态</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br></pre></td></tr></table></figure><p>其中sys 和os 都是python 的系统操作模块，sys 提供了一组非常实用的服务，os 模块负责程序和操作系统的交互，提供了访问操作系统底层的接口。json 提供了读取json 文件的方法。</p><h2 id="RYU通信">RYU通信</h2><h3 id="初始化">初始化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Kruskaltest</span>(app_manager.RyuApp):</span><br><span class="line"></span><br><span class="line">    OFP_VERSIONS=[ofproto_v1_3.OFP_VERSION] <span class="comment">#确定控制器的openflow 版本</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,*args,**kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>(Kruskaltest,self).__init__(*args,**kwargs) <span class="comment">#继承自己，方便后面的初始化步骤</span></span><br><span class="line">        self.mac_to_port=&#123;&#125; <span class="comment">#arp 列表初始化</span></span><br><span class="line">        self.topology_api_app=self</span><br><span class="line">        self.sleep_interval = <span class="number">0.5</span> <span class="comment">#程序暂停的时间为0.5 秒，以使mininet 和ryu 的拓扑建立保持同步，防止链路丢失</span></span><br><span class="line">        self.switches = [] <span class="comment">#交换机列表初始化</span></span><br><span class="line">        self.links = [] <span class="comment">#链路信息初始化</span></span><br><span class="line">        self.mst_links = [] <span class="comment">#最小生成树上的链路初始化</span></span><br><span class="line">        self.pathes = &#123;&#125; <span class="comment">#路径初始化</span></span><br><span class="line">        self.banport = &#123;&#125; <span class="comment">#被禁止的端口初始化</span></span><br></pre></td></tr></table></figure><h3 id="流表配置">流表配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@set_ev_cls(<span class="params">ofp_event.EventOFPSwitchFeatures,CONFIG_DISPATCHER</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">switch_features_handler</span>(<span class="params">self,ev</span>):</span><br><span class="line">    datapath=ev.msg.datapath</span><br><span class="line">    ofproto=datapath.ofproto</span><br><span class="line">    ofp_parser=datapath.ofproto_parser</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">match</span>=ofp_parser.OFPMatch()</span><br><span class="line">    actions=[ofp_parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,ofproto.OFPCML_NO_BUFFER)]</span><br><span class="line">    self.add_flow(datapath,<span class="number">0</span>,<span class="keyword">match</span>,actions) <span class="comment">#配置缺省流表，match 域为空，对每一个交换机都添加该流表，当交换机无法处理收到的数据包时，执行actions，把数据包向控制器转发</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_flow</span>(<span class="params">self,datapath,priority,<span class="keyword">match</span>,actions</span>):<span class="comment">#控制器向交换机发流表的方法</span></span><br><span class="line">    ofproto=datapath.ofproto</span><br><span class="line">    ofp_parser=datapath.ofproto_parser</span><br><span class="line"> </span><br><span class="line">    inst=[ofp_parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,actions)]<span class="comment">#收到后立即执行actions</span></span><br><span class="line">  <span class="comment">#以上内容为流表信息的获取</span></span><br><span class="line"></span><br><span class="line">    mod=ofp_parser.OFPFlowMod(datapath=datapath,priority=priority,<span class="keyword">match</span>=<span class="keyword">match</span>,instructions=inst)<span class="comment">#流表内容定义，第一个为流表从哪一个交换机发送过来，第二个为权重，第三个为匹配域，当收到的数据包和匹配域匹配上时执行instructions</span></span><br><span class="line">    datapath.send_msg(mod)<span class="comment">#发送流表</span></span><br></pre></td></tr></table></figure><h3 id="拓扑发现">拓扑发现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@set_ev_cls(<span class="params">event.EventSwitchEnter,[CONFIG_DISPATCHER,MAIN_DISPATCHER]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">switch_enter_handler</span>(<span class="params">self,ev</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;==================================&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;switch entered...&#x27;</span>)</span><br><span class="line">    self.switches,self.links = self.get_topology() <span class="comment">#通过后面的get_topology 方法来获取交换机和链路信息</span></span><br><span class="line">    <span class="comment">#self.mst_links = self.kruskal(self.links[:])</span></span><br><span class="line">    self.banport = self.find_banport(self.links[:]) <span class="comment">#找到被禁止的端口，因为洪泛时不能有圈，否则会陷入死循环</span></span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> self.mst_links:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(link[<span class="string">&#x27;src_dpid&#x27;</span>],link[<span class="string">&#x27;dst_dpid&#x27;</span>])) <span class="comment">#打印最小生成树</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;==================================&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    time.sleep(self.sleep_interval) <span class="comment">#ryu 每发现一个交换机之后都要暂停一段时间，让mininetd 建立拓扑的速度能跟上，否则会造成链路丢失</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_topology</span>(<span class="params">self</span>):</span><br><span class="line">    switch_list = get_switch(self.topology_api_app,<span class="literal">None</span>)</span><br><span class="line">    switches = [switch.dp.<span class="built_in">id</span> <span class="keyword">for</span> switch <span class="keyword">in</span> switch_list]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;switches:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(switches))<span class="comment">#得到并打印交换机列表</span></span><br><span class="line">    <span class="keyword">for</span> switch <span class="keyword">in</span> switches:</span><br><span class="line">        self.banport.setdefault(switch,[])<span class="comment">#初始化被禁止的端口列表</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------------------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;banport first_list is&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.banport))</span><br><span class="line">    link_list = get_link(self.topology_api_app,<span class="literal">None</span>)</span><br><span class="line"> </span><br><span class="line">    links = [&#123;<span class="string">&#x27;src_dpid&#x27;</span>:link.src.dpid,<span class="string">&#x27;src_port_no&#x27;</span>:link.src.port_no,<span class="string">&#x27;dst_dpid&#x27;</span>:link.dst.dpid,<span class="string">&#x27;dst_port_no&#x27;</span>:link.dst.port_no&#125;</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> link_list]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;the getted link_list is&#123;&#125;&quot;</span>.<span class="built_in">format</span>(links)) <span class="comment">#得到并打印链路信息，其中包含了源交换机的dpid 和对应的端口号以及目的交换机的dpid 和对应的端口号</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">#add &#x27;delay&#x27; in link</span></span><br><span class="line">    <span class="comment">#file = open(&quot;./topo24.json&quot;,&quot;r&quot;)</span></span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&quot;./topo7.json&quot;</span>,<span class="string">&quot;r&quot;</span>)<span class="comment">#由于原来的24 个交换机拓扑太大，故用7 个交换机来作为测试，读取topo7.json 里的信息</span></span><br><span class="line">    topoinfo = json.load(file)</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">        <span class="keyword">for</span> edge <span class="keyword">in</span> topoinfo[<span class="string">&#x27;links&#x27;</span>]:</span><br><span class="line">          <span class="keyword">if</span>([<span class="string">&quot;s&quot;</span>+<span class="built_in">str</span>(link[<span class="string">&quot;src_dpid&quot;</span>]),<span class="string">&quot;s&quot;</span>+<span class="built_in">str</span>(link[<span class="string">&quot;dst_dpid&quot;</span>])] == edge[<span class="string">&quot;vertexs&quot;</span>] <span class="keyword">or</span> [<span class="string">&quot;s&quot;</span>+<span class="built_in">str</span>(link[<span class="string">&quot;dst_dpid&quot;</span>]),<span class="string">&quot;s&quot;</span>+<span class="built_in">str</span>(link[<span class="string">&quot;src_dpid&quot;</span>])] == edge[<span class="string">&quot;vertexs&quot;</span>]): </span><br><span class="line">            link[<span class="string">&#x27;delay&#x27;</span>] = edge[<span class="string">&#x27;delay&#x27;</span>]</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="控制器对收到的数据包的处理">控制器对收到的数据包的处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@set_ev_cls(<span class="params">ofp_event.EventOFPPacketIn,MAIN_DISPATCHER</span>) </span><span class="comment">#监视器，当有packetin 消息进来时，</span></span><br><span class="line">执行下面的代码</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">packet_in_handler</span>(<span class="params">self,ev</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;==========================================================&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;it has entered packet_in_handler func&#x27;</span>)</span><br><span class="line">    msg=ev.msg</span><br><span class="line"></span><br><span class="line">    datapath=msg.datapaths</span><br><span class="line">    ofproto=datapath.ofproto</span><br><span class="line">    ofp_parser=datapath.ofproto_parser</span><br><span class="line"> </span><br><span class="line">    dpid=datapath.<span class="built_in">id</span> <span class="comment">#id from switch</span></span><br><span class="line">    <span class="comment">#以上是对收到的数据包进行解析</span></span><br><span class="line">    </span><br><span class="line">    self.mac_to_port.setdefault(dpid,&#123;&#125;) <span class="comment"># 对控制器里面的mac_to_port 列表初始化</span></span><br><span class="line">    pkt=packet.Packet(msg.data) <span class="comment">#读取需要传输的数据</span></span><br><span class="line">    eth=pkt.get_protocol(ethernet.ethernet) <span class="comment">#读取以太网地址的数据包，里面包含了src 和dst 以及ethertype 等信息</span></span><br><span class="line">    in_port=msg.<span class="keyword">match</span>[<span class="string">&#x27;in_port&#x27;</span>] <span class="comment">#读取匹配域中的进入交换机的端口号</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in_port is &quot;</span>,in_port)</span><br><span class="line">    src = eth.src</span><br><span class="line">    self.mac_to_port[dpid][src]=in_port <span class="comment">#将源交换机的MAC 地址和源交换机进入该交换机的端口号对应起来</span></span><br><span class="line">    dst=eth.dst <span class="comment">#目的主机的MAC 地址</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;the src is &#x27;</span>, src)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;the dst is &#x27;</span>, dst)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;the dpid is &#x27;</span>, dpid)</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;self.mac_to_port:&quot;</span>, self.mac_to_port)</span><br><span class="line">    pathes=&#123;&#125; <span class="comment">#路径初始化</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">#如果目的主机的MAC地址已经在控制器的mac_to_port列表里面有记录，直接下发流表</span></span><br><span class="line">    <span class="keyword">if</span> dst <span class="keyword">in</span> self.mac_to_port[dpid]: </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;dst mac is known&#x27;</span>)</span><br><span class="line">        out_port=self.mac_to_port[dpid][dst]</span><br><span class="line">        actions=[ofp_parser.OFPActionOutput(out_port)]</span><br><span class="line">        <span class="keyword">match</span>=ofp_parser.OFPMatch(in_port=in_port,eth_dst=dst,eth_src=src)</span><br><span class="line">        <span class="comment">#以上为对流表内容的定义</span></span><br><span class="line">        </span><br><span class="line">        self.add_flow(datapath,<span class="number">1</span>,<span class="keyword">match</span>,actions) <span class="comment">#权值为1，表示优先级先于缺省流表</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;add flow&quot;</span>)</span><br><span class="line"> </span><br><span class="line">        self.pathes.setdefault(src,&#123;&#125;)</span><br><span class="line">        self.pathes[src].setdefault(dst,[]) <span class="comment">#对从这个主机开始的路径做初始化</span></span><br><span class="line"> </span><br><span class="line">        self.pathes[src][dst].append(dpid) <span class="comment">#往路径上添加交换机</span></span><br><span class="line"> </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;path appending:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.pathes[src][dst])) <span class="comment">#打印路径上的交换机</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment">#如果控制器的mac_to_port 列表里面没有目的主机的mac 地址，执行以下代码</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;dst mac is unknown&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;the dpid is &#x27;</span>,dpid)</span><br><span class="line">        actions=[] <span class="comment">#actions 初始化</span></span><br><span class="line">        <span class="keyword">for</span> port <span class="keyword">in</span> datapath.ports: <span class="comment">#对于向控制器发送packetin 消息的交换机中的每一个端口，执行下面的代码</span></span><br><span class="line">            <span class="keyword">if</span>(port <span class="keyword">not</span> <span class="keyword">in</span> self.banport[dpid]) <span class="keyword">and</span> (port != in_port): <span class="comment">#如果端口不是禁止端口并且不是数据包进入的端口，将端口加入执行洪泛操作的端口列表里面</span></span><br><span class="line">                actions.append(ofp_parser.OFPActionOutput(port))</span><br><span class="line">    out=ofp_parser.OFPPacketOut(datapath=datapath,buffer_id=msg.buffer_id,in_port=in_port,actions=actions,data=msg.data) <span class="comment">#向出端口发送的数据包内容</span></span><br><span class="line">    datapath.send_msg(out)<span class="comment">#发送数据包</span></span><br></pre></td></tr></table></figure><h3 id="库函数说明-2">库函数说明</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ryu.base <span class="keyword">import</span> app_manager <span class="comment">#ryu.base 是ryu 的管理中心，起到加载各种ryu 应用、为ryu应用提供环境和提供不同ryu 应用之间的连接的作用，从ryu.base 里面引用的app_manager 类里面包含管理所有ryu 程序的方法，包括启动ryu、加载ryu 应用和关闭ryu 等</span></span><br><span class="line"><span class="keyword">from</span> ryu.topology.api <span class="keyword">import</span> get_link,get_switch</span><br><span class="line"><span class="keyword">from</span> ryu.base <span class="keyword">import</span> app_manager</span><br><span class="line"><span class="keyword">from</span> ryu.ofproto <span class="keyword">import</span> ofproto_v1_3 <span class="comment">#引入ofproto_v1_3 协议，该协议是本ryu 控制器遵守的协议</span></span><br><span class="line"><span class="keyword">from</span> ryu.controller.handler <span class="keyword">import</span> set_ev_cls</span><br><span class="line"><span class="keyword">from</span> ryu.controller.handler <span class="keyword">import</span> CONFIG_DISPATCHER,MAIN_DISPATCHER <span class="comment">#引入了一个事件监视器，下面的语句引入了两种状态config 为配置状态，main 为运行状态</span></span><br><span class="line"><span class="keyword">from</span> ryu.lib.packet <span class="keyword">import</span> packet <span class="comment">#将收到的数据包里信息转换成特定格式</span></span><br><span class="line"><span class="keyword">from</span> ryu.lib.packet <span class="keyword">import</span> ethernet <span class="comment">#引入ethernet 类，将数据包的MAC 地址组织成特定格式</span></span><br><span class="line"><span class="keyword">from</span> ryu.topology <span class="keyword">import</span> event <span class="comment">#event 里面定义了后续使用的EventSwitchEnter 等类</span></span><br><span class="line"><span class="keyword">from</span> ryu.topology.api <span class="keyword">import</span> get_switch,get_link <span class="comment">#用于实现交换机和控制器的连接和通过LLDP协议读取交换机的拓扑</span></span><br><span class="line"><span class="comment">#import networkx as nx</span></span><br><span class="line"><span class="keyword">from</span> ryu.controller <span class="keyword">import</span> ofp_event <span class="comment">#ofp_event 类包含了之后需要使用的msg 和msg.datapath方法，前一个用于读取信息，后一个用于读取数据包的来自哪一个交换机</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> string</span><br></pre></td></tr></table></figure><h2 id="kruskal-算法运用">kruskal 算法运用</h2><h3 id="概述">概述</h3><p>在基于SDN 的实际网络拓扑中，每个交换机和所属主机可以看成一个顶点，各交换机相连接的信道看成一条边，其权重则为每条信道的时延。对于交换机，还有一个重要的属性——端口，即交换机连接其他网络设备的接口。为了洪泛简便，我们采用逆向kruskal 算法的原理，即找出最小生成树不在的端口，记为banport。只要数据包在banport 停止传输，只在允许通行的端口传输，那么一定不会成环，必然是在最小生成树上。</p><h3 id="变量说明-2">变量说明</h3><ul><li><p>src_dpid：源交换机id</p></li><li><p>dst_dpid:目的交换机id</p></li><li><p>Links：边集，特点：双向；包含源交换机id 和端口，目的交换机id 和端口，权重</p></li></ul><h3 id="代码实现-3">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">links.sort(key = <span class="keyword">lambda</span> x:x[<span class="string">&#x27;delay&#x27;</span>]) <span class="comment">#升序排序</span></span><br></pre></td></tr></table></figure><p>对于排序，我们使用python 自带的对列表的排序，将关键字设为delay,即按时延为权重升序排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#成环检测（UNION-FIND 思想）</span></span><br><span class="line">group = [[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(self.switches)+<span class="number">1</span>)] <span class="comment">#创建包含交换机数量子集合的集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">    <span class="keyword">if</span> link[<span class="string">&#x27;src_dpid&#x27;</span>]&lt;link[<span class="string">&#x27;dst_dpid&#x27;</span>]: <span class="comment">#遍历每一条边，且每一条边只遍历一次</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(group)):</span><br><span class="line">            <span class="keyword">if</span> link[<span class="string">&quot;dst_dpid&quot;</span>] <span class="keyword">in</span> group[i]:</span><br><span class="line">                m = i</span><br><span class="line">            <span class="keyword">if</span> link[<span class="string">&quot;src_dpid&quot;</span>] <span class="keyword">in</span> group[i]:</span><br><span class="line">                n = i <span class="comment">#将源交换机和目的交换机所在的集合序号记录在m,n 中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#如果m,n 相等，即该边不是一条割边，则将其端口禁掉</span></span><br><span class="line">        <span class="keyword">if</span> m == n <span class="keyword">and</span> link[<span class="string">&#x27;dst_port_no&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> banport[link[<span class="string">&quot;dst_dpid&quot;</span>]]:</span><br><span class="line">            banport[link[<span class="string">&quot;dst_dpid&quot;</span>]].append(link[<span class="string">&#x27;dst_port_no&#x27;</span>])</span><br><span class="line">            banport[link[<span class="string">&quot;src_dpid&quot;</span>]].append(link[<span class="string">&#x27;src_port_no&#x27;</span>])</span><br><span class="line">        <span class="comment">#如果不相等，则将两边端点并入一个集合</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            group[m] = group[m] + group[n]</span><br><span class="line">            group[n] = []</span><br></pre></td></tr></table></figure><p>对于成环检测的实现，我们采用UNION-FIND 的思想，每个集合的leader 即为集合的序号，如果源交换机和目的交换机的leader 的相同，说明二者在同一个集合，即会成环，则将二者连接的两个端口禁掉；若二者的leader 不同，说明二者不会成环，则更新集合，将二者集合合并。由于边集是升序排列，因此遍历时也从小到大遍历，当最终所有交换机都在同一集合中时，说明最小生成树已经形成。</p><h1 id="成果展示-3">成果展示</h1><h2 id="拓扑构建-2">拓扑构建</h2><p>（一）mininet侧</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103223056717.png" alt="mininet侧拓扑信息"></p><p>（二）RYU侧</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103223116585.png" alt="RYU侧拓扑信息"></p><p>（三）拓扑可视化</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103223133759.png" alt="拓扑示意图"></p><h2 id="kruskal-算法实现">kruskal 算法实现</h2><p>（一）禁止端口</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103223155252.png" alt="禁止端口信息"></p><p>（二）最小生成树可视化</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103223212865.png" alt="最小生成树示意图"></p><h2 id="连通性测试">连通性测试</h2><p>（一）随机ping测试</p><p>mininet侧，可以看到花费了0.499毫秒ping通</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103223235154.png" alt="mininet侧打印信息"></p><p>RYU侧，可以看到逐渐从2号主机沿着最小生成树扩展到达19号</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103223250541.png" alt="RYU侧打印信息"></p><p>（二）pingall测试</p><p>下图可见全部ping通，连通性良好。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103223312822.png" alt="全部ping通图"></p>]]></content>
      
      
      <categories>
          
          <category> 实验实操 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> SDN </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mininet拓扑搭建</title>
      <link href="/2a47880c/"/>
      <url>/2a47880c/</url>
      
        <content type="html"><![CDATA[<h1 id="基于python脚本的拓扑搭建">基于python脚本的拓扑搭建</h1><p>Mininet这个网络仿真软件支持使用python脚本建立拓扑，我们只需要预先写好存储拓扑信息的文件和拓扑建立逻辑（这是两个文件）就可以一键运行，在拓扑规模大、链路数量多的情况下（实验用的拓扑就挺大）能极大提高仿真效率，且不容易出现错误搭建拓扑的情况（比如少拉了一根线，拉错了一根线之类的）。</p><h1 id="拓扑搭建逻辑">拓扑搭建逻辑</h1><p>mininet自带有一个拓扑搭建脚本，我们先来看一下拓扑搭建逻辑。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103221333212.png" alt="拓扑搭建逻辑"></p><p>你可以在上图红色框线所示的文件路径找到系统里的拓扑搭建脚本，里面的代码就只有一页这么多（才34行，简单得不能再简单了）。</p><ul><li>绿色框线里的内容是这个 python 脚本成功运行需要的一些库，一般不需要改动（当然了，如果你想给这个脚本增加一些新功能，相应的库也要加进来，比如让他能读取json文件，就需要添加读取json文件需要的库，具体是什么，可以自行搜索~）。</li><li>橙色框线的第一行代码读取拓扑信息，注意，此处读取的路径使用了相对路径（./表示当前脚本文件所在的路径），使用绝对路径也是可以的，第15行代码读取拓扑信息文件的第一行，即下图的第一行。下图的第一行数据分别表示这个拓扑里的主机数量（3）和交换机数量（7）</li><li>有了这两个信息，上图的紫色框线开始向 mininet 网络中添加主机（line18）和交换机（line21），然后上图的程序继续读取拓扑文件的其他行，用于添加设备之间的链路（上图蓝色框线部分）。</li><li>最后，上图白色框线的部分相当于为这个脚本创建的网络起了一个名字，你可以做定制化的改动，比如改成你自己的名字，但是一定要记住自己改成了什么，后面实际运行时需要用到。</li></ul><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103221353216.png" alt="拓扑信息"></p><p>接下来，我们看看拓扑信息文件到底存了什么。你可以在上图中红色框线所示的路径下（其实就是拓扑搭建脚本所在的路径）找到存储拓扑信息的文件（topoinfo.txt）。打开以后其实也就14行，第一行的意思刚刚已经解释过了，仔细观察，你会发现，之后的每一行都对应了要搭建的拓扑里面的一条边。这并不是实验要用的那个拓扑的信息，而是下图所示的拓扑。到这里，我们可以回到第一幅图的蓝色框线部分了，是不是能理解这部分代码在干什么了。</p><p><img src="https://cdn.jsdelivr.net/gh/asa-pic/pic_1/img/image-20220721213138963.png" alt="示例拓扑"></p><h1 id="json文件描述拓扑">json文件描述拓扑</h1><p>这一部分，还有一点补充，第二幅图的文件用最简单的文件格式（实际就是txt）去描述了一个网络的拓扑信息，但并不一定最好用，例如当网络拓扑比较大，且需要给链路附加诸如时延和带宽等属性的时候，文件解析（解析就是指从文件中去找想要的某些信息）起来不太方便，比如DFS、Dijkstra需要获取拓扑中链路的时延属性，最大流需要获取链路的带宽，有时候需要全部链路的这些信息，有时候又只需要某条链路的信息，那从这种txt中去找相关信息就比较麻烦。万幸的是，不论是拓扑搭建脚本、还是ryu控制器的控制逻辑，都是用python写的，python是可以通过调库将json文件读取成字典的（如果你还不知道python字典是什么，自觉去面壁10分钟），到这，你悟了吗？</p><h1 id="运行拓扑">运行拓扑</h1><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103221409328.png" alt="Mininet运行自定拓扑"></p><p>现在我们正式开始运行用户自定义的脚本（革命快要成功了，再坚持一下），上图中橙色框线里橙色横线处的代码表示要自定义脚本，其后紧跟的就是我们拓扑建立逻辑的脚本文件（严格讲应该是脚本文件所在的路径再加文件名，只是这里执行该命令的位置就是文件所在的目录），绿色框线里的内容就相当于这个建立的拓扑叫什么名字了，还记得最开始的图里里白色框线里的东西吗，就是那个玩意儿，蓝色框线的命令告诉mininet这个软件，我这个建起来的拓扑需要连接到一个远程的控制器，这个控制器的ip是127.0.0.1，端口号是6653（openflow协议的默认端口号），最后紫色框线的配置告诉mininet：你给我按照添加主机的顺序，从00:00:00:00:00:01开始依次分配物理地址（注意物理地址用的是十六进制，00:00:00:00:00:10不是10而是16，切记，切记），如果你不加这条命令，每个添加的主机的mac地址就是随机分配的，没有规律（在之前给的b站上的视频里面，作者也提到过这个）。输入密码后，Mininet就开始建立拓扑了，黄色框线内显示了mininet建立拓扑的过程，先添加了三个主机、然后是7个交换机、最后是13条边（注意是双向边）。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103221429940.png" alt="结束运行"></p><p>Mininet的命令状态下输入exit（图5红色框线）会退出，节点和链路都依次停止，蓝色框线里显示mininet停止了多少条链路。</p><p>这里还要注意一个问题，对mininet来说，一共增加了13条双向边，其中有三条是主机和交换机之间的链路，剩余10条才是交换机和交换机之间的边，对控制器来说，他只能观测到交换机和交换机之间的边（也就是他能获取到20条边，因为这里的10条边是双向边，所以ryu控制器按两个方向各存一条），而看不到主机和交换机之间的边，原因在于控制器发现拓扑用的是LLDP协议，且控制器控制的是交换机，只有交换机会向控制器请求指示，而在LLDP链路发现过程中发送到主机的测试包会被主机直接丢掉，不存在主机也将这个数据包向上发给控制器的可能，所以LLDP检测不到主机和交换机之间的链路。）</p><blockquote><p>还有一个问题需要解释，你可能都没发现这个问题：图3中交换机的端口号是怎么确定的？Mininet在给设备端口分配编号的时候也是从1开始（不同设备之间的端口编号是独立的），按照设备接口上连接链路的顺序，依次编号。举个栗子：按照图2的拓扑文件，与交换机1有关的链路的添加顺序是h1-s1、s1-s2、s1-s4，所以s1相对应的端口也就被分别编号1、2、3。也就是说，这个端口编号在你给定了拓扑信息和搭建拓扑的脚本逻辑的时候，命运已定。</p></blockquote><p>至此，拓扑搭建的所有内容已经介绍完了，回过头来再看，建立一个拓扑的信息文本其实要比搭建拓扑的逻辑脚本麻烦的多，毕竟后者就几个for的事，前者那可真是实打实地要一条条加呀，就拿之前给的那个24个节点地拓扑来说，交换机到交换机的边有43条（ryu控制器的get_link()拉取的信息中包含的链路数量翻倍），主机到交换机的边有24条，合起来67条（你可以用我上面介绍的办法看看他是不是真的是67条），这你要是拿miniedit拉可得拉多久，想想就头秃。</p><h1 id="实验拓扑">实验拓扑</h1><p>为了防止你头秃，这里破例提供两个已建好的拓扑信息的json文件（注意，前面讲解的拓扑搭建代码不能直接处理json文件，你还需要做出相应的调整），如果你愿意，可以直接用我提供的json文件去实现后续的逻辑。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;host_no&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;switch_no&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s1&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h2&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s2&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h3&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s3&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h4&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s4&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h5&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s5&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h6&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s6&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h7&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s7&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s2&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s4&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">9</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s2&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s3&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">14</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s2&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s5&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">22</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s3&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s6&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">19</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s4&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s5&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">16</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s4&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s6&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">21</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s5&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s6&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s5&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s7&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s6&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s7&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">11</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>上面代码中一共7个交换机，拓扑图如下，每个交换机下挂一个主机，图中只画出一个主机（h3），但你需要知道还有6个主机并没有画出来，主机和交换机之间的链路属性都按图6中的蓝色数值进行了设置，交换机之间的链路属性也按图中标注进行了设置。</p><p>所有链路的排列顺序（正常来说就是后面搭建拓扑的脚本添加链路的顺序，也就是说）如下：首先是主机和交换机之间的链路，按主机编号增序添加；然后是交换机和交换机之间的链路，按交换机编号增序依次添加交换机的所有邻居链路，对邻居的要求是其编号比自己的大，在满足这个条件的邻居里，先添加邻居编号小的链路（这里用文字描述有点绕，没看明白的话多看几次）。按这个规则形成的拓扑中，交换机的各个接口编号以较小的红色数字标注在了对应位置。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103221453635.png" alt="image-20230103221453635"></p><hr><p>类似的，下面给定实验拓扑，只是相比上图，下图追加了按这个文件建立的拓扑的交换机接口编号信息。代码中链路的顺序规则同上。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;host_no&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;switch_no&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s1&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h2&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s2&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h3&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s3&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h4&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s4&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h5&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s5&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h6&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s6&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h7&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s7&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h8&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s8&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h9&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s9&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h10&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s10&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h11&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s11&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h12&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s12&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h13&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s13&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h14&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s14&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h15&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s15&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h16&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s16&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h17&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s17&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h18&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s18&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h19&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s19&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h20&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s20&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h21&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s21&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h22&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s22&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h23&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s23&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;h24&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s24&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s2&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">19</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s7&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">21</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s2&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s3&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">13</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s2&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s7&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">9</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s3&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s4&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s3&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s5&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">30</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s3&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s6&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s4&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s5&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">11</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s4&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s8&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">15</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s5&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s6&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">16</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s6&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s7&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">9</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s6&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s8&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">29</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s6&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s9&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">25</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s7&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s9&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s7&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s10&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">27</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s8&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s14&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s9&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s10&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">26</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">17</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s9&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s12&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">15</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s9&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s14&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">14</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s10&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s11&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s10&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s12&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s10&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s18&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s11&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s17&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s11&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s19&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">13</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s12&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s13&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">13</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s12&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s17&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">22</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s13&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s14&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">19</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s13&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s15&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">11</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s13&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s16&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s14&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s15&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s15&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s24&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">16</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s16&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s17&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s16&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s21&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">9</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s16&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s22&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">12</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s16&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s24&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s17&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s20&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">21</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s17&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s21&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s18&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s19&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">15</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s19&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s20&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s20&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s21&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">9</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s21&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s22&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">14</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s22&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s23&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vertexs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s23&quot;</span><span class="punctuation">,</span> <span class="string">&quot;s24&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;delay&quot;</span><span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bw&quot;</span><span class="punctuation">:</span> <span class="number">23</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103221518431.png" alt="24节点拓扑图"></p>]]></content>
      
      
      <categories>
          
          <category> 实验实操 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDN </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验环境搭建</title>
      <link href="/14618721/"/>
      <url>/14618721/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu系统">Ubuntu系统</h1><p>ubuntu18.04是一个Linux内核的系统，如果你是Windows用户，不习惯是正常现象。在这里，应用更多是要通过命令行或者说终端去运行，而不是双击快捷方式，也许你不熟悉常用命令（cd、ls、sudo等），没关系，这种帖子网上很容易就能搜到，是时候自学点东西了。</p><p>另外虚拟机中还需要有RYU控制器和mininet这两个应用。</p><hr><h1 id="RYU控制器">RYU控制器</h1><p>RYU 是一个基于组件的完全用python 实现的开源框架，组件包括OpenFlow 协议支持、时间管理、消息机制、内存状态管理、应用程序管理、基础设施服务和一系列可用的库，此外，还提供一些应用程序和服务，例如侦测（Snort）、二层交换机、GRE 隧道抽象、VRRP、拓扑和统计服务等。</p><p>打开终端输入<em>ryu-manager</em>（区分大小写）按下回车，如下显示则说明ryu控制器可以正常运行。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103221548418.png" alt="开启ryu控制器示意图"></p><p>此外还可以尝试运行ryu自带的一些应用，进入到ryu的app目录下，输入：<em>ryu-manager</em> 空格 应用名（即python脚本文件名称，需要加后缀，见截图），若运行不报错则说明控制器工作正常。Mininet的测试类似，相关命令大家百度，这里不多说。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103221608850.png" alt="运行ryu应用示意图"></p><hr><h1 id="mininet">mininet</h1><p>Mininet 是一个网络模拟器，可以在Linux 内核上模拟出多个主机、交换机、路由器和链路，所有的组件都通过虚拟以太网进行连接，并配置了net-10 私有IP 地址，支持非常复杂的拓扑结构，可以近乎任意大小和顺序，基于它的网络的性能常常非常接近真实网络的性能。</p><p>Mininet 创建topo 的方式有很多：命令行创建网络拓扑、自定义拓扑脚本、可视<br>化界面创建拓扑。</p><p>我们同样可以建立mininet自带的一些拓扑，如下图所示。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103221626812.png" alt="建立拓扑示意图"></p><hr><h1 id="需要学的东西">需要学的东西</h1><p>Ryu的应用和mininet的拓扑脚本都是使用Python编写，也许你没有学过Python，但相信我，Python代码至少在编写的时候要比C语言人性化得多。</p><p>Mininet这边，需要掌握的东西相对较少，熟悉拓扑脚本文件的编写差不多就足够了，</p><p>Ryu控制器方面，对初学者来说，先看些视频、学习官方文档才是王道，全凭感觉是肯定不行的，那样你可能连前面的应用都跑不起来。<a href="https://www.bilibili.com/video/BV1VJ41117vJ?p=15&amp;vd_source=595ecb634d520a0458c323613451f9a6">这些视频</a>已经是我目前找到的讲得最最清楚的教程了（画质烂，但能凑合看），可以看看，之后再参考下Ryubook（群文件里的参考书文件夹中Ryubook-en）和在线的<a href="https://ryu.readthedocs.io/en/latest/writing_ryu_app.html">官方文档</a>，就差不多了。</p><p>要做完后续几个实验，至少需要：</p><ol><li><span class='p gray'>熟悉</span>Python的基础语法</li><li><span class='p yellow'>会用</span>Linux的常用命令</li><li><span class='p green'>了解</span>Mininet的拓扑创建逻辑</li><li><span class='p cyan'>清楚</span>Ryu的事件处理流程</li><li><span class='p red'>掌握</span>实验所需的算法理论</li></ol>]]></content>
      
      
      <categories>
          
          <category> 实验实操 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDN </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动驾驶系统分层模型设计</title>
      <link href="/d3e09831/"/>
      <url>/d3e09831/</url>
      
        <content type="html"><![CDATA[<h1 id="任务概览">任务概览</h1><h2 id="主题">主题</h2><p>利用网络分层模型的要素，参考功能分层依据，设计一个分层系统，或者用分层模型描述一个系统。</p><h2 id="目标">目标</h2><ul><li><p>体会分层模型的分层方法和要素</p></li><li><p>体会垂直分层，纵向服务与被服务关系，横向协议合作关系在分层模型中的设计方法</p></li></ul><hr><h1 id="问题剖析">问题剖析</h1><h2 id="自动驾驶系统简介">自动驾驶系统简介</h2><p>自动驾驶系统系统采用先进的通信、计算机、网络和控制技术，对汽车实现实时、连续控制。采用现代通信手段，直接面对汽车，可实现车地间的双向数据通信，传输速率快，信息量大，后续追踪汽车和控制中心可以及时获知前汽车车的确切位置，使得运行管理更加灵活，控制更为有效，更加适应汽车自动驾驶的需求。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103221655745.png" alt="自动驾驶示意图"></p><h2 id="需求分析-4">需求分析</h2><p>自动驾驶汽车需要依靠人工智能、视觉计算、雷达、监控装置和全球定位系统协同合作，让电脑可以在没有任何人类主动的操作下，自动安全地操作机动车辆。最终目标为通过该系统实现完全自动化，即可无人驾驶车辆、允许车内所有乘员从事其他活动且无需进行监控的系统。</p><p>对分层的设计需要实现：</p><ul><li><p>垂直分层，下层为上层提供服务</p></li><li><p>层与层间界限清晰，尽可能独立</p></li><li><p>层内功能模块按一定的规则交互</p></li></ul><hr><h1 id="分层设计">分层设计</h1><p>根据系统内容及需求，我们将自动驾驶系统分为四层模型：</p><ul><li><p>交互层：根据系统做出的决策，替代人类控制车辆正常工作</p></li><li><p>决策层：处理网络层传来的信息并做出决策判断，判定相应的控制策略</p></li><li><p>网络层：识别和传递感知层获取的信息</p></li><li><p>物理层：信息收集与控制</p></li></ul><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103222125258.png" alt="自动驾驶系统分层设计图"></p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103222221643.png" alt="image-20230103222221643"></p><hr><h1 id="层次分析">层次分析</h1><h2 id="物理层">物理层</h2><h3 id="功能">功能</h3><p>物理层主要负责数据采集以及自动驾驶汽车操作的硬件行为控制。采集的信息包括自信息和互信息。</p><p>自信息：车速度、加速度、刹车状态、方向盘转角、GPS位置、本车类型、载员数、载物重</p><p>互信息（暂时不考虑存在路人干扰的情况）：</p><ul><li><p>与周围车辆1的距离，车辆1在本车的方位；</p></li><li><p>与周围车辆2的距离，车辆2在本车的方位；</p></li><li><p>……</p></li><li><p>与周围车辆n的距离，车辆n在本车的方位。</p></li></ul><h3 id="物理层-网络层数据传输格式">物理层-网络层数据传输格式</h3><p>数据内容与格式（data）：</p><div class="note modern"><p>#车仪表盘显示速度#加速度#刹车状态#方向盘转角#GPS提供的纬度数据#GPS提供的经度数据#GPS所得车速#GPS所测车航向#车型号#载员数#载物重#周围车辆数#车辆1与本车距离#车辆1在本车的方位#…#车辆n与本车距离#车辆n与本车的方位#</p></div><p>例：</p><div class="note modern"><p>#060.00#-01.500#50#+030#N04546.4089#E10246.1089#055.00#30#BJ2020S#2#250#1#90#</p></div><details class="folding-tag" cyan><summary> 参数标准设计 </summary>              <div class='content'>              <ul><li><p><strong>车仪表盘显示速度</strong>：整数位为3位，小数保留2位，单位为 km/h；</p></li><li><p><strong>加速度</strong>：符号位（‘+’‘-’）一位，整数位2位，小数位3位，单位为 m/s2；</p></li><li><p><strong>刹车状态</strong>：三位数表示，取值为0~100，表示刹车的下压程度，0表示未踩刹车，100表示刹车踩死，下压程度100%；</p></li><li><p><strong>方向盘转角</strong>：一位符号位（‘+’‘-’），三位数字位，符号位为正，表示顺时针转动方向盘，反之为逆时针，数字位表示转动角度；</p></li><li><p><strong>GPS提供的纬度数据</strong>：一个符号位（‘N’‘S’），五位整数位，四位小数位，dddmm.mmmm(度分)格式(前面的0也将被传输)；</p></li></ul><blockquote><p>经纬度计算规则：如接收到的纬度是4546.4089</p><p><em>4546.40891/100=45.464089**可以直接读出45度, 4546.40891-45*100=46.4089, 可以直接读出46分，46.4089–46 =0.4089*60=24.5346读出24秒, 所以纬度是：45度46分24秒</em></p></blockquote><ul><li><p><strong>GPS提供的经度数据</strong>：一个符号位（‘E’‘W’），数字位dddmm.mmmm，计算方法同纬度的计算方法；</p></li><li><p><strong>GPS所得车速</strong>：由于车仪表盘的速度和GPS所测的速度是有所不同的，根据实际的需要，所以准备两份数据，格式同车仪表盘的速度传输格式；</p></li><li><p><strong>GPS所测车航向</strong>：偏离正北的角度，数据范围0~ 360，0表示正北方向，90正东和180表示正南方向，270正西；</p></li><li><p><strong>车型号</strong>：根据车的不同型号提供不同的数据，无特定格式；</p></li><li><p><strong>载员数</strong>：数据范围0~N，N为车限制载人数，1，为只有司机一人；</p></li><li><p><strong>载物重</strong>：载物重根据车上的测重系统所得，更具车型不同有不同的计算方法和传输格式，单位为kg；</p></li><li><p><strong>周围车辆数</strong>：数字N，范围为 N&gt;=0；</p></li><li><p><strong>车辆1与本车距离</strong>：直线相对距离，单位m；</p></li><li><p><strong>车辆1在本车的方位</strong>：相对方位，以车正对方向为0度，俯视，顺时针扫描，记录转动的角度，范围0~360度，精确到小数后两位；</p></li><li><p><strong>车辆n与本车距离</strong>：同车辆1；</p></li><li><p><strong>车辆n与本车的方位</strong>：同车辆1。</p></li></ul>              </div>            </details><h3 id="物理层和网络层的接口设计和数据文件的封装">物理层和网络层的接口设计和数据文件的封装</h3><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103222238334.png" alt="物理层-网络层数据格式示意图"></p><details class="folding-tag" red><summary> 参数说明 </summary>              <div class='content'>              <ul><li><p>flg：标志位，101，表示上传数据，由物理层传送到网络层，来自采集的信息；102表示下载数据，由决策层传送到网络层，再到物理层的数据，系统将根据这些数据对车辆的下一步对对应参数做出调整；</p></li><li><p>Serial number：序列号，根据数据采集产生的顺序形成的序列号；</p></li><li><p>Time：数据采集时间；</p></li><li><p>total length：首部和数据的总长度；</p></li><li><p>source address：源地址；</p></li><li><p>destination address：目的地址；</p></li><li><p>data：采集的需传输的数据。</p></li></ul>              </div>            </details><h3 id="数据包解封">数据包解封</h3><p>flg=102的数据包来自网络，数据内容是决策层对本车下一步状态的控制，解封时，验证源地址是否为本车网络层，目的地址是否为物理层，再通过total length检查数据完整性，最后取出数据，将数据作于于对应位置。</p><h2 id="网络层">网络层</h2><h3 id="功能-2">功能</h3><p>网络层实现数据的存储、查询、分析，以及对等层的数据交换，数据交换过程中的加密功能。</p><h3 id="加密协议">加密协议</h3><p>加密协议是用于在数据的传输、交换过程中通过加密技术建立安全通信以保障驾驶安全以及用户信息安全的协议。</p><p>自动驾驶的应用会使得更多的数据将会被使用、传输，因此自动驾驶数据的安全性需要极其关注。需要避免汽车收集数据的恶意篡改导致操作失误，以及用户隐私的泄露（如家的地理位置等等）。所以我们将采用加密协议来对数据进行加密处理，实现隐私数据的安全传输。</p><p>该协议可以对传输的隐私数据进行对称密钥加密，在保证一定的传输速度的同时，提供一定的安全性。</p><h3 id="网络层-网络层之间的数据包格式">网络层-网络层之间的数据包格式</h3><p>为了实现统一性和整体性设计原则，我们把网络层数据包格式和封装的设计与物理层的设计类似，但其传输的数据内容和意义将有变化。如下图所示。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103222300038.png" alt="网络层-网络层数据格式示意图"></p><details class="folding-tag" red><summary> 参数说明 </summary>              <div class='content'>              <ul><li><p>flg：这个传输包flg=203，表示这个包属于网络层之间的传输的数据包。</p></li><li><p>Serial number和Time位与原包相同，不发生变化。</p></li><li><p>total length：表示这个包首部和数据的总长度。</p></li><li><p>source address：本车网络层的地址；</p></li><li><p>destination address: 邻车网络层地址；</p></li><li><p>data：数据内容源于对flg=10的数据包解封，但只传输一部分数据，这部分数据包含如下：</p></li></ul><div class="note modern"><p>#车仪表盘显示速度#加速度#刹车状态#方向盘转角#车型号#周围车辆数#车辆1与本车距离#车辆1在本车的方位#…#车辆n与本车距离#车辆n与本车的方位#</p></div>              </div>            </details><h3 id="网络层与决策层之间的数据封装格式">网络层与决策层之间的数据封装格式</h3><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103222319354.png" alt="网络层-决策层数据格式示意图"></p><details class="folding-tag" red><summary> 参数说明 </summary>              <div class='content'>              <ul><li><p>flg ：flg =201，表示该数据是由网络层传送至决策层；flg=202，表示该数据是由网络层传送至网络层的数据；</p></li><li><p>Serial number ：序列号，根据数据包生成顺序形成的序列号；</p></li><li><p>Time ：数据包生成时间；</p></li><li><p>total length ：首部和数据的总长度；</p></li><li><p>source address ；源地址，本车网络层地址或决策层地址；</p></li><li><p>destination address ：目的地址，本车网络层地址或决策层地址；</p></li><li><p>flg1/flg2：由于网络层向决策层传输数据包含了本车的数据和邻车的数据，而决策层向网络层的下行数据包只包含对本车下一步决策的数据，不再包含邻车的数据，所以接下来这几个数据会由于flg=201或flg=202不同而不同：</p><blockquote><ul><li><p>flg=201时，flg1=1，flg2=1，表示这是个上行数据包，data1、data2都有数据，其中data1是本车的数据，data2是邻车的数据；</p></li><li><p>flg=202时，flg=1，flg2=0，表示这是个下行数据包，仅data1有数据；</p></li></ul></blockquote></li><li><p>Data 1 acquisition time/Data 2 acquisition time：数据获取或生成时间，这里指最开始数据的采集时间，或者针对flg=202时，指的是决策生成时间；</p></li><li><p>Length of the data 1/Length of the data 2：表示data1/data2的数据长度。</p></li></ul>              </div>            </details><h3 id="数据包解封-2">数据包解封</h3><ol><li><strong>对flg=102的数据包进行解封</strong></li></ol><p>flg=102的数据是从物理层传送到本层网络层的，解封检查源地址与目标地址，源地址应该是本层，目标地址为本层（网络层）的地址，若不满足条件，则丢弃该数据，最后经过total length验证数据完整性，取出数据（data），以便分析时使用。</p><ol start="2"><li><strong>对flg=202的数据包进行解封</strong></li></ol><p>flg=202的数据包是由决策层传输至网络层的，数据包最终作用于物理层，用于将决策层对汽车的下一步状态的控制，解封检查源地址是否为本车决策层地址，目的地址是否为本车网络层地址，再用total length和Length of the data 1验证数据完整性，最后取出数据。</p><ol start="3"><li><strong>对flg=203的数据包进行解封</strong></li></ol><p>flg =203的数据是网络层之间传输的，所以对收到的flg=2的数据包，源地址是临车的网络层地址，目的地址是本车的网络层地址，然后通过total length检查数据完整性，最后取出数据。</p><h2 id="决策层">决策层</h2><h3 id="功能-3">功能</h3><p>决策层通过网络层提供的数据来对汽车下一步行为的决策，同时实现车与车之间决策信息的交换、计算与冲突解决，最终将关键的决策信息上传于交互层。</p><h3 id="差错控制协议">差错控制协议</h3><p>差错控制协议用于作为自动驾驶系统的网络层中，车辆之间数据交换的可靠传输协议。</p><p>在自动驾驶系统中，提高收集数据的准确性可以保证自动驾驶的安全性。因此数据的准确获取与传输至关重要。在网络层，不同的车辆间将会互相进行数据的交换，而车辆所获取的数据可能存在错误。因此，利用差错控制协议比对交换的数据，来控制可能出现的数据错误而导致的决策层误判。</p><p>在比对数据时，若发现交换的数据不同（误差不可接受），说明可能发生数据的错误，则要求物理层在合理时间范围内重新收集并传输数据，进行再次比对；若超过时间范围，则不向物理层请求重传而使用原始数据。</p><p>例：在网络层数据的初步分析中，会进行数据对比（两辆车的基础数据进行对比），如A车测得B车在东南方向50m，则B车应该检测到A车在自己西北50m，但B车实际传入的数据是A车在西北100m处，这时候网络层通过这个协议判断出原始数据存在较大的误差，这会影响决策层的决策，所以网络层丢弃这份数据，发送指令让物理层重新采集数据，我们称之为差错控制协议。</p><h3 id="决策选择协议">决策选择协议</h3><p>决策选择协议是从多个决策中选出最优决策以做出最优操作行为，并避免与其他自动驾驶车辆产生决策冲突的协议。</p><p>在车道上一般会有多辆车在行驶，如果车辆根据获取的数据采取了相互冲突的行驶行为，就很有可能会发生碰撞等意外情况，造成安全事故。所以通过设计决策选择协议，在多个决策当中选择车辆间互不冲突的决策达到规避事故的目的，并顺利完成行驶。</p><p>决策层根据网络层信息做出多个决策，并预先将每个决策通过算法计算出执行决策后的行车数据。进一步，交换比对车辆间的“决策后行车数据”，判断出执行某一决策后是否会产生车辆间的行驶冲突，会则舍弃该决策，不会则选择该决策。</p><h3 id="决策层数据包">决策层数据包</h3><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103222338460.png" alt="决策层数据包示意图"></p><details class="folding-tag" red><summary> 参数说明 </summary>              <div class='content'>              <p>flg说明：</p><ul><li><p>flg=301，表示决策层向交互层发送的数据包，这里的数据包内容包含有：汽车当前状态、下一步决策，这个数据包的意义就是将这些参数外显给用户；</p></li><li><p>flg=302，表示交互层向决策层发送的数据包，这个数据包传输的是用户下达的指令，如更改目的地、减速等指令，决策层处理这些指令，并转换格式编码，传输给执行的物理层；</p></li><li><p>flg=303，表示决策层之间传输的数据包，为了确保两辆或多辆车之间的决策不会冲突，说以，车辆之间的决策需要共享，若存在冲突，则根据协议需要更改；</p></li></ul><p>Serial number、Time、total length同上说明；</p>              </div>            </details><h3 id="数据包解封-3">数据包解封</h3><p>对flg=201，数据进行解封：数据来源于网络层，包含了本车和邻近车量的状态数据，解封时，验证源地址、目的地址、数据长度。</p><h2 id="交互层">交互层</h2><h3 id="功能-4">功能</h3><p>交互层将决策层的决策信息呈现给用户，并实现不同车辆人员之间的信息交互（包括通话、娱乐等）。</p><p>第四层主要是人机之间的交互，还有就是两辆车上的用户通过交互层进行互动，这些完全可以引用和参考其他协议的实现，如HTTP、XMPP等，因此这里不再赘述。</p><hr><h1 id="参考资料-2">参考资料</h1><ul><li><p>汤珺雅,李莉,刘凌,汪伟,王文明,谢勇波 .  基于全时空数据的驾驶行为模型设计 . [2017]</p></li><li><p>韩双双,王迎春,要婷婷,曹东璞,王飞跃 . 平行智能车:基于CPSS的网联自动驾驶汽车 . [2017]</p></li><li><p>陈海明,崔莉,谢开斌 . 物联网体系结构与实现方法的比较研究 . [2013]</p></li><li><p>魏歌 . 不同物联网架构的分层标准的研究 . [2015]</p></li><li><p>彭赟,刘志雄,刘晓莉,孙云莲,査晓明,饶凌平 . TCP/IP网络体系结构分层研究 . [2014]</p></li><li><p>K. M. Alam, M. Saini and A. E. Saddik  . Toward Social Internet of Vehicles: Concept, Architecture, and Applications .[2015]</p></li><li><p>彭锴 . 网络安全分层评价体系模型设计 . [2016]</p></li></ul><blockquote><p>鸣谢：琦琦子、林林子</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 顶层设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于苹果电脑发展的案例分析</title>
      <link href="/dc8e6bf2/"/>
      <url>/dc8e6bf2/</url>
      
        <content type="html"><![CDATA[<h1 id="摘要">摘要</h1><p><strong>本文简要分析苹果电脑的发展，并从中探寻其成功的原因。</strong> 从乔布斯决心要搞个人电脑开始，到一手创办苹果公司，看似势如破竹，但也不乏心酸和坎坷，比如第一款提供图形化用户接口（GUI）的商用电脑Lisa电脑因其兼容性差，价格昂贵而夭折。 但是苹果电脑在技术和外形设计方面的创新能力以及可靠的产品品质，是很多人无法实现的。在30多年的发展和进化中，苹果重新定义了技术创新的内涵，并在结合内、外部研发力量的同时，将技术创新与设计创新、营销创新、模式创新等创新方式有效结合起来，确保技术研发的高效性。</p><p>与此同时，苹果电脑继承了苹果公司“酷”的风格，并重新定义“酷”，引领“酷”的潮流。苹果公司利用设计增加独一无二的人类感觉，让技术产品更通人性，让人们面对的不再是惹人生气的冰冷机器，而是生动有趣的“小精灵”。这种<strong>以人为本</strong>的设计理念是苹果电脑一直处于不败之地的重要原因。</p><h1 id="苹果电脑的发展分析">苹果电脑的发展分析</h1><h2 id="专注一点，厚积薄发——苹果公司的创立">专注一点，厚积薄发——苹果公司的创立</h2><p>1975年初，美国著名的科技杂志——《大众电子学》刊登一条醒目的新闻：世界上第一台被称为“<strong>牛郎星</strong>”的个人计算机诞生了。这就对于科技迷来说是件轰动的大事，20岁的史蒂夫·乔布斯（Steve Jobs）心中的热情也被点燃。</p><p>乔布斯天生喜欢挑战，个性叛逆以及固执促使他很快着手研究个人计算机事业。</p><p>但是，研制计算机需要很多工具以及组件，此时乔布斯打起了惠普的主意。经过耐心说服，惠普公司实验室主管竟同意将一块被改造过得芯片借给乔布斯使用。于是乔布斯与助手们开始全身心的投入到研发工作中去。他们在计算机上连接了电视机，并且还使用了一个黑色键盘作为数据输入使用。当时，乔布斯根本没有意识到这样的举动会对此后个人计算机的定型产生了多么深远的影响。</p><p>1976年，乔布斯成功说服史蒂芬·沃兹涅克（Stephen Wozniak）装配机器之余跟他去推销，他们另一位朋友，罗·韦恩（Ron Wayne）也加入，三人在1976年4月1日组成了<strong>苹果电脑公司</strong>（Apple Computer Inc.）。</p><p>同年5月，乔布斯与一间本地电脑商店The Byte Shop洽商，店主保罗·泰瑞尔（Paul Terrell）同意订购50部后来被称为Apple I的设备，并在交货时支付每部500美元。乔布斯取得了这份订单后，出售自己贵重物品进行筹款，并且说服大型电子零件分销商Cramer Electronics店铺信用部经理，先给零件后付款，最终乔布斯成功地完成了这笔交易。亨利-福特组织总裁帕特里夏·莫拉迪安(Patricia Mooradian)发表声明称：“Apple-I不仅具有创新意义，而且还是为数字革命奠基的重要人工制品。”</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103222925825.png" alt="apple I图 需连接电视机做为显示器"></p><h2 id="历史只会铭记成功者——Lisa的问世与退场">历史只会铭记成功者——Lisa的问世与退场</h2><p>Lisa电脑的研发早在1978年秋天就已经开始，乔布斯集中精力想开发出一款新的电脑，取代老化的apple II。Lisa电脑的研发并不顺利，但突破众多。只花了<strong>三年</strong>时间（苹果电脑公司的说法是投入200人的多年努力）和5000万美元的投资，苹果公司就推出了Lisa PC机。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103222946282.png" alt="apple Lisa图"></p><p>在硬件部分，Lisa使用一个按键的鼠标和12英寸的黑白显示屏。虽然，以今天的标准来看，Lisa非常丑，就像是一台电视机和一台烤箱的不快乐婚姻的产物，但它却远比当时市场上长相最佳的电脑性能优越。</p><p>不过，真正的创新在于软件方面，Lisa是第一款提供<strong>图形化用户接口</strong>（GUI）的商用电脑，它的特色包括下拉菜单、可视窗口、滚动条功能、垃圾箱、剪贴簿、整合的应用程序（包括电子表格应用程序、文字处理、绘图应用程序等）。</p><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>Lisa几乎什么都具备了，那它少了什么？</p></div><p>首先，Lisa与其他机器<strong>没有兼容性</strong>，这造成了一个明显的问题：有多少趋避风险的商业人士会舍弃IBM而选择苹果呢？更糟的是，Lisa的心脏——摩托罗拉68000处理器——根本无法胜任处理的GUI导向信息的所有工作；最后，也是最重要的，Lisa的<strong>价格并不低</strong>，它的市场价高达9995美元，这使得苹果电脑公司必须雇佣专门的销售团队进行推销。但是，市场上不断谣传苹果公司很快就会推出和Lisa相似但售价只有一半的新款电脑，这使得电脑销售团的工作非常艰难。</p><p>商场如战场，苹果公司最终在1985年4月把Lisa撤出市场，将近一年半内只销售了约8万台。事实上，如若不是失败的定价策略、累赘卡慢的系统和惨淡的销量，现在被众人所铭记的很有可能就是 Lisa 了。</p><h2 id="开放包容，与对手握手——iMac的辉煌">开放包容，与对手握手——iMac的辉煌</h2><p>20世纪90年代世界范围内兴起互联网浪潮，在乔布斯看来，这是一场史无前例的变革，这既是苹果公司的一次机遇，同时也是一次挑战。而乔布斯也意识到苹果不能像以前那样故步自封了。</p><p>为了能够将 iMac 打造成具有竞争力的产品，乔布斯采用了大胆的举措——他破天荒地在 iMac 上使用了竞争对手微软的软件。他知道苹果公司没有赢得用户的原因是因为可供使用的软件不多，从而让用户得不到满足而选择放弃了苹果。无疑，当 iMac 装上这些令用户得心应手的软件后，用户就不用担心 iMac 在使用使用上带来的不便了。</p><p>另外，乔布斯还亲自带领设计团队到美国的一些生产糖果的工厂里去找灵感，虚心地向糖果工人请教如何让糖果看上去更让顾客喜爱。凭借在糖果工厂里面得到的经验，iMac 的外观被设计成通体圆润、色泽明亮透明，而且将传统意义上的显示器与主机结合在一起，不仅体积变轻了，而且让用户感觉更舒服了。</p><p>可以说，iMac 的出现完全融合了乔布斯的设计理念。在这种情况下，iMac一经推向市场便大受欢迎——短短一个月的时间内就卖掉了20多万台，一年时间内卖出的数量更是高达200万台。在强手如林、竞争日益激烈的情况下，苹果的表现着实让人钦佩不已。</p><h1 id="苹果电脑的成功原因分析">苹果电脑的成功原因分析</h1><h2 id="技术革新焕发魅力">技术革新焕发魅力</h2><p><strong>技术创新</strong>是苹果产品生产中的一个关键环节，从诞生之日起，它就存在于苹果公司的血液之中。在30多年的发展和进化中，苹果重新定义了技术创新的内涵，并在结合内、外部研发力量的同时，将技术创新与设计创新、营销创新、模式创新等创新方式有效结合起来，确保技术研发的高效性。</p><p>当多数企业选择委外研发的方式来降低研发成本、增进组织效率时，苹果却往反方向前进——努力控制产品被创造的过程，将自行研发作为打造其产品竞争力的关键。这对当下环境仍有借鉴意义，显然，只有自研，掌握核心科技，才不会被别人“卡脖子”，才能在当下竞争市场下留有不败之地。</p><h2 id="保持“酷”-定义“酷”">保持“酷” , 定义“酷”</h2><p>思考一下，苹果电脑卖的究竟是什么呢？除了它的无穷创新外，苹果卖的更是一个“<strong>酷</strong>”字。</p><p>然而回看苹果公司的历史，在沃兹尼克和apple I和apple II时代，苹果卖的更是一种“亲切”。产品本身——使用简便、个人化、色彩鲜艳、没有生硬的棱角，跟IBM冷酷的公司味道恰好相反。苹果商标就凸显了这一点：这时，苹果的“酷”是嬉皮的“酷”——拒绝主流价值观，它最早的广告好玩、轻松、反传统。在演变过程中的某个时段，苹果改变了，它抛掉了嬉皮和其他反主流文化的根基。它舍弃了彩虹色的商标，改用更雅致、更酷的苹果。</p><p><img src="https://asa-world-1309727865.cos.ap-chengdu.myqcloud.com/pic/image-20230103223012095.png" alt="图左为改版前的图标，图右为改版后的图标"></p><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>是什么促使苹果改变呢？</p></div><p>最简单的答案是：苹果长大了。苹果终究还是看出，为了成长或是为了生存，它必须做出改变。停留在最初的花盆里就没有茁长成长的空间。</p><p>另一个答案是：苹果变得不像沃兹尼克了，它更像乔布斯了。沃兹尼克是个亲切、惹人喜爱的人，而乔布斯是出了名的冷酷，会令人同他无话可说。</p><blockquote><p>说到乔布斯的冷酷，插播个乔布斯小故事。<br>乔布斯的母亲23岁遗弃了他，而乔布斯在23岁时让女友怀孕并选择放弃了自己的女儿，甚至在女友拿着99%的医院血缘证明的情况下，乔布斯依旧不承认是Lisa是自己的女儿，以至于在Lisa童年近10年的时间里乔布斯都对这个小女孩儿的成长不闻不问，可奇怪的是在新一代苹果电脑命名时，他却坚持使用自己不承认的女儿的名字Lisa给新开发的电脑产品命名，非常的匪夷所思。（黑人问号.jpg）</p></blockquote><p>哪么被视为“酷”的好处之一是，你有时可以定义什么是“酷”，让人们会觉得：要是苹果这么做的话，那就代表这是酷的东西。不过坏处是，人们会对你的标准变高，会注视你的一举一动，并思考：这是否符合我们对苹果期望的最高酷标准。任何事情都有两面性，不过苹果真的很少让我们失望。</p><h2 id="以人为本的设计理念">以人为本的设计理念</h2><p>苹果公司会在设计过程中会假设出客户角色，并以此仔细斟酌产品的方方面面，从用户界面的设计，到客户最直接接触产品时的店内零售体验无所不及。更令人惊叹的是，这一理念贯穿苹果公司发展始终：从Lisa的图形化界面，到“火线”（FireWire）配件让不同设备的传输更加便捷，再到iMac的无感体验等等再小的细节，也是以人为本的设计工作中必不可少的一环，因为这些细节决定了产品看起来值一千万美元，还是一文不值。</p><p>苹果公司利用设计增加独一无二的人类感觉，让技术产品更通人性，就像房间里多了一位朋友，而不是一个惹人生气的冰冷机器。技术虽然只是在幕后通过苹果产品发挥着作用，但却给我们留下了通人性的印象。当用鼠标滑动程序界面到最后一页时，如果继续滑动，界面就会稍微移动一下紧接着反弹回来，苹果将这种交互方式称为“橡皮筋动作”。橡皮筋动作在程序设计的角度看起来完全不必要，但这样做却给人愉悦的体验感受。</p><p>苹果公司深刻理解到，人们本能地会把复杂的系统当做生物看待。因为我们在给出评价时，评价的是所有关于产品的综合体验感受，我们期待一个“<strong>友好</strong>”的产品。</p><h1 id="参考资料">参考资料</h1><ul><li>郝美丽. 《四巨头：亚马逊、苹果、脸书和谷歌的隐藏基因》翻译报告[D]. 华南理工大学. 2019</li><li>苹果电脑诞生记[J]. 小学科学. 2019(01):34-35</li><li>“改变世界”的激将法[J]. 当代兵团. 2017(02):56</li><li>李鹏.苹果模式的思考[J]. 出版参考. 2013(33):16</li></ul>]]></content>
      
      
      <categories>
          
          <category> 观点思辩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 客观世界 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
